"use strict";
(self['webpackChunkplayground'] = self['webpackChunkplayground'] || []).push([["vendors-node_modules_pnpm_react-use_17_5_0_react-dom_18_2_0_react_18_2_0__react_18_2_0_node_m-909bcc"], {
"../node_modules/.pnpm/react-use@17.5.0_react-dom@18.2.0_react@18.2.0__react@18.2.0/node_modules/react-use/esm/useRafLoop.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return useRafLoop; }
});
/* harmony import */var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js");
/* harmony import */var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);

function useRafLoop(callback, initiallyActive) {
    if (initiallyActive === void 0) { initiallyActive = true; }
    var raf = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
    var rafActivity = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
    var rafCallback = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);
    rafCallback.current = callback;
    var step = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (time) {
        if (rafActivity.current) {
            rafCallback.current(time);
            raf.current = requestAnimationFrame(step);
        }
    }, []);
    var result = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {
        return [
            function () {
                // stop
                if (rafActivity.current) {
                    rafActivity.current = false;
                    raf.current && cancelAnimationFrame(raf.current);
                }
            },
            function () {
                // start
                if (!rafActivity.current) {
                    rafActivity.current = true;
                    raf.current = requestAnimationFrame(step);
                }
            },
            function () { return rafActivity.current; },
        ];
    }, []);
    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
        if (initiallyActive) {
            result[1]();
        }
        return result[0];
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return result;
}


}),
"../node_modules/.pnpm/wgsl_reflect@1.0.8/node_modules/wgsl_reflect/wgsl_reflect.module.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Alias: function() { return Alias; },
  AliasInfo: function() { return AliasInfo; },
  Argument: function() { return Argument; },
  ArrayIndex: function() { return ArrayIndex; },
  ArrayInfo: function() { return ArrayInfo; },
  ArrayType: function() { return ArrayType; },
  Assign: function() { return Assign; },
  AssignOperator: function() { return AssignOperator; },
  Attribute: function() { return Attribute; },
  BinaryOperator: function() { return BinaryOperator; },
  BitcastExpr: function() { return BitcastExpr; },
  Break: function() { return Break; },
  Call: function() { return Call; },
  CallExpr: function() { return CallExpr; },
  Case: function() { return Case; },
  Const: function() { return Const; },
  ConstExpr: function() { return ConstExpr; },
  Continue: function() { return Continue; },
  Continuing: function() { return Continuing; },
  CreateExpr: function() { return CreateExpr; },
  Default: function() { return Default; },
  Diagnostic: function() { return Diagnostic; },
  Discard: function() { return Discard; },
  ElseIf: function() { return ElseIf; },
  Enable: function() { return Enable; },
  EntryFunctions: function() { return EntryFunctions; },
  Expression: function() { return Expression; },
  For: function() { return For; },
  Function: function() { return Function; },
  FunctionInfo: function() { return FunctionInfo; },
  GroupingExpr: function() { return GroupingExpr; },
  If: function() { return If; },
  Increment: function() { return Increment; },
  IncrementOperator: function() { return IncrementOperator; },
  InputInfo: function() { return InputInfo; },
  Let: function() { return Let; },
  LiteralExpr: function() { return LiteralExpr; },
  Loop: function() { return Loop; },
  Member: function() { return Member; },
  MemberInfo: function() { return MemberInfo; },
  Node: function() { return Node; },
  Operator: function() { return Operator; },
  OutputInfo: function() { return OutputInfo; },
  Override: function() { return Override; },
  OverrideInfo: function() { return OverrideInfo; },
  ParseContext: function() { return ParseContext; },
  PointerType: function() { return PointerType; },
  Requires: function() { return Requires; },
  ResourceType: function() { return ResourceType; },
  Return: function() { return Return; },
  SamplerType: function() { return SamplerType; },
  Statement: function() { return Statement; },
  StaticAssert: function() { return StaticAssert; },
  StringExpr: function() { return StringExpr; },
  Struct: function() { return Struct; },
  StructInfo: function() { return StructInfo; },
  Switch: function() { return Switch; },
  SwitchCase: function() { return SwitchCase; },
  TemplateInfo: function() { return TemplateInfo; },
  TemplateType: function() { return TemplateType; },
  Token: function() { return Token; },
  TokenClass: function() { return TokenClass; },
  TokenType: function() { return TokenType; },
  TokenTypes: function() { return TokenTypes; },
  Type: function() { return Type; },
  TypeInfo: function() { return TypeInfo; },
  TypecastExpr: function() { return TypecastExpr; },
  UnaryOperator: function() { return UnaryOperator; },
  Var: function() { return Var; },
  VariableExpr: function() { return VariableExpr; },
  VariableInfo: function() { return VariableInfo; },
  WgslParser: function() { return WgslParser; },
  WgslReflect: function() { return WgslReflect; },
  WgslScanner: function() { return WgslScanner; },
  While: function() { return While; },
  _BlockEnd: function() { return _BlockEnd; },
  _BlockStart: function() { return _BlockStart; }
});
class ParseContext {
    constructor() {
        this.constants = new Map();
        this.aliases = new Map();
        this.structs = new Map();
    }
}
/**
 * @class Node
 * @category AST
 * Base class for AST nodes parsed from a WGSL shader.
 */
class Node {
    constructor() { }
    get isAstNode() {
        return true;
    }
    get astNodeType() {
        return "";
    }
    evaluate(context) {
        throw new Error("Cannot evaluate node");
    }
    evaluateString(context) {
        return this.evaluate(context).toString();
    }
    search(callback) { }
    searchBlock(block, callback) {
        if (block) {
            callback(_BlockStart.instance);
            for (const node of block) {
                if (node instanceof Array) {
                    this.searchBlock(node, callback);
                }
                else {
                    node.search(callback);
                }
            }
            callback(_BlockEnd.instance);
        }
    }
}
// For internal use only
class _BlockStart extends Node {
}
_BlockStart.instance = new _BlockStart();
// For internal use only
class _BlockEnd extends Node {
}
_BlockEnd.instance = new _BlockEnd();
/**
 * @class Statement
 * @extends Node
 * @category AST
 */
class Statement extends Node {
    constructor() {
        super();
    }
}
/**
 * @class Function
 * @extends Statement
 * @category AST
 */
class Function extends Statement {
    constructor(name, args, returnType, body, startLine, endLine) {
        super();
        this.calls = new Set();
        this.name = name;
        this.args = args;
        this.returnType = returnType;
        this.body = body;
        this.startLine = startLine;
        this.endLine = endLine;
    }
    get astNodeType() {
        return "function";
    }
    search(callback) {
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class StaticAssert
 * @extends Statement
 * @category AST
 */
class StaticAssert extends Statement {
    constructor(expression) {
        super();
        this.expression = expression;
    }
    get astNodeType() {
        return "staticAssert";
    }
    search(callback) {
        this.expression.search(callback);
    }
}
/**
 * @class While
 * @extends Statement
 * @category AST
 */
class While extends Statement {
    constructor(condition, body) {
        super();
        this.condition = condition;
        this.body = body;
    }
    get astNodeType() {
        return "while";
    }
    search(callback) {
        this.condition.search(callback);
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Continuing
 * @extends Statement
 * @category AST
 */
class Continuing extends Statement {
    constructor(body) {
        super();
        this.body = body;
    }
    get astNodeType() {
        return "continuing";
    }
    search(callback) {
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class For
 * @extends Statement
 * @category AST
 */
class For extends Statement {
    constructor(init, condition, increment, body) {
        super();
        this.init = init;
        this.condition = condition;
        this.increment = increment;
        this.body = body;
    }
    get astNodeType() {
        return "for";
    }
    search(callback) {
        var _a, _b, _c;
        (_a = this.init) === null || _a === void 0 ? void 0 : _a.search(callback);
        (_b = this.condition) === null || _b === void 0 ? void 0 : _b.search(callback);
        (_c = this.increment) === null || _c === void 0 ? void 0 : _c.search(callback);
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Var
 * @extends Statement
 * @category AST
 */
class Var extends Statement {
    constructor(name, type, storage, access, value) {
        super();
        this.name = name;
        this.type = type;
        this.storage = storage;
        this.access = access;
        this.value = value;
    }
    get astNodeType() {
        return "var";
    }
    search(callback) {
        var _a;
        callback(this);
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
/**
 * @class Override
 * @extends Statement
 * @category AST
 */
class Override extends Statement {
    constructor(name, type, value) {
        super();
        this.name = name;
        this.type = type;
        this.value = value;
    }
    get astNodeType() {
        return "override";
    }
    search(callback) {
        var _a;
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
/**
 * @class Let
 * @extends Statement
 * @category AST
 */
class Let extends Statement {
    constructor(name, type, storage, access, value) {
        super();
        this.name = name;
        this.type = type;
        this.storage = storage;
        this.access = access;
        this.value = value;
    }
    get astNodeType() {
        return "let";
    }
    search(callback) {
        var _a;
        callback(this);
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
/**
 * @class Const
 * @extends Statement
 * @category AST
 */
class Const extends Statement {
    constructor(name, type, storage, access, value) {
        super();
        this.name = name;
        this.type = type;
        this.storage = storage;
        this.access = access;
        this.value = value;
    }
    get astNodeType() {
        return "const";
    }
    evaluate(context) {
        return this.value.evaluate(context);
    }
    search(callback) {
        var _a;
        callback(this);
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
var IncrementOperator;
(function (IncrementOperator) {
    IncrementOperator["increment"] = "++";
    IncrementOperator["decrement"] = "--";
})(IncrementOperator || (IncrementOperator = {}));
(function (IncrementOperator) {
    function parse(val) {
        const key = val;
        if (key == "parse")
            throw new Error("Invalid value for IncrementOperator");
        return IncrementOperator[key];
    }
    IncrementOperator.parse = parse;
})(IncrementOperator || (IncrementOperator = {}));
/**
 * @class Increment
 * @extends Statement
 * @category AST
 */
class Increment extends Statement {
    constructor(operator, variable) {
        super();
        this.operator = operator;
        this.variable = variable;
    }
    get astNodeType() {
        return "increment";
    }
    search(callback) {
        this.variable.search(callback);
    }
}
var AssignOperator;
(function (AssignOperator) {
    AssignOperator["assign"] = "=";
    AssignOperator["addAssign"] = "+=";
    AssignOperator["subtractAssin"] = "-=";
    AssignOperator["multiplyAssign"] = "*=";
    AssignOperator["divideAssign"] = "/=";
    AssignOperator["moduloAssign"] = "%=";
    AssignOperator["andAssign"] = "&=";
    AssignOperator["orAssign"] = "|=";
    AssignOperator["xorAssign"] = "^=";
    AssignOperator["shiftLeftAssign"] = "<<=";
    AssignOperator["shiftRightAssign"] = ">>=";
})(AssignOperator || (AssignOperator = {}));
(function (AssignOperator) {
    function parse(val) {
        const key = val;
        if (key == "parse") {
            throw new Error("Invalid value for AssignOperator");
        }
        //return AssignOperator[key];
        return key;
    }
    AssignOperator.parse = parse;
})(AssignOperator || (AssignOperator = {}));
/**
 * @class Assign
 * @extends Statement
 * @category AST
 */
class Assign extends Statement {
    constructor(operator, variable, value) {
        super();
        this.operator = operator;
        this.variable = variable;
        this.value = value;
    }
    get astNodeType() {
        return "assign";
    }
    search(callback) {
        this.variable.search(callback);
        this.value.search(callback);
    }
}
/**
 * @class Call
 * @extends Statement
 * @category AST
 */
class Call extends Statement {
    constructor(name, args) {
        super();
        this.name = name;
        this.args = args;
    }
    get astNodeType() {
        return "call";
    }
    search(callback) {
        for (const node of this.args) {
            node.search(callback);
        }
        callback(this);
    }
}
/**
 * @class Loop
 * @extends Statement
 * @category AST
 */
class Loop extends Statement {
    constructor(body, continuing) {
        super();
        this.body = body;
        this.continuing = continuing;
    }
    get astNodeType() {
        return "loop";
    }
}
/**
 * @class Switch
 * @extends Statement
 * @category AST
 */
class Switch extends Statement {
    constructor(condition, body) {
        super();
        this.condition = condition;
        this.body = body;
    }
    get astNodeType() {
        return "body";
    }
}
/**
 * @class If
 * @extends Statement
 * @category AST
 */
class If extends Statement {
    constructor(condition, body, elseif, _else) {
        super();
        this.condition = condition;
        this.body = body;
        this.elseif = elseif;
        this.else = _else;
    }
    get astNodeType() {
        return "if";
    }
    search(callback) {
        this.condition.search(callback);
        this.searchBlock(this.body, callback);
        this.searchBlock(this.elseif, callback);
        this.searchBlock(this.else, callback);
    }
}
/**
 * @class Return
 * @extends Statement
 * @category AST
 */
class Return extends Statement {
    constructor(value) {
        super();
        this.value = value;
    }
    get astNodeType() {
        return "return";
    }
    search(callback) {
        var _a;
        (_a = this.value) === null || _a === void 0 ? void 0 : _a.search(callback);
    }
}
/**
 * @class Enable
 * @extends Statement
 * @category AST
 */
class Enable extends Statement {
    constructor(name) {
        super();
        this.name = name;
    }
    get astNodeType() {
        return "enable";
    }
}
/**
 * @class Requires
 * @extends Statement
 * @category AST
 */
class Requires extends Statement {
    constructor(extensions) {
        super();
        this.extensions = extensions;
    }
    get astNodeType() {
        return "requires";
    }
}
/**
 * @class Diagnostic
 * @extends Statement
 * @category AST
 */
class Diagnostic extends Statement {
    constructor(severity, rule) {
        super();
        this.severity = severity;
        this.rule = rule;
    }
    get astNodeType() {
        return "diagnostic";
    }
}
/**
 * @class Alias
 * @extends Statement
 * @category AST
 */
class Alias extends Statement {
    constructor(name, type) {
        super();
        this.name = name;
        this.type = type;
    }
    get astNodeType() {
        return "alias";
    }
}
/**
 * @class Discard
 * @extends Statement
 * @category AST
 */
class Discard extends Statement {
    constructor() {
        super();
    }
    get astNodeType() {
        return "discard";
    }
}
/**
 * @class Break
 * @extends Statement
 * @category AST
 */
class Break extends Statement {
    constructor() {
        super();
    }
    get astNodeType() {
        return "break";
    }
}
/**
 * @class Continue
 * @extends Statement
 * @category AST
 */
class Continue extends Statement {
    constructor() {
        super();
    }
    get astNodeType() {
        return "continue";
    }
}
/**
 * @class Type
 * @extends Statement
 * @category AST
 */
class Type extends Statement {
    constructor(name) {
        super();
        this.name = name;
    }
    get astNodeType() {
        return "type";
    }
    get isStruct() {
        return false;
    }
    get isArray() {
        return false;
    }
}
/**
 * @class StructType
 * @extends Type
 * @category AST
 */
class Struct extends Type {
    constructor(name, members, startLine, endLine) {
        super(name);
        this.members = members;
        this.startLine = startLine;
        this.endLine = endLine;
    }
    get astNodeType() {
        return "struct";
    }
    get isStruct() {
        return true;
    }
    /// Return the index of the member with the given name, or -1 if not found.
    getMemberIndex(name) {
        for (let i = 0; i < this.members.length; i++) {
            if (this.members[i].name == name)
                return i;
        }
        return -1;
    }
}
/**
 * @class TemplateType
 * @extends Type
 * @category AST
 */
class TemplateType extends Type {
    constructor(name, format, access) {
        super(name);
        this.format = format;
        this.access = access;
    }
    get astNodeType() {
        return "template";
    }
}
/**
 * @class PointerType
 * @extends Type
 * @category AST
 */
class PointerType extends Type {
    constructor(name, storage, type, access) {
        super(name);
        this.storage = storage;
        this.type = type;
        this.access = access;
    }
    get astNodeType() {
        return "pointer";
    }
}
/**
 * @class ArrayType
 * @extends Type
 * @category AST
 */
class ArrayType extends Type {
    constructor(name, attributes, format, count) {
        super(name);
        this.attributes = attributes;
        this.format = format;
        this.count = count;
    }
    get astNodeType() {
        return "array";
    }
    get isArray() {
        return true;
    }
}
/**
 * @class SamplerType
 * @extends Type
 * @category AST
 */
class SamplerType extends Type {
    constructor(name, format, access) {
        super(name);
        this.format = format;
        this.access = access;
    }
    get astNodeType() {
        return "sampler";
    }
}
/**
 * @class Expression
 * @extends Node
 * @category AST
 */
class Expression extends Node {
    constructor() {
        super();
    }
}
/**
 * @class StringExpr
 * @extends Expression
 * @category AST
 */
class StringExpr extends Expression {
    constructor(value) {
        super();
        this.value = value;
    }
    get astNodeType() {
        return "stringExpr";
    }
    toString() {
        return this.value;
    }
    evaluateString() {
        return this.value;
    }
}
/**
 * @class CreateExpr
 * @extends Expression
 * @category AST
 */
class CreateExpr extends Expression {
    constructor(type, args) {
        super();
        this.type = type;
        this.args = args;
    }
    get astNodeType() {
        return "createExpr";
    }
    search(callback) {
        callback(this);
        for (const node of this.args) {
            node.search(callback);
        }
    }
}
/**
 * @class CallExpr
 * @extends Expression
 * @category AST
 */
class CallExpr extends Expression {
    constructor(name, args) {
        super();
        this.name = name;
        this.args = args;
    }
    get astNodeType() {
        return "callExpr";
    }
    evaluate(context) {
        switch (this.name) {
            case "abs":
                return Math.abs(this.args[0].evaluate(context));
            case "acos":
                return Math.acos(this.args[0].evaluate(context));
            case "acosh":
                return Math.acosh(this.args[0].evaluate(context));
            case "asin":
                return Math.asin(this.args[0].evaluate(context));
            case "asinh":
                return Math.asinh(this.args[0].evaluate(context));
            case "atan":
                return Math.atan(this.args[0].evaluate(context));
            case "atan2":
                return Math.atan2(this.args[0].evaluate(context), this.args[1].evaluate(context));
            case "atanh":
                return Math.atanh(this.args[0].evaluate(context));
            case "ceil":
                return Math.ceil(this.args[0].evaluate(context));
            case "clamp":
                return Math.min(Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context)), this.args[2].evaluate(context));
            case "cos":
                return Math.cos(this.args[0].evaluate(context));
            //case "cross":
            //TODO: (x[i] * y[j] - x[j] * y[i])
            case "degrees":
                return (this.args[0].evaluate(context) * 180) / Math.PI;
            //case "determinant":
            //TODO implement
            case "distance":
                return Math.sqrt(Math.pow(this.args[0].evaluate(context) - this.args[1].evaluate(context), 2));
            case "dot":
            //TODO: (x[i] * y[i])
            case "exp":
                return Math.exp(this.args[0].evaluate(context));
            case "exp2":
                return Math.pow(2, this.args[0].evaluate(context));
            //case "extractBits":
            //TODO: implement
            //case "firstLeadingBit":
            //TODO: implement
            case "floor":
                return Math.floor(this.args[0].evaluate(context));
            case "fma":
                return (this.args[0].evaluate(context) * this.args[1].evaluate(context) +
                    this.args[2].evaluate(context));
            case "fract":
                return (this.args[0].evaluate(context) -
                    Math.floor(this.args[0].evaluate(context)));
            //case "frexp":
            //TODO: implement
            case "inverseSqrt":
                return 1 / Math.sqrt(this.args[0].evaluate(context));
            //case "length":
            //TODO: implement
            case "log":
                return Math.log(this.args[0].evaluate(context));
            case "log2":
                return Math.log2(this.args[0].evaluate(context));
            case "max":
                return Math.max(this.args[0].evaluate(context), this.args[1].evaluate(context));
            case "min":
                return Math.min(this.args[0].evaluate(context), this.args[1].evaluate(context));
            case "mix":
                return (this.args[0].evaluate(context) *
                    (1 - this.args[2].evaluate(context)) +
                    this.args[1].evaluate(context) * this.args[2].evaluate(context));
            case "modf":
                return (this.args[0].evaluate(context) -
                    Math.floor(this.args[0].evaluate(context)));
            case "pow":
                return Math.pow(this.args[0].evaluate(context), this.args[1].evaluate(context));
            case "radians":
                return (this.args[0].evaluate(context) * Math.PI) / 180;
            case "round":
                return Math.round(this.args[0].evaluate(context));
            case "sign":
                return Math.sign(this.args[0].evaluate(context));
            case "sin":
                return Math.sin(this.args[0].evaluate(context));
            case "sinh":
                return Math.sinh(this.args[0].evaluate(context));
            case "saturate":
                return Math.min(Math.max(this.args[0].evaluate(context), 0), 1);
            case "smoothstep":
                return (this.args[0].evaluate(context) *
                    this.args[0].evaluate(context) *
                    (3 - 2 * this.args[0].evaluate(context)));
            case "sqrt":
                return Math.sqrt(this.args[0].evaluate(context));
            case "step":
                return this.args[0].evaluate(context) < this.args[1].evaluate(context)
                    ? 0
                    : 1;
            case "tan":
                return Math.tan(this.args[0].evaluate(context));
            case "tanh":
                return Math.tanh(this.args[0].evaluate(context));
            case "trunc":
                return Math.trunc(this.args[0].evaluate(context));
            default:
                throw new Error("Non const function: " + this.name);
        }
    }
    search(callback) {
        for (const node of this.args) {
            node.search(callback);
        }
        callback(this);
    }
}
/**
 * @class VariableExpr
 * @extends Expression
 * @category AST
 */
class VariableExpr extends Expression {
    constructor(name) {
        super();
        this.name = name;
    }
    get astNodeType() {
        return "varExpr";
    }
    search(callback) {
        callback(this);
        if (this.postfix) {
            this.postfix.search(callback);
        }
    }
    evaluate(context) {
        const constant = context.constants.get(this.name);
        if (!constant) {
            throw new Error("Cannot evaluate node");
        }
        return constant.evaluate(context);
    }
}
/**
 * @class ConstExpr
 * @extends Expression
 * @category AST
 */
class ConstExpr extends Expression {
    constructor(name, initializer) {
        super();
        this.name = name;
        this.initializer = initializer;
    }
    get astNodeType() {
        return "constExpr";
    }
    evaluate(context) {
        var _a, _b;
        if (this.initializer instanceof CreateExpr) {
            // This is a struct constant
            const property = (_a = this.postfix) === null || _a === void 0 ? void 0 : _a.evaluateString(context);
            const type = (_b = this.initializer.type) === null || _b === void 0 ? void 0 : _b.name;
            const struct = context.structs.get(type);
            const memberIndex = struct === null || struct === void 0 ? void 0 : struct.getMemberIndex(property);
            if (memberIndex != -1) {
                const value = this.initializer.args[memberIndex].evaluate(context);
                return value;
            }
            console.log(memberIndex);
        }
        return this.initializer.evaluate(context);
    }
    search(callback) {
        this.initializer.search(callback);
    }
}
/**
 * @class LiteralExpr
 * @extends Expression
 * @category AST
 */
class LiteralExpr extends Expression {
    constructor(value) {
        super();
        this.value = value;
    }
    get astNodeType() {
        return "literalExpr";
    }
    evaluate() {
        return this.value;
    }
}
/**
 * @class BitcastExpr
 * @extends Expression
 * @category AST
 */
class BitcastExpr extends Expression {
    constructor(type, value) {
        super();
        this.type = type;
        this.value = value;
    }
    get astNodeType() {
        return "bitcastExpr";
    }
    search(callback) {
        this.value.search(callback);
    }
}
/**
 * @class TypecastExpr
 * @extends Expression
 * @category AST
 */
class TypecastExpr extends Expression {
    constructor(type, args) {
        super();
        this.type = type;
        this.args = args;
    }
    get astNodeType() {
        return "typecastExpr";
    }
    evaluate(context) {
        return this.args[0].evaluate(context);
    }
    search(callback) {
        this.searchBlock(this.args, callback);
    }
}
/**
 * @class GroupingExpr
 * @extends Expression
 * @category AST
 */
class GroupingExpr extends Expression {
    constructor(contents) {
        super();
        this.contents = contents;
    }
    get astNodeType() {
        return "groupExpr";
    }
    evaluate(context) {
        return this.contents[0].evaluate(context);
    }
    search(callback) {
        this.searchBlock(this.contents, callback);
    }
}
/**
 * @class ArrayIndex
 * @extends Expression
 * @category AST
 */
class ArrayIndex extends Expression {
    constructor(index) {
        super();
        this.index = index;
    }
    search(callback) {
        this.index.search(callback);
    }
}
/**
 * @class Operator
 * @extends Expression
 * @category AST
 */
class Operator extends Expression {
    constructor() {
        super();
    }
}
/**
 * @class UnaryOperator
 * @extends Operator
 * @category AST
 * @property {string} operator +, -, !, ~
 */
class UnaryOperator extends Operator {
    constructor(operator, right) {
        super();
        this.operator = operator;
        this.right = right;
    }
    get astNodeType() {
        return "unaryOp";
    }
    evaluate(context) {
        switch (this.operator) {
            case "+":
                return this.right.evaluate(context);
            case "-":
                return -this.right.evaluate(context);
            case "!":
                return this.right.evaluate(context) ? 0 : 1;
            case "~":
                return ~this.right.evaluate(context);
            default:
                throw new Error("Unknown unary operator: " + this.operator);
        }
    }
    search(callback) {
        this.right.search(callback);
    }
}
/**
 * @class BinaryOperator
 * @extends Operator
 * @category AST
 * @property {string} operator +, -, *, /, %, ==, !=, <, >, <=, >=, &&, ||
 */
class BinaryOperator extends Operator {
    constructor(operator, left, right) {
        super();
        this.operator = operator;
        this.left = left;
        this.right = right;
    }
    get astNodeType() {
        return "binaryOp";
    }
    evaluate(context) {
        switch (this.operator) {
            case "+":
                return this.left.evaluate(context) + this.right.evaluate(context);
            case "-":
                return this.left.evaluate(context) - this.right.evaluate(context);
            case "*":
                return this.left.evaluate(context) * this.right.evaluate(context);
            case "/":
                return this.left.evaluate(context) / this.right.evaluate(context);
            case "%":
                return this.left.evaluate(context) % this.right.evaluate(context);
            case "==":
                return this.left.evaluate(context) == this.right.evaluate(context)
                    ? 1
                    : 0;
            case "!=":
                return this.left.evaluate(context) != this.right.evaluate(context)
                    ? 1
                    : 0;
            case "<":
                return this.left.evaluate(context) < this.right.evaluate(context)
                    ? 1
                    : 0;
            case ">":
                return this.left.evaluate(context) > this.right.evaluate(context)
                    ? 1
                    : 0;
            case "<=":
                return this.left.evaluate(context) <= this.right.evaluate(context)
                    ? 1
                    : 0;
            case ">=":
                return this.left.evaluate(context) >= this.right.evaluate(context)
                    ? 1
                    : 0;
            case "&&":
                return this.left.evaluate(context) && this.right.evaluate(context)
                    ? 1
                    : 0;
            case "||":
                return this.left.evaluate(context) || this.right.evaluate(context)
                    ? 1
                    : 0;
            default:
                throw new Error(`Unknown operator ${this.operator}`);
        }
    }
    search(callback) {
        this.left.search(callback);
        this.right.search(callback);
    }
}
/**
 * @class SwitchCase
 * @extends Node
 * @category AST
 */
class SwitchCase extends Node {
    constructor() {
        super();
    }
}
/**
 * @class Case
 * @extends SwitchCase
 * @category AST
 */
class Case extends SwitchCase {
    constructor(selector, body) {
        super();
        this.selector = selector;
        this.body = body;
    }
    get astNodeType() {
        return "case";
    }
    search(callback) {
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Default
 * @extends SwitchCase
 * @category AST
 */
class Default extends SwitchCase {
    constructor(body) {
        super();
        this.body = body;
    }
    get astNodeType() {
        return "default";
    }
    search(callback) {
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Argument
 * @extends Node
 * @category AST
 */
class Argument extends Node {
    constructor(name, type, attributes) {
        super();
        this.name = name;
        this.type = type;
        this.attributes = attributes;
    }
    get astNodeType() {
        return "argument";
    }
}
/**
 * @class ElseIf
 * @extends Node
 * @category AST
 */
class ElseIf extends Node {
    constructor(condition, body) {
        super();
        this.condition = condition;
        this.body = body;
    }
    get astNodeType() {
        return "elseif";
    }
    search(callback) {
        this.condition.search(callback);
        this.searchBlock(this.body, callback);
    }
}
/**
 * @class Member
 * @extends Node
 * @category AST
 */
class Member extends Node {
    constructor(name, type, attributes) {
        super();
        this.name = name;
        this.type = type;
        this.attributes = attributes;
    }
    get astNodeType() {
        return "member";
    }
}
/**
 * @class Attribute
 * @extends Node
 * @category AST
 */
class Attribute extends Node {
    constructor(name, value) {
        super();
        this.name = name;
        this.value = value;
    }
    get astNodeType() {
        return "attribute";
    }
}

var _a;
var TokenClass;
(function (TokenClass) {
    TokenClass[TokenClass["token"] = 0] = "token";
    TokenClass[TokenClass["keyword"] = 1] = "keyword";
    TokenClass[TokenClass["reserved"] = 2] = "reserved";
})(TokenClass || (TokenClass = {}));
class TokenType {
    constructor(name, type, rule) {
        this.name = name;
        this.type = type;
        this.rule = rule;
    }
    toString() {
        return this.name;
    }
}
/// Catalog of defined token types, keywords, and reserved words.
class TokenTypes {
}
_a = TokenTypes;
TokenTypes.none = new TokenType("", TokenClass.reserved, "");
TokenTypes.eof = new TokenType("EOF", TokenClass.token, "");
TokenTypes.reserved = {
    asm: new TokenType("asm", TokenClass.reserved, "asm"),
    bf16: new TokenType("bf16", TokenClass.reserved, "bf16"),
    do: new TokenType("do", TokenClass.reserved, "do"),
    enum: new TokenType("enum", TokenClass.reserved, "enum"),
    f16: new TokenType("f16", TokenClass.reserved, "f16"),
    f64: new TokenType("f64", TokenClass.reserved, "f64"),
    handle: new TokenType("handle", TokenClass.reserved, "handle"),
    i8: new TokenType("i8", TokenClass.reserved, "i8"),
    i16: new TokenType("i16", TokenClass.reserved, "i16"),
    i64: new TokenType("i64", TokenClass.reserved, "i64"),
    mat: new TokenType("mat", TokenClass.reserved, "mat"),
    premerge: new TokenType("premerge", TokenClass.reserved, "premerge"),
    regardless: new TokenType("regardless", TokenClass.reserved, "regardless"),
    typedef: new TokenType("typedef", TokenClass.reserved, "typedef"),
    u8: new TokenType("u8", TokenClass.reserved, "u8"),
    u16: new TokenType("u16", TokenClass.reserved, "u16"),
    u64: new TokenType("u64", TokenClass.reserved, "u64"),
    unless: new TokenType("unless", TokenClass.reserved, "unless"),
    using: new TokenType("using", TokenClass.reserved, "using"),
    vec: new TokenType("vec", TokenClass.reserved, "vec"),
    void: new TokenType("void", TokenClass.reserved, "void"),
};
TokenTypes.keywords = {
    array: new TokenType("array", TokenClass.keyword, "array"),
    atomic: new TokenType("atomic", TokenClass.keyword, "atomic"),
    bool: new TokenType("bool", TokenClass.keyword, "bool"),
    f32: new TokenType("f32", TokenClass.keyword, "f32"),
    i32: new TokenType("i32", TokenClass.keyword, "i32"),
    mat2x2: new TokenType("mat2x2", TokenClass.keyword, "mat2x2"),
    mat2x3: new TokenType("mat2x3", TokenClass.keyword, "mat2x3"),
    mat2x4: new TokenType("mat2x4", TokenClass.keyword, "mat2x4"),
    mat3x2: new TokenType("mat3x2", TokenClass.keyword, "mat3x2"),
    mat3x3: new TokenType("mat3x3", TokenClass.keyword, "mat3x3"),
    mat3x4: new TokenType("mat3x4", TokenClass.keyword, "mat3x4"),
    mat4x2: new TokenType("mat4x2", TokenClass.keyword, "mat4x2"),
    mat4x3: new TokenType("mat4x3", TokenClass.keyword, "mat4x3"),
    mat4x4: new TokenType("mat4x4", TokenClass.keyword, "mat4x4"),
    ptr: new TokenType("ptr", TokenClass.keyword, "ptr"),
    sampler: new TokenType("sampler", TokenClass.keyword, "sampler"),
    sampler_comparison: new TokenType("sampler_comparison", TokenClass.keyword, "sampler_comparison"),
    struct: new TokenType("struct", TokenClass.keyword, "struct"),
    texture_1d: new TokenType("texture_1d", TokenClass.keyword, "texture_1d"),
    texture_2d: new TokenType("texture_2d", TokenClass.keyword, "texture_2d"),
    texture_2d_array: new TokenType("texture_2d_array", TokenClass.keyword, "texture_2d_array"),
    texture_3d: new TokenType("texture_3d", TokenClass.keyword, "texture_3d"),
    texture_cube: new TokenType("texture_cube", TokenClass.keyword, "texture_cube"),
    texture_cube_array: new TokenType("texture_cube_array", TokenClass.keyword, "texture_cube_array"),
    texture_multisampled_2d: new TokenType("texture_multisampled_2d", TokenClass.keyword, "texture_multisampled_2d"),
    texture_storage_1d: new TokenType("texture_storage_1d", TokenClass.keyword, "texture_storage_1d"),
    texture_storage_2d: new TokenType("texture_storage_2d", TokenClass.keyword, "texture_storage_2d"),
    texture_storage_2d_array: new TokenType("texture_storage_2d_array", TokenClass.keyword, "texture_storage_2d_array"),
    texture_storage_3d: new TokenType("texture_storage_3d", TokenClass.keyword, "texture_storage_3d"),
    texture_depth_2d: new TokenType("texture_depth_2d", TokenClass.keyword, "texture_depth_2d"),
    texture_depth_2d_array: new TokenType("texture_depth_2d_array", TokenClass.keyword, "texture_depth_2d_array"),
    texture_depth_cube: new TokenType("texture_depth_cube", TokenClass.keyword, "texture_depth_cube"),
    texture_depth_cube_array: new TokenType("texture_depth_cube_array", TokenClass.keyword, "texture_depth_cube_array"),
    texture_depth_multisampled_2d: new TokenType("texture_depth_multisampled_2d", TokenClass.keyword, "texture_depth_multisampled_2d"),
    texture_external: new TokenType("texture_external", TokenClass.keyword, "texture_external"),
    u32: new TokenType("u32", TokenClass.keyword, "u32"),
    vec2: new TokenType("vec2", TokenClass.keyword, "vec2"),
    vec3: new TokenType("vec3", TokenClass.keyword, "vec3"),
    vec4: new TokenType("vec4", TokenClass.keyword, "vec4"),
    bitcast: new TokenType("bitcast", TokenClass.keyword, "bitcast"),
    block: new TokenType("block", TokenClass.keyword, "block"),
    break: new TokenType("break", TokenClass.keyword, "break"),
    case: new TokenType("case", TokenClass.keyword, "case"),
    continue: new TokenType("continue", TokenClass.keyword, "continue"),
    continuing: new TokenType("continuing", TokenClass.keyword, "continuing"),
    default: new TokenType("default", TokenClass.keyword, "default"),
    diagnostic: new TokenType("diagnostic", TokenClass.keyword, "diagnostic"),
    discard: new TokenType("discard", TokenClass.keyword, "discard"),
    else: new TokenType("else", TokenClass.keyword, "else"),
    enable: new TokenType("enable", TokenClass.keyword, "enable"),
    fallthrough: new TokenType("fallthrough", TokenClass.keyword, "fallthrough"),
    false: new TokenType("false", TokenClass.keyword, "false"),
    fn: new TokenType("fn", TokenClass.keyword, "fn"),
    for: new TokenType("for", TokenClass.keyword, "for"),
    function: new TokenType("function", TokenClass.keyword, "function"),
    if: new TokenType("if", TokenClass.keyword, "if"),
    let: new TokenType("let", TokenClass.keyword, "let"),
    const: new TokenType("const", TokenClass.keyword, "const"),
    loop: new TokenType("loop", TokenClass.keyword, "loop"),
    while: new TokenType("while", TokenClass.keyword, "while"),
    private: new TokenType("private", TokenClass.keyword, "private"),
    read: new TokenType("read", TokenClass.keyword, "read"),
    read_write: new TokenType("read_write", TokenClass.keyword, "read_write"),
    return: new TokenType("return", TokenClass.keyword, "return"),
    requires: new TokenType("requires", TokenClass.keyword, "requires"),
    storage: new TokenType("storage", TokenClass.keyword, "storage"),
    switch: new TokenType("switch", TokenClass.keyword, "switch"),
    true: new TokenType("true", TokenClass.keyword, "true"),
    alias: new TokenType("alias", TokenClass.keyword, "alias"),
    type: new TokenType("type", TokenClass.keyword, "type"),
    uniform: new TokenType("uniform", TokenClass.keyword, "uniform"),
    var: new TokenType("var", TokenClass.keyword, "var"),
    override: new TokenType("override", TokenClass.keyword, "override"),
    workgroup: new TokenType("workgroup", TokenClass.keyword, "workgroup"),
    write: new TokenType("write", TokenClass.keyword, "write"),
    r8unorm: new TokenType("r8unorm", TokenClass.keyword, "r8unorm"),
    r8snorm: new TokenType("r8snorm", TokenClass.keyword, "r8snorm"),
    r8uint: new TokenType("r8uint", TokenClass.keyword, "r8uint"),
    r8sint: new TokenType("r8sint", TokenClass.keyword, "r8sint"),
    r16uint: new TokenType("r16uint", TokenClass.keyword, "r16uint"),
    r16sint: new TokenType("r16sint", TokenClass.keyword, "r16sint"),
    r16float: new TokenType("r16float", TokenClass.keyword, "r16float"),
    rg8unorm: new TokenType("rg8unorm", TokenClass.keyword, "rg8unorm"),
    rg8snorm: new TokenType("rg8snorm", TokenClass.keyword, "rg8snorm"),
    rg8uint: new TokenType("rg8uint", TokenClass.keyword, "rg8uint"),
    rg8sint: new TokenType("rg8sint", TokenClass.keyword, "rg8sint"),
    r32uint: new TokenType("r32uint", TokenClass.keyword, "r32uint"),
    r32sint: new TokenType("r32sint", TokenClass.keyword, "r32sint"),
    r32float: new TokenType("r32float", TokenClass.keyword, "r32float"),
    rg16uint: new TokenType("rg16uint", TokenClass.keyword, "rg16uint"),
    rg16sint: new TokenType("rg16sint", TokenClass.keyword, "rg16sint"),
    rg16float: new TokenType("rg16float", TokenClass.keyword, "rg16float"),
    rgba8unorm: new TokenType("rgba8unorm", TokenClass.keyword, "rgba8unorm"),
    rgba8unorm_srgb: new TokenType("rgba8unorm_srgb", TokenClass.keyword, "rgba8unorm_srgb"),
    rgba8snorm: new TokenType("rgba8snorm", TokenClass.keyword, "rgba8snorm"),
    rgba8uint: new TokenType("rgba8uint", TokenClass.keyword, "rgba8uint"),
    rgba8sint: new TokenType("rgba8sint", TokenClass.keyword, "rgba8sint"),
    bgra8unorm: new TokenType("bgra8unorm", TokenClass.keyword, "bgra8unorm"),
    bgra8unorm_srgb: new TokenType("bgra8unorm_srgb", TokenClass.keyword, "bgra8unorm_srgb"),
    rgb10a2unorm: new TokenType("rgb10a2unorm", TokenClass.keyword, "rgb10a2unorm"),
    rg11b10float: new TokenType("rg11b10float", TokenClass.keyword, "rg11b10float"),
    rg32uint: new TokenType("rg32uint", TokenClass.keyword, "rg32uint"),
    rg32sint: new TokenType("rg32sint", TokenClass.keyword, "rg32sint"),
    rg32float: new TokenType("rg32float", TokenClass.keyword, "rg32float"),
    rgba16uint: new TokenType("rgba16uint", TokenClass.keyword, "rgba16uint"),
    rgba16sint: new TokenType("rgba16sint", TokenClass.keyword, "rgba16sint"),
    rgba16float: new TokenType("rgba16float", TokenClass.keyword, "rgba16float"),
    rgba32uint: new TokenType("rgba32uint", TokenClass.keyword, "rgba32uint"),
    rgba32sint: new TokenType("rgba32sint", TokenClass.keyword, "rgba32sint"),
    rgba32float: new TokenType("rgba32float", TokenClass.keyword, "rgba32float"),
    static_assert: new TokenType("static_assert", TokenClass.keyword, "static_assert"),
    // WGSL grammar has a few keywords that have different token names than the strings they
    // represent. Aliasing them here.
    /*int32: new TokenType("i32", TokenClass.keyword, "i32"),
        uint32: new TokenType("u32", TokenClass.keyword, "u32"),
        float32: new TokenType("f32", TokenClass.keyword, "f32"),
        pointer: new TokenType("ptr", TokenClass.keyword, "ptr"),*/
};
TokenTypes.tokens = {
    decimal_float_literal: new TokenType("decimal_float_literal", TokenClass.token, /((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?f?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+f?)|([0-9]+f)/),
    hex_float_literal: new TokenType("hex_float_literal", TokenClass.token, /-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+f?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+f?))/),
    int_literal: new TokenType("int_literal", TokenClass.token, /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/),
    uint_literal: new TokenType("uint_literal", TokenClass.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/),
    ident: new TokenType("ident", TokenClass.token, /[_a-zA-Z][0-9a-zA-Z_]*/),
    and: new TokenType("and", TokenClass.token, "&"),
    and_and: new TokenType("and_and", TokenClass.token, "&&"),
    arrow: new TokenType("arrow ", TokenClass.token, "->"),
    attr: new TokenType("attr", TokenClass.token, "@"),
    forward_slash: new TokenType("forward_slash", TokenClass.token, "/"),
    bang: new TokenType("bang", TokenClass.token, "!"),
    bracket_left: new TokenType("bracket_left", TokenClass.token, "["),
    bracket_right: new TokenType("bracket_right", TokenClass.token, "]"),
    brace_left: new TokenType("brace_left", TokenClass.token, "{"),
    brace_right: new TokenType("brace_right", TokenClass.token, "}"),
    colon: new TokenType("colon", TokenClass.token, ":"),
    comma: new TokenType("comma", TokenClass.token, ","),
    equal: new TokenType("equal", TokenClass.token, "="),
    equal_equal: new TokenType("equal_equal", TokenClass.token, "=="),
    not_equal: new TokenType("not_equal", TokenClass.token, "!="),
    greater_than: new TokenType("greater_than", TokenClass.token, ">"),
    greater_than_equal: new TokenType("greater_than_equal", TokenClass.token, ">="),
    shift_right: new TokenType("shift_right", TokenClass.token, ">>"),
    less_than: new TokenType("less_than", TokenClass.token, "<"),
    less_than_equal: new TokenType("less_than_equal", TokenClass.token, "<="),
    shift_left: new TokenType("shift_left", TokenClass.token, "<<"),
    modulo: new TokenType("modulo", TokenClass.token, "%"),
    minus: new TokenType("minus", TokenClass.token, "-"),
    minus_minus: new TokenType("minus_minus", TokenClass.token, "--"),
    period: new TokenType("period", TokenClass.token, "."),
    plus: new TokenType("plus", TokenClass.token, "+"),
    plus_plus: new TokenType("plus_plus", TokenClass.token, "++"),
    or: new TokenType("or", TokenClass.token, "|"),
    or_or: new TokenType("or_or", TokenClass.token, "||"),
    paren_left: new TokenType("paren_left", TokenClass.token, "("),
    paren_right: new TokenType("paren_right", TokenClass.token, ")"),
    semicolon: new TokenType("semicolon", TokenClass.token, ";"),
    star: new TokenType("star", TokenClass.token, "*"),
    tilde: new TokenType("tilde", TokenClass.token, "~"),
    underscore: new TokenType("underscore", TokenClass.token, "_"),
    xor: new TokenType("xor", TokenClass.token, "^"),
    plus_equal: new TokenType("plus_equal", TokenClass.token, "+="),
    minus_equal: new TokenType("minus_equal", TokenClass.token, "-="),
    times_equal: new TokenType("times_equal", TokenClass.token, "*="),
    division_equal: new TokenType("division_equal", TokenClass.token, "/="),
    modulo_equal: new TokenType("modulo_equal", TokenClass.token, "%="),
    and_equal: new TokenType("and_equal", TokenClass.token, "&="),
    or_equal: new TokenType("or_equal", TokenClass.token, "|="),
    xor_equal: new TokenType("xor_equal", TokenClass.token, "^="),
    shift_right_equal: new TokenType("shift_right_equal", TokenClass.token, ">>="),
    shift_left_equal: new TokenType("shift_left_equal", TokenClass.token, "<<="),
};
TokenTypes.simpleTokens = {
    "@": _a.tokens.attr,
    "{": _a.tokens.brace_left,
    "}": _a.tokens.brace_right,
    ":": _a.tokens.colon,
    ",": _a.tokens.comma,
    "(": _a.tokens.paren_left,
    ")": _a.tokens.paren_right,
    ";": _a.tokens.semicolon,
};
TokenTypes.literalTokens = {
    "&": _a.tokens.and,
    "&&": _a.tokens.and_and,
    "->": _a.tokens.arrow,
    "/": _a.tokens.forward_slash,
    "!": _a.tokens.bang,
    "[": _a.tokens.bracket_left,
    "]": _a.tokens.bracket_right,
    "=": _a.tokens.equal,
    "==": _a.tokens.equal_equal,
    "!=": _a.tokens.not_equal,
    ">": _a.tokens.greater_than,
    ">=": _a.tokens.greater_than_equal,
    ">>": _a.tokens.shift_right,
    "<": _a.tokens.less_than,
    "<=": _a.tokens.less_than_equal,
    "<<": _a.tokens.shift_left,
    "%": _a.tokens.modulo,
    "-": _a.tokens.minus,
    "--": _a.tokens.minus_minus,
    ".": _a.tokens.period,
    "+": _a.tokens.plus,
    "++": _a.tokens.plus_plus,
    "|": _a.tokens.or,
    "||": _a.tokens.or_or,
    "*": _a.tokens.star,
    "~": _a.tokens.tilde,
    "_": _a.tokens.underscore,
    "^": _a.tokens.xor,
    "+=": _a.tokens.plus_equal,
    "-=": _a.tokens.minus_equal,
    "*=": _a.tokens.times_equal,
    "/=": _a.tokens.division_equal,
    "%=": _a.tokens.modulo_equal,
    "&=": _a.tokens.and_equal,
    "|=": _a.tokens.or_equal,
    "^=": _a.tokens.xor_equal,
    ">>=": _a.tokens.shift_right_equal,
    "<<=": _a.tokens.shift_left_equal,
};
TokenTypes.regexTokens = {
    decimal_float_literal: _a.tokens.decimal_float_literal,
    hex_float_literal: _a.tokens.hex_float_literal,
    int_literal: _a.tokens.int_literal,
    uint_literal: _a.tokens.uint_literal,
    ident: _a.tokens.ident,
};
TokenTypes.storage_class = [
    _a.keywords.function,
    _a.keywords.private,
    _a.keywords.workgroup,
    _a.keywords.uniform,
    _a.keywords.storage,
];
TokenTypes.access_mode = [
    _a.keywords.read,
    _a.keywords.write,
    _a.keywords.read_write,
];
TokenTypes.sampler_type = [
    _a.keywords.sampler,
    _a.keywords.sampler_comparison,
];
TokenTypes.sampled_texture_type = [
    _a.keywords.texture_1d,
    _a.keywords.texture_2d,
    _a.keywords.texture_2d_array,
    _a.keywords.texture_3d,
    _a.keywords.texture_cube,
    _a.keywords.texture_cube_array,
];
TokenTypes.multisampled_texture_type = [
    _a.keywords.texture_multisampled_2d,
];
TokenTypes.storage_texture_type = [
    _a.keywords.texture_storage_1d,
    _a.keywords.texture_storage_2d,
    _a.keywords.texture_storage_2d_array,
    _a.keywords.texture_storage_3d,
];
TokenTypes.depth_texture_type = [
    _a.keywords.texture_depth_2d,
    _a.keywords.texture_depth_2d_array,
    _a.keywords.texture_depth_cube,
    _a.keywords.texture_depth_cube_array,
    _a.keywords.texture_depth_multisampled_2d,
];
TokenTypes.texture_external_type = [_a.keywords.texture_external];
TokenTypes.any_texture_type = [
    ..._a.sampled_texture_type,
    ..._a.multisampled_texture_type,
    ..._a.storage_texture_type,
    ..._a.depth_texture_type,
    ..._a.texture_external_type,
];
TokenTypes.texel_format = [
    _a.keywords.r8unorm,
    _a.keywords.r8snorm,
    _a.keywords.r8uint,
    _a.keywords.r8sint,
    _a.keywords.r16uint,
    _a.keywords.r16sint,
    _a.keywords.r16float,
    _a.keywords.rg8unorm,
    _a.keywords.rg8snorm,
    _a.keywords.rg8uint,
    _a.keywords.rg8sint,
    _a.keywords.r32uint,
    _a.keywords.r32sint,
    _a.keywords.r32float,
    _a.keywords.rg16uint,
    _a.keywords.rg16sint,
    _a.keywords.rg16float,
    _a.keywords.rgba8unorm,
    _a.keywords.rgba8unorm_srgb,
    _a.keywords.rgba8snorm,
    _a.keywords.rgba8uint,
    _a.keywords.rgba8sint,
    _a.keywords.bgra8unorm,
    _a.keywords.bgra8unorm_srgb,
    _a.keywords.rgb10a2unorm,
    _a.keywords.rg11b10float,
    _a.keywords.rg32uint,
    _a.keywords.rg32sint,
    _a.keywords.rg32float,
    _a.keywords.rgba16uint,
    _a.keywords.rgba16sint,
    _a.keywords.rgba16float,
    _a.keywords.rgba32uint,
    _a.keywords.rgba32sint,
    _a.keywords.rgba32float,
];
TokenTypes.const_literal = [
    _a.tokens.int_literal,
    _a.tokens.uint_literal,
    _a.tokens.decimal_float_literal,
    _a.tokens.hex_float_literal,
    _a.keywords.true,
    _a.keywords.false,
];
TokenTypes.literal_or_ident = [
    _a.tokens.ident,
    _a.tokens.int_literal,
    _a.tokens.uint_literal,
    _a.tokens.decimal_float_literal,
    _a.tokens.hex_float_literal,
];
TokenTypes.element_count_expression = [
    _a.tokens.int_literal,
    _a.tokens.uint_literal,
    _a.tokens.ident,
];
TokenTypes.template_types = [
    _a.keywords.vec2,
    _a.keywords.vec3,
    _a.keywords.vec4,
    _a.keywords.mat2x2,
    _a.keywords.mat2x3,
    _a.keywords.mat2x4,
    _a.keywords.mat3x2,
    _a.keywords.mat3x3,
    _a.keywords.mat3x4,
    _a.keywords.mat4x2,
    _a.keywords.mat4x3,
    _a.keywords.mat4x4,
    _a.keywords.atomic,
    _a.keywords.bitcast,
    ..._a.any_texture_type,
];
// The grammar calls out 'block', but attribute grammar is defined to use a 'ident'.
// The attribute grammar should be ident | block.
TokenTypes.attribute_name = [_a.tokens.ident, _a.keywords.block, _a.keywords.diagnostic];
TokenTypes.assignment_operators = [
    _a.tokens.equal,
    _a.tokens.plus_equal,
    _a.tokens.minus_equal,
    _a.tokens.times_equal,
    _a.tokens.division_equal,
    _a.tokens.modulo_equal,
    _a.tokens.and_equal,
    _a.tokens.or_equal,
    _a.tokens.xor_equal,
    _a.tokens.shift_right_equal,
    _a.tokens.shift_left_equal,
];
TokenTypes.increment_operators = [
    _a.tokens.plus_plus,
    _a.tokens.minus_minus,
];
/// A token parsed by the WgslScanner.
class Token {
    constructor(type, lexeme, line) {
        this.type = type;
        this.lexeme = lexeme;
        this.line = line;
    }
    toString() {
        return this.lexeme;
    }
    isTemplateType() {
        return TokenTypes.template_types.indexOf(this.type) != -1;
    }
    isArrayType() {
        return this.type == TokenTypes.keywords.array;
    }
    isArrayOrTemplateType() {
        return this.isArrayType() || this.isTemplateType();
    }
}
/// Lexical scanner for the WGSL language. This takes an input source text and generates a list
/// of Token objects, which can then be fed into the WgslParser to generate an AST.
class WgslScanner {
    constructor(source) {
        this._tokens = [];
        this._start = 0;
        this._current = 0;
        this._line = 1;
        this._source = source !== null && source !== void 0 ? source : "";
    }
    /// Scan all tokens from the source.
    scanTokens() {
        while (!this._isAtEnd()) {
            this._start = this._current;
            if (!this.scanToken()) {
                throw `Invalid syntax at line ${this._line}`;
            }
        }
        this._tokens.push(new Token(TokenTypes.eof, "", this._line));
        return this._tokens;
    }
    /// Scan a single token from the source.
    scanToken() {
        // Find the longest consecutive set of characters that match a rule.
        let lexeme = this._advance();
        // Skip line-feed, adding to the line counter.
        if (lexeme == "\n") {
            this._line++;
            return true;
        }
        // Skip whitespace
        if (this._isWhitespace(lexeme)) {
            return true;
        }
        if (lexeme == "/") {
            // If it's a // comment, skip everything until the next line-feed.
            if (this._peekAhead() == "/") {
                while (lexeme != "\n") {
                    if (this._isAtEnd()) {
                        return true;
                    }
                    lexeme = this._advance();
                }
                // skip the linefeed
                this._line++;
                return true;
            }
            else if (this._peekAhead() == "*") {
                // If it's a / * block comment, skip everything until the matching * /,
                // allowing for nested block comments.
                this._advance();
                let commentLevel = 1;
                while (commentLevel > 0) {
                    if (this._isAtEnd()) {
                        return true;
                    }
                    lexeme = this._advance();
                    if (lexeme == "\n") {
                        this._line++;
                    }
                    else if (lexeme == "*") {
                        if (this._peekAhead() == "/") {
                            this._advance();
                            commentLevel--;
                            if (commentLevel == 0) {
                                return true;
                            }
                        }
                    }
                    else if (lexeme == "/") {
                        if (this._peekAhead() == "*") {
                            this._advance();
                            commentLevel++;
                        }
                    }
                }
                return true;
            }
        }
        // Shortcut single character tokens
        const simpleToken = TokenTypes.simpleTokens[lexeme];
        if (simpleToken) {
            this._addToken(simpleToken);
            return true;
        }
        // Shortcut keywords and identifiers
        let matchType = TokenTypes.none;
        const isAlpha = this._isAlpha(lexeme);
        const isUnderscore = lexeme === "_";
        if (this._isAlphaNumeric(lexeme)) {
            let nextChar = this._peekAhead();
            while (this._isAlphaNumeric(nextChar)) {
                lexeme += this._advance();
                nextChar = this._peekAhead();
            }
        }
        if (isAlpha) {
            const matchedType = TokenTypes.keywords[lexeme];
            if (matchedType) {
                this._addToken(matchedType);
                return true;
            }
        }
        if (isAlpha || isUnderscore) {
            this._addToken(TokenTypes.tokens.ident);
            return true;
        }
        // Scan for the next valid token type
        for (;;) {
            let matchedType = this._findType(lexeme);
            // An exception to "longest lexeme" rule is '>>'. In the case of 1>>2, it's a
            // shift_right.
            // In the case of array<vec4<f32>>, it's two greater_than's (one to close the vec4,
            // and one to close the array).
            // Another ambiguity is '>='. In the case of vec2<i32>=vec2(1,2),
            // it's a greather_than and an equal, not a greater_than_equal.
            // WGSL requires context sensitive parsing to resolve these ambiguities. Both of these cases
            // are predicated on it the > either closing a template, or being part of an operator.
            // The solution here is to check if there was a less_than up to some number of tokens
            // previously, and the token prior to that is a keyword that requires a '<', then it will be
            // split into two operators; otherwise it's a single operator.
            const nextLexeme = this._peekAhead();
            if (lexeme == ">" && (nextLexeme == ">" || nextLexeme == "=")) {
                let foundLessThan = false;
                let ti = this._tokens.length - 1;
                for (let count = 0; count < 5 && ti >= 0; ++count, --ti) {
                    if (this._tokens[ti].type === TokenTypes.tokens.less_than) {
                        if (ti > 0 && this._tokens[ti - 1].isArrayOrTemplateType()) {
                            foundLessThan = true;
                        }
                        break;
                    }
                }
                // If there was a less_than in the recent token history, then this is probably a
                // greater_than.
                if (foundLessThan) {
                    this._addToken(matchedType);
                    return true;
                }
            }
            // The current lexeme may not match any rule, but some token types may be invalid for
            // part of the string but valid after a few more characters.
            // For example, 0x.5 is a hex_float_literal. But as it's being scanned,
            // "0" is a int_literal, then "0x" is invalid. If we stopped there, it would return
            // the int_literal "0", but that's incorrect. So if we look forward a few characters,
            // we'd get "0x.", which is still invalid, followed by "0x.5" which is the correct
            // hex_float_literal. So that means if we hit an non-matching string, we should look
            // ahead up to two characters to see if the string starts matching a valid rule again.
            if (matchedType === TokenTypes.none) {
                let lookAheadLexeme = lexeme;
                let lookAhead = 0;
                const maxLookAhead = 2;
                for (let li = 0; li < maxLookAhead; ++li) {
                    lookAheadLexeme += this._peekAhead(li);
                    matchedType = this._findType(lookAheadLexeme);
                    if (matchedType !== TokenTypes.none) {
                        lookAhead = li;
                        break;
                    }
                }
                if (matchedType === TokenTypes.none) {
                    if (matchType === TokenTypes.none) {
                        return false;
                    }
                    this._current--;
                    this._addToken(matchType);
                    return true;
                }
                lexeme = lookAheadLexeme;
                this._current += lookAhead + 1;
            }
            matchType = matchedType;
            if (this._isAtEnd()) {
                break;
            }
            lexeme += this._advance();
        }
        // We got to the end of the input stream. Then the token we've ready so far is it.
        if (matchType === TokenTypes.none) {
            return false;
        }
        this._addToken(matchType);
        return true;
    }
    _findType(lexeme) {
        for (const name in TokenTypes.regexTokens) {
            const type = TokenTypes.regexTokens[name];
            if (this._match(lexeme, type.rule)) {
                return type;
            }
        }
        const type = TokenTypes.literalTokens[lexeme];
        if (type) {
            return type;
        }
        return TokenTypes.none;
    }
    _match(lexeme, rule) {
        const match = rule.exec(lexeme);
        return match && match.index == 0 && match[0] == lexeme;
    }
    _isAtEnd() {
        return this._current >= this._source.length;
    }
    _isAlpha(c) {
        return (c >= "a" && c <= "z") || (c >= "A" && c <= "Z");
    }
    _isAlphaNumeric(c) {
        return (c >= "a" && c <= "z") || (c >= "A" && c <= "Z") || c == "_" || (c >= "0" && c <= "9");
    }
    _isWhitespace(c) {
        return c == " " || c == "\t" || c == "\r";
    }
    _advance(amount = 0) {
        let c = this._source[this._current];
        amount = amount || 0;
        amount++;
        this._current += amount;
        return c;
    }
    _peekAhead(offset = 0) {
        offset = offset || 0;
        if (this._current + offset >= this._source.length) {
            return "\0";
        }
        return this._source[this._current + offset];
    }
    _addToken(type) {
        const text = this._source.substring(this._start, this._current);
        this._tokens.push(new Token(type, text, this._line));
    }
}

/**
 * @author Brendan Duncan / https://github.com/brendan-duncan
 */
/// Parse a sequence of tokens from the WgslScanner into an Abstract Syntax Tree (AST).
class WgslParser {
    constructor() {
        this._tokens = [];
        this._current = 0;
        this._currentLine = 0;
        this._context = new ParseContext();
        this._deferArrayCountEval = [];
    }
    parse(tokensOrCode) {
        this._initialize(tokensOrCode);
        this._deferArrayCountEval.length = 0;
        const statements = [];
        while (!this._isAtEnd()) {
            const statement = this._global_decl_or_directive();
            if (!statement) {
                break;
            }
            statements.push(statement);
        }
        // Since constants can be declared after they are used, and
        // constants can be used to size arrays, defer calculating the
        // size until after the shader has finished parsing.
        if (this._deferArrayCountEval.length > 0) {
            for (const arrayDecl of this._deferArrayCountEval) {
                const arrayType = arrayDecl["arrayType"];
                const countNode = arrayDecl["countNode"];
                if (countNode instanceof VariableExpr) {
                    const variable = countNode;
                    const name = variable.name;
                    const constant = this._context.constants.get(name);
                    if (constant) {
                        try {
                            const count = constant.evaluate(this._context);
                            arrayType.count = count;
                        }
                        catch (e) {
                        }
                    }
                }
            }
            this._deferArrayCountEval.length = 0;
        }
        return statements;
    }
    _initialize(tokensOrCode) {
        if (tokensOrCode) {
            if (typeof tokensOrCode == "string") {
                const scanner = new WgslScanner(tokensOrCode);
                this._tokens = scanner.scanTokens();
            }
            else {
                this._tokens = tokensOrCode;
            }
        }
        else {
            this._tokens = [];
        }
        this._current = 0;
    }
    _error(token, message) {
        return {
            token,
            message,
            toString: function () {
                return `${message}`;
            },
        };
    }
    _isAtEnd() {
        return (this._current >= this._tokens.length ||
            this._peek().type == TokenTypes.eof);
    }
    _match(types) {
        if (types instanceof TokenType) {
            if (this._check(types)) {
                this._advance();
                return true;
            }
            return false;
        }
        for (let i = 0, l = types.length; i < l; ++i) {
            const type = types[i];
            if (this._check(type)) {
                this._advance();
                return true;
            }
        }
        return false;
    }
    _consume(types, message) {
        if (this._check(types)) {
            return this._advance();
        }
        throw this._error(this._peek(), message);
    }
    _check(types) {
        if (this._isAtEnd()) {
            return false;
        }
        const tk = this._peek();
        if (types instanceof Array) {
            const t = tk.type;
            const index = types.indexOf(t);
            return index != -1;
        }
        return tk.type == types;
    }
    _advance() {
        var _a, _b;
        this._currentLine = (_b = (_a = this._peek()) === null || _a === void 0 ? void 0 : _a.line) !== null && _b !== void 0 ? _b : -1;
        if (!this._isAtEnd()) {
            this._current++;
        }
        return this._previous();
    }
    _peek() {
        return this._tokens[this._current];
    }
    _previous() {
        return this._tokens[this._current - 1];
    }
    _global_decl_or_directive() {
        // semicolon
        // global_variable_decl semicolon
        // global_constant_decl semicolon
        // type_alias semicolon
        // struct_decl
        // function_decl
        // enable_directive
        // Ignore any stand-alone semicolons
        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())
            ;
        if (this._match(TokenTypes.keywords.alias)) {
            const type = this._type_alias();
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return type;
        }
        if (this._match(TokenTypes.keywords.diagnostic)) {
            const directive = this._diagnostic();
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return directive;
        }
        if (this._match(TokenTypes.keywords.requires)) {
            const requires = this._requires_directive();
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return requires;
        }
        if (this._match(TokenTypes.keywords.enable)) {
            const enable = this._enable_directive();
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return enable;
        }
        // The following statements have an optional attribute*
        const attrs = this._attribute();
        if (this._check(TokenTypes.keywords.var)) {
            const _var = this._global_variable_decl();
            if (_var != null) {
                _var.attributes = attrs;
            }
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
            return _var;
        }
        if (this._check(TokenTypes.keywords.override)) {
            const _override = this._override_variable_decl();
            if (_override != null) {
                _override.attributes = attrs;
            }
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
            return _override;
        }
        if (this._check(TokenTypes.keywords.let)) {
            const _let = this._global_let_decl();
            if (_let != null) {
                _let.attributes = attrs;
            }
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
            return _let;
        }
        if (this._check(TokenTypes.keywords.const)) {
            const _const = this._global_const_decl();
            if (_const != null) {
                _const.attributes = attrs;
            }
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
            return _const;
        }
        if (this._check(TokenTypes.keywords.struct)) {
            const _struct = this._struct_decl();
            if (_struct != null) {
                _struct.attributes = attrs;
            }
            return _struct;
        }
        if (this._check(TokenTypes.keywords.fn)) {
            const _fn = this._function_decl();
            if (_fn != null) {
                _fn.attributes = attrs;
            }
            return _fn;
        }
        return null;
    }
    _function_decl() {
        // attribute* function_header compound_statement
        // function_header: fn ident paren_left param_list? paren_right (arrow attribute* type_decl)?
        if (!this._match(TokenTypes.keywords.fn)) {
            return null;
        }
        const startLine = this._currentLine;
        const name = this._consume(TokenTypes.tokens.ident, "Expected function name.").toString();
        this._consume(TokenTypes.tokens.paren_left, "Expected '(' for function arguments.");
        const args = [];
        if (!this._check(TokenTypes.tokens.paren_right)) {
            do {
                if (this._check(TokenTypes.tokens.paren_right)) {
                    break;
                }
                const argAttrs = this._attribute();
                const name = this._consume(TokenTypes.tokens.ident, "Expected argument name.").toString();
                this._consume(TokenTypes.tokens.colon, "Expected ':' for argument type.");
                const typeAttrs = this._attribute();
                const type = this._type_decl();
                if (type != null) {
                    type.attributes = typeAttrs;
                    args.push(new Argument(name, type, argAttrs));
                }
            } while (this._match(TokenTypes.tokens.comma));
        }
        this._consume(TokenTypes.tokens.paren_right, "Expected ')' after function arguments.");
        let _return = null;
        if (this._match(TokenTypes.tokens.arrow)) {
            const attrs = this._attribute();
            _return = this._type_decl();
            if (_return != null) {
                _return.attributes = attrs;
            }
        }
        const body = this._compound_statement();
        const endLine = this._currentLine;
        return new Function(name, args, _return, body, startLine, endLine);
    }
    _compound_statement() {
        // brace_left statement* brace_right
        const statements = [];
        this._consume(TokenTypes.tokens.brace_left, "Expected '{' for block.");
        while (!this._check(TokenTypes.tokens.brace_right)) {
            const statement = this._statement();
            if (statement !== null) {
                statements.push(statement);
            }
        }
        this._consume(TokenTypes.tokens.brace_right, "Expected '}' for block.");
        return statements;
    }
    _statement() {
        // semicolon
        // return_statement semicolon
        // if_statement
        // switch_statement
        // loop_statement
        // for_statement
        // func_call_statement semicolon
        // variable_statement semicolon
        // break_statement semicolon
        // continue_statement semicolon
        // continuing_statement compound_statement
        // discard semicolon
        // assignment_statement semicolon
        // compound_statement
        // increment_statement semicolon
        // decrement_statement semicolon
        // static_assert_statement semicolon
        // Ignore any stand-alone semicolons
        while (this._match(TokenTypes.tokens.semicolon) && !this._isAtEnd())
            ;
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        if (this._check(TokenTypes.keywords.if)) {
            return this._if_statement();
        }
        if (this._check(TokenTypes.keywords.switch)) {
            return this._switch_statement();
        }
        if (this._check(TokenTypes.keywords.loop)) {
            return this._loop_statement();
        }
        if (this._check(TokenTypes.keywords.for)) {
            return this._for_statement();
        }
        if (this._check(TokenTypes.keywords.while)) {
            return this._while_statement();
        }
        if (this._check(TokenTypes.keywords.continuing)) {
            return this._continuing_statement();
        }
        if (this._check(TokenTypes.keywords.static_assert)) {
            return this._static_assert_statement();
        }
        if (this._check(TokenTypes.tokens.brace_left)) {
            return this._compound_statement();
        }
        let result = null;
        if (this._check(TokenTypes.keywords.return)) {
            result = this._return_statement();
        }
        else if (this._check([
            TokenTypes.keywords.var,
            TokenTypes.keywords.let,
            TokenTypes.keywords.const,
        ])) {
            result = this._variable_statement();
        }
        else if (this._match(TokenTypes.keywords.discard)) {
            result = new Discard();
        }
        else if (this._match(TokenTypes.keywords.break)) {
            result = new Break();
        }
        else if (this._match(TokenTypes.keywords.continue)) {
            result = new Continue();
        }
        else {
            result =
                this._increment_decrement_statement() ||
                    this._func_call_statement() ||
                    this._assignment_statement();
        }
        if (result != null) {
            this._consume(TokenTypes.tokens.semicolon, "Expected ';' after statement.");
        }
        return result;
    }
    _static_assert_statement() {
        if (!this._match(TokenTypes.keywords.static_assert)) {
            return null;
        }
        const expression = this._optional_paren_expression();
        return new StaticAssert(expression);
    }
    _while_statement() {
        if (!this._match(TokenTypes.keywords.while)) {
            return null;
        }
        const condition = this._optional_paren_expression();
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        const block = this._compound_statement();
        return new While(condition, block);
    }
    _continuing_statement() {
        if (!this._match(TokenTypes.keywords.continuing)) {
            return null;
        }
        const block = this._compound_statement();
        return new Continuing(block);
    }
    _for_statement() {
        // for paren_left for_header paren_right compound_statement
        if (!this._match(TokenTypes.keywords.for)) {
            return null;
        }
        this._consume(TokenTypes.tokens.paren_left, "Expected '('.");
        // for_header: (variable_statement assignment_statement func_call_statement)? semicolon short_circuit_or_expression? semicolon (assignment_statement func_call_statement)?
        const init = !this._check(TokenTypes.tokens.semicolon)
            ? this._for_init()
            : null;
        this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
        const condition = !this._check(TokenTypes.tokens.semicolon)
            ? this._short_circuit_or_expression()
            : null;
        this._consume(TokenTypes.tokens.semicolon, "Expected ';'.");
        const increment = !this._check(TokenTypes.tokens.paren_right)
            ? this._for_increment()
            : null;
        this._consume(TokenTypes.tokens.paren_right, "Expected ')'.");
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        const body = this._compound_statement();
        return new For(init, condition, increment, body);
    }
    _for_init() {
        // (variable_statement assignment_statement func_call_statement)?
        return (this._variable_statement() ||
            this._func_call_statement() ||
            this._assignment_statement());
    }
    _for_increment() {
        // (assignment_statement func_call_statement increment_statement)?
        return (this._func_call_statement() ||
            this._increment_decrement_statement() ||
            this._assignment_statement());
    }
    _variable_statement() {
        // variable_decl
        // variable_decl equal short_circuit_or_expression
        // let (ident variable_ident_decl) equal short_circuit_or_expression
        // const (ident variable_ident_decl) equal short_circuit_or_expression
        if (this._check(TokenTypes.keywords.var)) {
            const _var = this._variable_decl();
            if (_var === null) {
                throw this._error(this._peek(), "Variable declaration expected.");
            }
            let value = null;
            if (this._match(TokenTypes.tokens.equal)) {
                value = this._short_circuit_or_expression();
            }
            return new Var(_var.name, _var.type, _var.storage, _var.access, value);
        }
        if (this._match(TokenTypes.keywords.let)) {
            const name = this._consume(TokenTypes.tokens.ident, "Expected name for let.").toString();
            let type = null;
            if (this._match(TokenTypes.tokens.colon)) {
                const typeAttrs = this._attribute();
                type = this._type_decl();
                if (type != null) {
                    type.attributes = typeAttrs;
                }
            }
            this._consume(TokenTypes.tokens.equal, "Expected '=' for let.");
            const value = this._short_circuit_or_expression();
            return new Let(name, type, null, null, value);
        }
        if (this._match(TokenTypes.keywords.const)) {
            const name = this._consume(TokenTypes.tokens.ident, "Expected name for const.").toString();
            let type = null;
            if (this._match(TokenTypes.tokens.colon)) {
                const typeAttrs = this._attribute();
                type = this._type_decl();
                if (type != null) {
                    type.attributes = typeAttrs;
                }
            }
            this._consume(TokenTypes.tokens.equal, "Expected '=' for const.");
            const value = this._short_circuit_or_expression();
            return new Const(name, type, null, null, value);
        }
        return null;
    }
    _increment_decrement_statement() {
        const savedPos = this._current;
        const _var = this._unary_expression();
        if (_var == null) {
            return null;
        }
        if (!this._check(TokenTypes.increment_operators)) {
            this._current = savedPos;
            return null;
        }
        const token = this._consume(TokenTypes.increment_operators, "Expected increment operator");
        return new Increment(token.type === TokenTypes.tokens.plus_plus
            ? IncrementOperator.increment
            : IncrementOperator.decrement, _var);
    }
    _assignment_statement() {
        // (unary_expression underscore) equal short_circuit_or_expression
        let _var = null;
        if (this._check(TokenTypes.tokens.brace_right)) {
            return null;
        }
        let isUnderscore = this._match(TokenTypes.tokens.underscore);
        if (!isUnderscore) {
            _var = this._unary_expression();
        }
        if (!isUnderscore && _var == null) {
            return null;
        }
        const type = this._consume(TokenTypes.assignment_operators, "Expected assignment operator.");
        const value = this._short_circuit_or_expression();
        return new Assign(AssignOperator.parse(type.lexeme), _var, value);
    }
    _func_call_statement() {
        // ident argument_expression_list
        if (!this._check(TokenTypes.tokens.ident)) {
            return null;
        }
        const savedPos = this._current;
        const name = this._consume(TokenTypes.tokens.ident, "Expected function name.");
        const args = this._argument_expression_list();
        if (args === null) {
            this._current = savedPos;
            return null;
        }
        return new Call(name.lexeme, args);
    }
    _loop_statement() {
        // loop brace_left statement* continuing_statement? brace_right
        if (!this._match(TokenTypes.keywords.loop)) {
            return null;
        }
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        this._consume(TokenTypes.tokens.brace_left, "Expected '{' for loop.");
        // statement*
        const statements = [];
        let statement = this._statement();
        while (statement !== null) {
            if (Array.isArray(statement)) {
                for (let s of statement) {
                    statements.push(s);
                }
            }
            else {
                statements.push(statement);
            }
            statement = this._statement();
        }
        // continuing_statement: continuing compound_statement
        let continuing = null;
        if (this._match(TokenTypes.keywords.continuing)) {
            continuing = this._compound_statement();
        }
        this._consume(TokenTypes.tokens.brace_right, "Expected '}' for loop.");
        return new Loop(statements, continuing);
    }
    _switch_statement() {
        // switch optional_paren_expression brace_left switch_body+ brace_right
        if (!this._match(TokenTypes.keywords.switch)) {
            return null;
        }
        const condition = this._optional_paren_expression();
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        this._consume(TokenTypes.tokens.brace_left, "Expected '{' for switch.");
        const body = this._switch_body();
        if (body == null || body.length == 0) {
            throw this._error(this._previous(), "Expected 'case' or 'default'.");
        }
        this._consume(TokenTypes.tokens.brace_right, "Expected '}' for switch.");
        return new Switch(condition, body);
    }
    _switch_body() {
        // case case_selectors colon brace_left case_body? brace_right
        // default colon brace_left case_body? brace_right
        const cases = [];
        if (this._match(TokenTypes.keywords.case)) {
            const selector = this._case_selectors();
            this._match(TokenTypes.tokens.colon); // colon is optional
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            this._consume(TokenTypes.tokens.brace_left, "Exected '{' for switch case.");
            const body = this._case_body();
            this._consume(TokenTypes.tokens.brace_right, "Exected '}' for switch case.");
            cases.push(new Case(selector, body));
        }
        if (this._match(TokenTypes.keywords.default)) {
            this._match(TokenTypes.tokens.colon); // colon is optional
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            this._consume(TokenTypes.tokens.brace_left, "Exected '{' for switch default.");
            const body = this._case_body();
            this._consume(TokenTypes.tokens.brace_right, "Exected '}' for switch default.");
            cases.push(new Default(body));
        }
        if (this._check([TokenTypes.keywords.default, TokenTypes.keywords.case])) {
            const _cases = this._switch_body();
            cases.push(_cases[0]);
        }
        return cases;
    }
    _case_selectors() {
        // const_literal (comma const_literal)* comma?
        const selectors = [
            this._shift_expression(), //?.evaluate(this._context).toString() ?? "",
        ];
        while (this._match(TokenTypes.tokens.comma)) {
            selectors.push(this._shift_expression());
        }
        return selectors;
    }
    _case_body() {
        // statement case_body?
        // fallthrough semicolon
        if (this._match(TokenTypes.keywords.fallthrough)) {
            this._consume(TokenTypes.tokens.semicolon, "Expected ';'");
            return [];
        }
        let statement = this._statement();
        if (statement == null) {
            return [];
        }
        if (!(statement instanceof Array)) {
            statement = [statement];
        }
        const nextStatement = this._case_body();
        if (nextStatement.length == 0) {
            return statement;
        }
        return [...statement, nextStatement[0]];
    }
    _if_statement() {
        // if optional_paren_expression compound_statement elseif_statement? else_statement?
        if (!this._match(TokenTypes.keywords.if)) {
            return null;
        }
        const condition = this._optional_paren_expression();
        if (this._check(TokenTypes.tokens.attr)) {
            this._attribute();
        }
        const block = this._compound_statement();
        let elseif = [];
        if (this._match_elseif()) {
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            elseif = this._elseif_statement(elseif);
        }
        let _else = null;
        if (this._match(TokenTypes.keywords.else)) {
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            _else = this._compound_statement();
        }
        return new If(condition, block, elseif, _else);
    }
    _match_elseif() {
        if (this._tokens[this._current].type === TokenTypes.keywords.else &&
            this._tokens[this._current + 1].type === TokenTypes.keywords.if) {
            this._advance();
            this._advance();
            return true;
        }
        return false;
    }
    _elseif_statement(elseif = []) {
        // else_if optional_paren_expression compound_statement elseif_statement?
        const condition = this._optional_paren_expression();
        const block = this._compound_statement();
        elseif.push(new ElseIf(condition, block));
        if (this._match_elseif()) {
            if (this._check(TokenTypes.tokens.attr)) {
                this._attribute();
            }
            this._elseif_statement(elseif);
        }
        return elseif;
    }
    _return_statement() {
        // return short_circuit_or_expression?
        if (!this._match(TokenTypes.keywords.return)) {
            return null;
        }
        const value = this._short_circuit_or_expression();
        return new Return(value);
    }
    _short_circuit_or_expression() {
        // short_circuit_and_expression
        // short_circuit_or_expression or_or short_circuit_and_expression
        let expr = this._short_circuit_and_expr();
        while (this._match(TokenTypes.tokens.or_or)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._short_circuit_and_expr());
        }
        return expr;
    }
    _short_circuit_and_expr() {
        // inclusive_or_expression
        // short_circuit_and_expression and_and inclusive_or_expression
        let expr = this._inclusive_or_expression();
        while (this._match(TokenTypes.tokens.and_and)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._inclusive_or_expression());
        }
        return expr;
    }
    _inclusive_or_expression() {
        // exclusive_or_expression
        // inclusive_or_expression or exclusive_or_expression
        let expr = this._exclusive_or_expression();
        while (this._match(TokenTypes.tokens.or)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._exclusive_or_expression());
        }
        return expr;
    }
    _exclusive_or_expression() {
        // and_expression
        // exclusive_or_expression xor and_expression
        let expr = this._and_expression();
        while (this._match(TokenTypes.tokens.xor)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._and_expression());
        }
        return expr;
    }
    _and_expression() {
        // equality_expression
        // and_expression and equality_expression
        let expr = this._equality_expression();
        while (this._match(TokenTypes.tokens.and)) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._equality_expression());
        }
        return expr;
    }
    _equality_expression() {
        // relational_expression
        // relational_expression equal_equal relational_expression
        // relational_expression not_equal relational_expression
        const expr = this._relational_expression();
        if (this._match([TokenTypes.tokens.equal_equal, TokenTypes.tokens.not_equal])) {
            return new BinaryOperator(this._previous().toString(), expr, this._relational_expression());
        }
        return expr;
    }
    _relational_expression() {
        // shift_expression
        // relational_expression less_than shift_expression
        // relational_expression greater_than shift_expression
        // relational_expression less_than_equal shift_expression
        // relational_expression greater_than_equal shift_expression
        let expr = this._shift_expression();
        while (this._match([
            TokenTypes.tokens.less_than,
            TokenTypes.tokens.greater_than,
            TokenTypes.tokens.less_than_equal,
            TokenTypes.tokens.greater_than_equal,
        ])) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._shift_expression());
        }
        return expr;
    }
    _shift_expression() {
        // additive_expression
        // shift_expression shift_left additive_expression
        // shift_expression shift_right additive_expression
        let expr = this._additive_expression();
        while (this._match([TokenTypes.tokens.shift_left, TokenTypes.tokens.shift_right])) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._additive_expression());
        }
        return expr;
    }
    _additive_expression() {
        // multiplicative_expression
        // additive_expression plus multiplicative_expression
        // additive_expression minus multiplicative_expression
        let expr = this._multiplicative_expression();
        while (this._match([TokenTypes.tokens.plus, TokenTypes.tokens.minus])) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._multiplicative_expression());
        }
        return expr;
    }
    _multiplicative_expression() {
        // unary_expression
        // multiplicative_expression star unary_expression
        // multiplicative_expression forward_slash unary_expression
        // multiplicative_expression modulo unary_expression
        let expr = this._unary_expression();
        while (this._match([
            TokenTypes.tokens.star,
            TokenTypes.tokens.forward_slash,
            TokenTypes.tokens.modulo,
        ])) {
            expr = new BinaryOperator(this._previous().toString(), expr, this._unary_expression());
        }
        return expr;
    }
    _unary_expression() {
        // singular_expression
        // minus unary_expression
        // bang unary_expression
        // tilde unary_expression
        // star unary_expression
        // and unary_expression
        if (this._match([
            TokenTypes.tokens.minus,
            TokenTypes.tokens.bang,
            TokenTypes.tokens.tilde,
            TokenTypes.tokens.star,
            TokenTypes.tokens.and,
        ])) {
            return new UnaryOperator(this._previous().toString(), this._unary_expression());
        }
        return this._singular_expression();
    }
    _singular_expression() {
        // primary_expression postfix_expression ?
        const expr = this._primary_expression();
        const p = this._postfix_expression();
        if (p) {
            expr.postfix = p;
        }
        return expr;
    }
    _postfix_expression() {
        // bracket_left short_circuit_or_expression bracket_right postfix_expression?
        if (this._match(TokenTypes.tokens.bracket_left)) {
            const expr = this._short_circuit_or_expression();
            this._consume(TokenTypes.tokens.bracket_right, "Expected ']'.");
            const arrayIndex = new ArrayIndex(expr);
            const p = this._postfix_expression();
            if (p) {
                arrayIndex.postfix = p;
            }
            return arrayIndex;
        }
        // period ident postfix_expression?
        if (this._match(TokenTypes.tokens.period)) {
            const name = this._consume(TokenTypes.tokens.ident, "Expected member name.");
            const p = this._postfix_expression();
            const expr = new StringExpr(name.lexeme);
            if (p) {
                expr.postfix = p;
            }
            return expr;
        }
        return null;
    }
    _getStruct(name) {
        if (this._context.aliases.has(name)) {
            const alias = this._context.aliases.get(name).type;
            return alias;
        }
        if (this._context.structs.has(name)) {
            const struct = this._context.structs.get(name);
            return struct;
        }
        return null;
    }
    _primary_expression() {
        // ident argument_expression_list?
        if (this._match(TokenTypes.tokens.ident)) {
            const name = this._previous().toString();
            if (this._check(TokenTypes.tokens.paren_left)) {
                const args = this._argument_expression_list();
                const struct = this._getStruct(name);
                if (struct != null) {
                    return new CreateExpr(struct, args);
                }
                return new CallExpr(name, args);
            }
            if (this._context.constants.has(name)) {
                const c = this._context.constants.get(name);
                return new ConstExpr(name, c.value);
            }
            return new VariableExpr(name);
        }
        // const_literal
        if (this._match(TokenTypes.const_literal)) {
            return new LiteralExpr(parseFloat(this._previous().toString()));
        }
        // paren_expression
        if (this._check(TokenTypes.tokens.paren_left)) {
            return this._paren_expression();
        }
        // bitcast less_than type_decl greater_than paren_expression
        if (this._match(TokenTypes.keywords.bitcast)) {
            this._consume(TokenTypes.tokens.less_than, "Expected '<'.");
            const type = this._type_decl();
            this._consume(TokenTypes.tokens.greater_than, "Expected '>'.");
            const value = this._paren_expression();
            return new BitcastExpr(type, value);
        }
        // type_decl argument_expression_list
        const type = this._type_decl();
        const args = this._argument_expression_list();
        return new TypecastExpr(type, args);
    }
    _argument_expression_list() {
        // paren_left ((short_circuit_or_expression comma)* short_circuit_or_expression comma?)? paren_right
        if (!this._match(TokenTypes.tokens.paren_left)) {
            return null;
        }
        const args = [];
        do {
            if (this._check(TokenTypes.tokens.paren_right)) {
                break;
            }
            const arg = this._short_circuit_or_expression();
            args.push(arg);
        } while (this._match(TokenTypes.tokens.comma));
        this._consume(TokenTypes.tokens.paren_right, "Expected ')' for agument list");
        return args;
    }
    _optional_paren_expression() {
        // [paren_left] short_circuit_or_expression [paren_right]
        this._match(TokenTypes.tokens.paren_left);
        const expr = this._short_circuit_or_expression();
        this._match(TokenTypes.tokens.paren_right);
        return new GroupingExpr([expr]);
    }
    _paren_expression() {
        // paren_left short_circuit_or_expression paren_right
        this._consume(TokenTypes.tokens.paren_left, "Expected '('.");
        const expr = this._short_circuit_or_expression();
        this._consume(TokenTypes.tokens.paren_right, "Expected ')'.");
        return new GroupingExpr([expr]);
    }
    _struct_decl() {
        // attribute* struct ident struct_body_decl
        if (!this._match(TokenTypes.keywords.struct)) {
            return null;
        }
        const startLine = this._currentLine;
        const name = this._consume(TokenTypes.tokens.ident, "Expected name for struct.").toString();
        // struct_body_decl: brace_left (struct_member comma)* struct_member comma? brace_right
        this._consume(TokenTypes.tokens.brace_left, "Expected '{' for struct body.");
        const members = [];
        while (!this._check(TokenTypes.tokens.brace_right)) {
            // struct_member: attribute* variable_ident_decl
            const memberAttrs = this._attribute();
            const memberName = this._consume(TokenTypes.tokens.ident, "Expected variable name.").toString();
            this._consume(TokenTypes.tokens.colon, "Expected ':' for struct member type.");
            const typeAttrs = this._attribute();
            const memberType = this._type_decl();
            if (memberType != null) {
                memberType.attributes = typeAttrs;
            }
            if (!this._check(TokenTypes.tokens.brace_right))
                this._consume(TokenTypes.tokens.comma, "Expected ',' for struct member.");
            else
                this._match(TokenTypes.tokens.comma); // trailing comma optional.
            members.push(new Member(memberName, memberType, memberAttrs));
        }
        this._consume(TokenTypes.tokens.brace_right, "Expected '}' after struct body.");
        const endLine = this._currentLine;
        const structNode = new Struct(name, members, startLine, endLine);
        this._context.structs.set(name, structNode);
        return structNode;
    }
    _global_variable_decl() {
        // attribute* variable_decl (equal const_expression)?
        const _var = this._variable_decl();
        if (_var && this._match(TokenTypes.tokens.equal)) {
            _var.value = this._const_expression();
        }
        return _var;
    }
    _override_variable_decl() {
        // attribute* override_decl (equal const_expression)?
        const _override = this._override_decl();
        if (_override && this._match(TokenTypes.tokens.equal)) {
            _override.value = this._const_expression();
        }
        return _override;
    }
    _global_const_decl() {
        // attribute* const (ident variable_ident_decl) global_const_initializer?
        if (!this._match(TokenTypes.keywords.const)) {
            return null;
        }
        const name = this._consume(TokenTypes.tokens.ident, "Expected variable name");
        let type = null;
        if (this._match(TokenTypes.tokens.colon)) {
            const attrs = this._attribute();
            type = this._type_decl();
            if (type != null) {
                type.attributes = attrs;
            }
        }
        let value = null;
        if (this._match(TokenTypes.tokens.equal)) {
            const valueExpr = this._short_circuit_or_expression();
            if (valueExpr instanceof CreateExpr) {
                value = valueExpr;
            }
            else if (valueExpr instanceof ConstExpr &&
                valueExpr.initializer instanceof CreateExpr) {
                value = valueExpr.initializer;
            }
            else {
                try {
                    const constValue = valueExpr.evaluate(this._context);
                    value = new LiteralExpr(constValue);
                }
                catch (_a) {
                    value = valueExpr;
                }
            }
        }
        const c = new Const(name.toString(), type, "", "", value);
        this._context.constants.set(c.name, c);
        return c;
    }
    _global_let_decl() {
        // attribute* let (ident variable_ident_decl) global_const_initializer?
        if (!this._match(TokenTypes.keywords.let)) {
            return null;
        }
        const name = this._consume(TokenTypes.tokens.ident, "Expected variable name");
        let type = null;
        if (this._match(TokenTypes.tokens.colon)) {
            const attrs = this._attribute();
            type = this._type_decl();
            if (type != null) {
                type.attributes = attrs;
            }
        }
        let value = null;
        if (this._match(TokenTypes.tokens.equal)) {
            value = this._const_expression();
        }
        return new Let(name.toString(), type, "", "", value);
    }
    _const_expression() {
        // type_decl paren_left ((const_expression comma)* const_expression comma?)? paren_right
        // const_literal
        if (this._match(TokenTypes.const_literal)) {
            return new StringExpr(this._previous().toString());
        }
        const type = this._type_decl();
        this._consume(TokenTypes.tokens.paren_left, "Expected '('.");
        let args = [];
        while (!this._check(TokenTypes.tokens.paren_right)) {
            args.push(this._const_expression());
            if (!this._check(TokenTypes.tokens.comma)) {
                break;
            }
            this._advance();
        }
        this._consume(TokenTypes.tokens.paren_right, "Expected ')'.");
        return new CreateExpr(type, args);
    }
    _variable_decl() {
        // var variable_qualifier? (ident variable_ident_decl)
        if (!this._match(TokenTypes.keywords.var)) {
            return null;
        }
        // variable_qualifier: less_than storage_class (comma access_mode)? greater_than
        let storage = "";
        let access = "";
        if (this._match(TokenTypes.tokens.less_than)) {
            storage = this._consume(TokenTypes.storage_class, "Expected storage_class.").toString();
            if (this._match(TokenTypes.tokens.comma))
                access = this._consume(TokenTypes.access_mode, "Expected access_mode.").toString();
            this._consume(TokenTypes.tokens.greater_than, "Expected '>'.");
        }
        const name = this._consume(TokenTypes.tokens.ident, "Expected variable name");
        let type = null;
        if (this._match(TokenTypes.tokens.colon)) {
            const attrs = this._attribute();
            type = this._type_decl();
            if (type != null) {
                type.attributes = attrs;
            }
        }
        return new Var(name.toString(), type, storage, access, null);
    }
    _override_decl() {
        // override (ident variable_ident_decl)
        if (!this._match(TokenTypes.keywords.override)) {
            return null;
        }
        const name = this._consume(TokenTypes.tokens.ident, "Expected variable name");
        let type = null;
        if (this._match(TokenTypes.tokens.colon)) {
            const attrs = this._attribute();
            type = this._type_decl();
            if (type != null) {
                type.attributes = attrs;
            }
        }
        return new Override(name.toString(), type, null);
    }
    _diagnostic() {
        // diagnostic(severity_control_name, diagnostic_rule_name)
        this._consume(TokenTypes.tokens.paren_left, "Expected '('");
        const severity = this._consume(TokenTypes.tokens.ident, "Expected severity control name.");
        this._consume(TokenTypes.tokens.comma, "Expected ','");
        const rule = this._consume(TokenTypes.tokens.ident, "Expected diagnostic rule name.");
        this._consume(TokenTypes.tokens.paren_right, "Expected ')'");
        return new Diagnostic(severity.toString(), rule.toString());
    }
    _enable_directive() {
        // enable ident semicolon
        const name = this._consume(TokenTypes.tokens.ident, "identity expected.");
        return new Enable(name.toString());
    }
    _requires_directive() {
        // requires extension [, extension]* semicolon
        const extensions = [this._consume(TokenTypes.tokens.ident, "identity expected.").toString()];
        while (this._match(TokenTypes.tokens.comma)) {
            const name = this._consume(TokenTypes.tokens.ident, "identity expected.");
            extensions.push(name.toString());
        }
        return new Requires(extensions);
    }
    _type_alias() {
        // type ident equal type_decl
        const name = this._consume(TokenTypes.tokens.ident, "identity expected.");
        this._consume(TokenTypes.tokens.equal, "Expected '=' for type alias.");
        let aliasType = this._type_decl();
        if (aliasType === null) {
            throw this._error(this._peek(), "Expected Type for Alias.");
        }
        if (this._context.aliases.has(aliasType.name)) {
            aliasType = this._context.aliases.get(aliasType.name).type;
        }
        const aliasNode = new Alias(name.toString(), aliasType);
        this._context.aliases.set(aliasNode.name, aliasNode);
        return aliasNode;
    }
    _type_decl() {
        // ident
        // bool
        // float32
        // int32
        // uint32
        // vec2 less_than type_decl greater_than
        // vec3 less_than type_decl greater_than
        // vec4 less_than type_decl greater_than
        // mat2x2 less_than type_decl greater_than
        // mat2x3 less_than type_decl greater_than
        // mat2x4 less_than type_decl greater_than
        // mat3x2 less_than type_decl greater_than
        // mat3x3 less_than type_decl greater_than
        // mat3x4 less_than type_decl greater_than
        // mat4x2 less_than type_decl greater_than
        // mat4x3 less_than type_decl greater_than
        // mat4x4 less_than type_decl greater_than
        // atomic less_than type_decl greater_than
        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than
        // array_type_decl
        // texture_sampler_types
        if (this._check([
            TokenTypes.tokens.ident,
            ...TokenTypes.texel_format,
            TokenTypes.keywords.bool,
            TokenTypes.keywords.f32,
            TokenTypes.keywords.i32,
            TokenTypes.keywords.u32,
        ])) {
            const type = this._advance();
            const typeName = type.toString();
            if (this._context.structs.has(typeName)) {
                return this._context.structs.get(typeName);
            }
            if (this._context.aliases.has(typeName)) {
                return this._context.aliases.get(typeName).type;
            }
            return new Type(type.toString());
        }
        // texture_sampler_types
        let type = this._texture_sampler_types();
        if (type) {
            return type;
        }
        if (this._check(TokenTypes.template_types)) {
            let type = this._advance().toString();
            let format = null;
            let access = null;
            if (this._match(TokenTypes.tokens.less_than)) {
                format = this._type_decl();
                access = null;
                if (this._match(TokenTypes.tokens.comma)) {
                    access = this._consume(TokenTypes.access_mode, "Expected access_mode for pointer").toString();
                }
                this._consume(TokenTypes.tokens.greater_than, "Expected '>' for type.");
            }
            return new TemplateType(type, format, access);
        }
        // pointer less_than storage_class comma type_decl (comma access_mode)? greater_than
        if (this._match(TokenTypes.keywords.ptr)) {
            let pointer = this._previous().toString();
            this._consume(TokenTypes.tokens.less_than, "Expected '<' for pointer.");
            const storage = this._consume(TokenTypes.storage_class, "Expected storage_class for pointer");
            this._consume(TokenTypes.tokens.comma, "Expected ',' for pointer.");
            const decl = this._type_decl();
            let access = null;
            if (this._match(TokenTypes.tokens.comma)) {
                access = this._consume(TokenTypes.access_mode, "Expected access_mode for pointer").toString();
            }
            this._consume(TokenTypes.tokens.greater_than, "Expected '>' for pointer.");
            return new PointerType(pointer, storage.toString(), decl, access);
        }
        // The following type_decl's have an optional attribyte_list*
        const attrs = this._attribute();
        // attribute* array
        // attribute* array less_than type_decl (comma element_count_expression)? greater_than
        if (this._match(TokenTypes.keywords.array)) {
            let format = null;
            let countInt = -1;
            const array = this._previous();
            let countNode = null;
            if (this._match(TokenTypes.tokens.less_than)) {
                format = this._type_decl();
                if (this._context.aliases.has(format.name)) {
                    format = this._context.aliases.get(format.name).type;
                }
                let count = "";
                if (this._match(TokenTypes.tokens.comma)) {
                    countNode = this._shift_expression();
                    // If we can't evaluate the node, defer evaluating it until after the shader has
                    // finished being parsed, because const statements can be declared **after** they
                    // are used.
                    try {
                        count = countNode.evaluate(this._context).toString();
                        countNode = null;
                    }
                    catch (e) {
                        count = "1";
                    }
                }
                this._consume(TokenTypes.tokens.greater_than, "Expected '>' for array.");
                countInt = count ? parseInt(count) : 0;
            }
            const arrayType = new ArrayType(array.toString(), attrs, format, countInt);
            if (countNode) {
                this._deferArrayCountEval.push({ arrayType, countNode });
            }
            return arrayType;
        }
        return null;
    }
    _texture_sampler_types() {
        // sampler_type
        if (this._match(TokenTypes.sampler_type)) {
            return new SamplerType(this._previous().toString(), null, null);
        }
        // depth_texture_type
        if (this._match(TokenTypes.depth_texture_type)) {
            return new SamplerType(this._previous().toString(), null, null);
        }
        // sampled_texture_type less_than type_decl greater_than
        // multisampled_texture_type less_than type_decl greater_than
        if (this._match(TokenTypes.sampled_texture_type) ||
            this._match(TokenTypes.multisampled_texture_type)) {
            const sampler = this._previous();
            this._consume(TokenTypes.tokens.less_than, "Expected '<' for sampler type.");
            const format = this._type_decl();
            this._consume(TokenTypes.tokens.greater_than, "Expected '>' for sampler type.");
            return new SamplerType(sampler.toString(), format, null);
        }
        // storage_texture_type less_than texel_format comma access_mode greater_than
        if (this._match(TokenTypes.storage_texture_type)) {
            const sampler = this._previous();
            this._consume(TokenTypes.tokens.less_than, "Expected '<' for sampler type.");
            const format = this._consume(TokenTypes.texel_format, "Invalid texel format.").toString();
            this._consume(TokenTypes.tokens.comma, "Expected ',' after texel format.");
            const access = this._consume(TokenTypes.access_mode, "Expected access mode for storage texture type.").toString();
            this._consume(TokenTypes.tokens.greater_than, "Expected '>' for sampler type.");
            return new SamplerType(sampler.toString(), format, access);
        }
        return null;
    }
    _attribute() {
        // attr ident paren_left (literal_or_ident comma)* literal_or_ident paren_right
        // attr ident
        let attributes = [];
        while (this._match(TokenTypes.tokens.attr)) {
            const name = this._consume(TokenTypes.attribute_name, "Expected attribute name");
            const attr = new Attribute(name.toString(), null);
            if (this._match(TokenTypes.tokens.paren_left)) {
                // literal_or_ident
                attr.value = this._consume(TokenTypes.literal_or_ident, "Expected attribute value").toString();
                if (this._check(TokenTypes.tokens.comma)) {
                    this._advance();
                    do {
                        const v = this._consume(TokenTypes.literal_or_ident, "Expected attribute value").toString();
                        if (!(attr.value instanceof Array)) {
                            attr.value = [attr.value];
                        }
                        attr.value.push(v);
                    } while (this._match(TokenTypes.tokens.comma));
                }
                this._consume(TokenTypes.tokens.paren_right, "Expected ')'");
            }
            attributes.push(attr);
        }
        if (attributes.length == 0) {
            return null;
        }
        return attributes;
    }
}

/**
 * @author Brendan Duncan / https://github.com/brendan-duncan
 */
class TypeInfo {
    constructor(name, attributes) {
        this.name = name;
        this.attributes = attributes;
        this.size = 0;
    }
    get isArray() {
        return false;
    }
    get isStruct() {
        return false;
    }
    get isTemplate() {
        return false;
    }
}
class MemberInfo {
    constructor(name, type, attributes) {
        this.name = name;
        this.type = type;
        this.attributes = attributes;
        this.offset = 0;
        this.size = 0;
    }
    get isArray() {
        return this.type.isArray;
    }
    get isStruct() {
        return this.type.isStruct;
    }
    get isTemplate() {
        return this.type.isTemplate;
    }
    get align() {
        return this.type.isStruct ? this.type.align : 0;
    }
    get members() {
        return this.type.isStruct ? this.type.members : null;
    }
    get format() {
        return this.type.isArray
            ? this.type.format
            : this.type.isTemplate
                ? this.type.format
                : null;
    }
    get count() {
        return this.type.isArray ? this.type.count : 0;
    }
    get stride() {
        return this.type.isArray ? this.type.stride : this.size;
    }
}
class StructInfo extends TypeInfo {
    constructor(name, attributes) {
        super(name, attributes);
        this.members = [];
        this.align = 0;
        this.startLine = -1;
        this.endLine = -1;
        this.inUse = false;
    }
    get isStruct() {
        return true;
    }
}
class ArrayInfo extends TypeInfo {
    constructor(name, attributes) {
        super(name, attributes);
        this.count = 0;
        this.stride = 0;
    }
    get isArray() {
        return true;
    }
}
class TemplateInfo extends TypeInfo {
    constructor(name, format, attributes, access) {
        super(name, attributes);
        this.format = format;
        this.access = access;
    }
    get isTemplate() {
        return true;
    }
}
var ResourceType;
(function (ResourceType) {
    ResourceType[ResourceType["Uniform"] = 0] = "Uniform";
    ResourceType[ResourceType["Storage"] = 1] = "Storage";
    ResourceType[ResourceType["Texture"] = 2] = "Texture";
    ResourceType[ResourceType["Sampler"] = 3] = "Sampler";
    ResourceType[ResourceType["StorageTexture"] = 4] = "StorageTexture";
})(ResourceType || (ResourceType = {}));
class VariableInfo {
    constructor(name, type, group, binding, attributes, resourceType, access) {
        this.name = name;
        this.type = type;
        this.group = group;
        this.binding = binding;
        this.attributes = attributes;
        this.resourceType = resourceType;
        this.access = access;
    }
    get isArray() {
        return this.type.isArray;
    }
    get isStruct() {
        return this.type.isStruct;
    }
    get isTemplate() {
        return this.type.isTemplate;
    }
    get size() {
        return this.type.size;
    }
    get align() {
        return this.type.isStruct ? this.type.align : 0;
    }
    get members() {
        return this.type.isStruct ? this.type.members : null;
    }
    get format() {
        return this.type.isArray
            ? this.type.format
            : this.type.isTemplate
                ? this.type.format
                : null;
    }
    get count() {
        return this.type.isArray ? this.type.count : 0;
    }
    get stride() {
        return this.type.isArray ? this.type.stride : this.size;
    }
}
class AliasInfo {
    constructor(name, type) {
        this.name = name;
        this.type = type;
    }
}
class _TypeSize {
    constructor(align, size) {
        this.align = align;
        this.size = size;
    }
}
class InputInfo {
    constructor(name, type, locationType, location) {
        this.name = name;
        this.type = type;
        this.locationType = locationType;
        this.location = location;
        this.interpolation = null;
    }
}
class OutputInfo {
    constructor(name, type, locationType, location) {
        this.name = name;
        this.type = type;
        this.locationType = locationType;
        this.location = location;
    }
}
class FunctionInfo {
    constructor(name, stage = null) {
        this.stage = null;
        this.inputs = [];
        this.outputs = [];
        this.resources = [];
        this.startLine = -1;
        this.endLine = -1;
        this.inUse = false;
        this.calls = new Set();
        this.name = name;
        this.stage = stage;
    }
}
class EntryFunctions {
    constructor() {
        this.vertex = [];
        this.fragment = [];
        this.compute = [];
    }
}
class OverrideInfo {
    constructor(name, type, attributes, id) {
        this.name = name;
        this.type = type;
        this.attributes = attributes;
        this.id = id;
    }
}
class _FunctionResources {
    constructor(node) {
        this.resources = null;
        this.inUse = false;
        this.info = null;
        this.node = node;
    }
}
class WgslReflect {
    constructor(code) {
        /// All top-level uniform vars in the shader.
        this.uniforms = [];
        /// All top-level storage vars in the shader.
        this.storage = [];
        /// All top-level texture vars in the shader;
        this.textures = [];
        // All top-level sampler vars in the shader.
        this.samplers = [];
        /// All top-level type aliases in the shader.
        this.aliases = [];
        /// All top-level overrides in the shader.
        this.overrides = [];
        /// All top-level structs in the shader.
        this.structs = [];
        /// All entry functions in the shader: vertex, fragment, and/or compute.
        this.entry = new EntryFunctions();
        /// All functions in the shader, including entry functions.
        this.functions = [];
        this._types = new Map();
        this._functions = new Map();
        if (code) {
            this.update(code);
        }
    }
    _isStorageTexture(type) {
        return (type.name == "texture_storage_1d" ||
            type.name == "texture_storage_2d" ||
            type.name == "texture_storage_2d_array" ||
            type.name == "texture_storage_3d");
    }
    update(code) {
        const parser = new WgslParser();
        const ast = parser.parse(code);
        for (const node of ast) {
            if (node instanceof Function) {
                this._functions.set(node.name, new _FunctionResources(node));
            }
        }
        for (const node of ast) {
            if (node instanceof Struct) {
                const info = this._getTypeInfo(node, null);
                if (info instanceof StructInfo) {
                    this.structs.push(info);
                }
            }
        }
        for (const node of ast) {
            if (node instanceof Alias) {
                this.aliases.push(this._getAliasInfo(node));
                continue;
            }
            if (node instanceof Override) {
                const v = node;
                const id = this._getAttributeNum(v.attributes, "id", 0);
                const type = v.type != null ? this._getTypeInfo(v.type, v.attributes) : null;
                this.overrides.push(new OverrideInfo(v.name, type, v.attributes, id));
                continue;
            }
            if (this._isUniformVar(node)) {
                const v = node;
                const g = this._getAttributeNum(v.attributes, "group", 0);
                const b = this._getAttributeNum(v.attributes, "binding", 0);
                const type = this._getTypeInfo(v.type, v.attributes);
                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Uniform, v.access);
                this.uniforms.push(varInfo);
                continue;
            }
            if (this._isStorageVar(node)) {
                const v = node;
                const g = this._getAttributeNum(v.attributes, "group", 0);
                const b = this._getAttributeNum(v.attributes, "binding", 0);
                const type = this._getTypeInfo(v.type, v.attributes);
                const isStorageTexture = this._isStorageTexture(type);
                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Storage, v.access);
                this.storage.push(varInfo);
                continue;
            }
            if (this._isTextureVar(node)) {
                const v = node;
                const g = this._getAttributeNum(v.attributes, "group", 0);
                const b = this._getAttributeNum(v.attributes, "binding", 0);
                const type = this._getTypeInfo(v.type, v.attributes);
                const isStorageTexture = this._isStorageTexture(type);
                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, isStorageTexture ? ResourceType.StorageTexture : ResourceType.Texture, v.access);
                if (isStorageTexture) {
                    this.storage.push(varInfo);
                }
                else {
                    this.textures.push(varInfo);
                }
                continue;
            }
            if (this._isSamplerVar(node)) {
                const v = node;
                const g = this._getAttributeNum(v.attributes, "group", 0);
                const b = this._getAttributeNum(v.attributes, "binding", 0);
                const type = this._getTypeInfo(v.type, v.attributes);
                const varInfo = new VariableInfo(v.name, type, g, b, v.attributes, ResourceType.Sampler, v.access);
                this.samplers.push(varInfo);
                continue;
            }
            if (node instanceof Function) {
                const vertexStage = this._getAttribute(node, "vertex");
                const fragmentStage = this._getAttribute(node, "fragment");
                const computeStage = this._getAttribute(node, "compute");
                const stage = vertexStage || fragmentStage || computeStage;
                const fn = new FunctionInfo(node.name, stage === null || stage === void 0 ? void 0 : stage.name);
                fn.startLine = node.startLine;
                fn.endLine = node.endLine;
                this.functions.push(fn);
                this._functions.get(node.name).info = fn;
                if (stage) {
                    this._functions.get(node.name).inUse = true;
                    fn.inUse = true;
                    fn.resources = this._findResources(node, !!stage);
                    fn.inputs = this._getInputs(node.args);
                    fn.outputs = this._getOutputs(node.returnType);
                    this.entry[stage.name].push(fn);
                }
                continue;
            }
        }
        for (const fn of this._functions.values()) {
            if (fn.info) {
                fn.info.inUse = fn.inUse;
                this._addCalls(fn.node, fn.info.calls);
            }
        }
        for (const u of this.uniforms) {
            this._markStructsInUse(u.type);
        }
        for (const s of this.storage) {
            this._markStructsInUse(s.type);
        }
    }
    _markStructsInUse(type) {
        if (type.isStruct) {
            type.inUse = true;
            for (const m of type.members) {
                this._markStructsInUse(m.type);
            }
        }
        else if (type.isArray) {
            this._markStructsInUse(type.format);
        }
        else if (type.isTemplate) {
            this._markStructsInUse(type.format);
        }
        else {
            const alias = this._getAlias(type.name);
            if (alias) {
                this._markStructsInUse(alias);
            }
        }
    }
    _addCalls(fn, calls) {
        var _a;
        for (const call of fn.calls) {
            const info = (_a = this._functions.get(call.name)) === null || _a === void 0 ? void 0 : _a.info;
            if (info) {
                calls.add(info);
            }
        }
    }
    /// Find a resource by its group and binding.
    findResource(group, binding) {
        for (const u of this.uniforms) {
            if (u.group == group && u.binding == binding) {
                return u;
            }
        }
        for (const s of this.storage) {
            if (s.group == group && s.binding == binding) {
                return s;
            }
        }
        for (const t of this.textures) {
            if (t.group == group && t.binding == binding) {
                return t;
            }
        }
        for (const s of this.samplers) {
            if (s.group == group && s.binding == binding) {
                return s;
            }
        }
        return null;
    }
    _findResource(name) {
        for (const u of this.uniforms) {
            if (u.name == name) {
                return u;
            }
        }
        for (const s of this.storage) {
            if (s.name == name) {
                return s;
            }
        }
        for (const t of this.textures) {
            if (t.name == name) {
                return t;
            }
        }
        for (const s of this.samplers) {
            if (s.name == name) {
                return s;
            }
        }
        return null;
    }
    _markStructsFromAST(type) {
        const info = this._getTypeInfo(type, null);
        this._markStructsInUse(info);
    }
    _findResources(fn, isEntry) {
        const resources = [];
        const self = this;
        const varStack = [];
        fn.search((node) => {
            if (node instanceof _BlockStart) {
                varStack.push({});
            }
            else if (node instanceof _BlockEnd) {
                varStack.pop();
            }
            else if (node instanceof Var) {
                const v = node;
                if (isEntry && v.type !== null) {
                    this._markStructsFromAST(v.type);
                }
                if (varStack.length > 0) {
                    varStack[varStack.length - 1][v.name] = v;
                }
            }
            else if (node instanceof CreateExpr) {
                const c = node;
                if (isEntry && c.type !== null) {
                    this._markStructsFromAST(c.type);
                }
            }
            else if (node instanceof Let) {
                const v = node;
                if (isEntry && v.type !== null) {
                    this._markStructsFromAST(v.type);
                }
                if (varStack.length > 0) {
                    varStack[varStack.length - 1][v.name] = v;
                }
            }
            else if (node instanceof VariableExpr) {
                const v = node;
                // Check to see if the variable is a local variable before checking to see if it's
                // a resource.
                if (varStack.length > 0) {
                    const varInfo = varStack[varStack.length - 1][v.name];
                    if (varInfo) {
                        return;
                    }
                }
                const varInfo = self._findResource(v.name);
                if (varInfo) {
                    resources.push(varInfo);
                }
            }
            else if (node instanceof CallExpr) {
                const c = node;
                const callFn = self._functions.get(c.name);
                if (callFn) {
                    if (isEntry) {
                        callFn.inUse = true;
                    }
                    fn.calls.add(callFn.node);
                    if (callFn.resources === null) {
                        callFn.resources = self._findResources(callFn.node, isEntry);
                    }
                    resources.push(...callFn.resources);
                }
            }
            else if (node instanceof Call) {
                const c = node;
                const callFn = self._functions.get(c.name);
                if (callFn) {
                    if (isEntry) {
                        callFn.inUse = true;
                    }
                    fn.calls.add(callFn.node);
                    if (callFn.resources === null) {
                        callFn.resources = self._findResources(callFn.node, isEntry);
                    }
                    resources.push(...callFn.resources);
                }
            }
        });
        return [...new Map(resources.map(r => [r.name, r])).values()];
    }
    getBindGroups() {
        const groups = [];
        function _makeRoom(group, binding) {
            if (group >= groups.length) {
                groups.length = group + 1;
            }
            if (groups[group] === undefined) {
                groups[group] = [];
            }
            if (binding >= groups[group].length) {
                groups[group].length = binding + 1;
            }
        }
        for (const u of this.uniforms) {
            _makeRoom(u.group, u.binding);
            const group = groups[u.group];
            group[u.binding] = u;
        }
        for (const u of this.storage) {
            _makeRoom(u.group, u.binding);
            const group = groups[u.group];
            group[u.binding] = u;
        }
        for (const t of this.textures) {
            _makeRoom(t.group, t.binding);
            const group = groups[t.group];
            group[t.binding] = t;
        }
        for (const t of this.samplers) {
            _makeRoom(t.group, t.binding);
            const group = groups[t.group];
            group[t.binding] = t;
        }
        return groups;
    }
    _getOutputs(type, outputs = undefined) {
        if (outputs === undefined) {
            outputs = [];
        }
        if (type instanceof Struct) {
            this._getStructOutputs(type, outputs);
        }
        else {
            const output = this._getOutputInfo(type);
            if (output !== null) {
                outputs.push(output);
            }
        }
        return outputs;
    }
    _getStructOutputs(struct, outputs) {
        for (const m of struct.members) {
            if (m.type instanceof Struct) {
                this._getStructOutputs(m.type, outputs);
            }
            else {
                const location = this._getAttribute(m, "location") || this._getAttribute(m, "builtin");
                if (location !== null) {
                    const typeInfo = this._getTypeInfo(m.type, m.type.attributes);
                    const locationValue = this._parseInt(location.value);
                    const info = new OutputInfo(m.name, typeInfo, location.name, locationValue);
                    outputs.push(info);
                }
            }
        }
    }
    _getOutputInfo(type) {
        const location = this._getAttribute(type, "location") ||
            this._getAttribute(type, "builtin");
        if (location !== null) {
            const typeInfo = this._getTypeInfo(type, type.attributes);
            const locationValue = this._parseInt(location.value);
            const info = new OutputInfo("", typeInfo, location.name, locationValue);
            return info;
        }
        return null;
    }
    _getInputs(args, inputs = undefined) {
        if (inputs === undefined) {
            inputs = [];
        }
        for (const arg of args) {
            if (arg.type instanceof Struct) {
                this._getStructInputs(arg.type, inputs);
            }
            else {
                const input = this._getInputInfo(arg);
                if (input !== null) {
                    inputs.push(input);
                }
            }
        }
        return inputs;
    }
    _getStructInputs(struct, inputs) {
        for (const m of struct.members) {
            if (m.type instanceof Struct) {
                this._getStructInputs(m.type, inputs);
            }
            else {
                const input = this._getInputInfo(m);
                if (input !== null) {
                    inputs.push(input);
                }
            }
        }
    }
    _getInputInfo(node) {
        const location = this._getAttribute(node, "location") ||
            this._getAttribute(node, "builtin");
        if (location !== null) {
            const interpolation = this._getAttribute(node, "interpolation");
            const type = this._getTypeInfo(node.type, node.attributes);
            const locationValue = this._parseInt(location.value);
            const info = new InputInfo(node.name, type, location.name, locationValue);
            if (interpolation !== null) {
                info.interpolation = this._parseString(interpolation.value);
            }
            return info;
        }
        return null;
    }
    _parseString(s) {
        if (s instanceof Array) {
            s = s[0];
        }
        return s;
    }
    _parseInt(s) {
        if (s instanceof Array) {
            s = s[0];
        }
        const n = parseInt(s);
        return isNaN(n) ? s : n;
    }
    _getAlias(name) {
        for (const a of this.aliases) {
            if (a.name == name) {
                return a.type;
            }
        }
        return null;
    }
    _getAliasInfo(node) {
        return new AliasInfo(node.name, this._getTypeInfo(node.type, null));
    }
    _getTypeInfo(type, attributes) {
        if (this._types.has(type)) {
            return this._types.get(type);
        }
        if (type instanceof ArrayType) {
            const a = type;
            const t = this._getTypeInfo(a.format, a.attributes);
            const info = new ArrayInfo(a.name, attributes);
            info.format = t;
            info.count = a.count;
            this._types.set(type, info);
            this._updateTypeInfo(info);
            return info;
        }
        if (type instanceof Struct) {
            const s = type;
            const info = new StructInfo(s.name, attributes);
            info.startLine = s.startLine;
            info.endLine = s.endLine;
            for (const m of s.members) {
                const t = this._getTypeInfo(m.type, m.attributes);
                info.members.push(new MemberInfo(m.name, t, m.attributes));
            }
            this._types.set(type, info);
            this._updateTypeInfo(info);
            return info;
        }
        if (type instanceof SamplerType) {
            const s = type;
            const formatIsType = s.format instanceof Type;
            const format = s.format
                ? formatIsType
                    ? this._getTypeInfo(s.format, null)
                    : new TypeInfo(s.format, null)
                : null;
            const info = new TemplateInfo(s.name, format, attributes, s.access);
            this._types.set(type, info);
            this._updateTypeInfo(info);
            return info;
        }
        if (type instanceof TemplateType) {
            const t = type;
            const format = t.format ? this._getTypeInfo(t.format, null) : null;
            const info = new TemplateInfo(t.name, format, attributes, t.access);
            this._types.set(type, info);
            this._updateTypeInfo(info);
            return info;
        }
        const info = new TypeInfo(type.name, attributes);
        this._types.set(type, info);
        this._updateTypeInfo(info);
        return info;
    }
    _updateTypeInfo(type) {
        var _a, _b;
        const typeSize = this._getTypeSize(type);
        type.size = (_a = typeSize === null || typeSize === void 0 ? void 0 : typeSize.size) !== null && _a !== void 0 ? _a : 0;
        if (type instanceof ArrayInfo) {
            const formatInfo = this._getTypeSize(type["format"]);
            type.stride = (_b = formatInfo === null || formatInfo === void 0 ? void 0 : formatInfo.size) !== null && _b !== void 0 ? _b : 0;
            this._updateTypeInfo(type["format"]);
        }
        if (type instanceof StructInfo) {
            this._updateStructInfo(type);
        }
    }
    _updateStructInfo(struct) {
        var _a;
        let offset = 0;
        let lastSize = 0;
        let lastOffset = 0;
        let structAlign = 0;
        for (let mi = 0, ml = struct.members.length; mi < ml; ++mi) {
            const member = struct.members[mi];
            const sizeInfo = this._getTypeSize(member);
            if (!sizeInfo) {
                continue;
            }
            (_a = this._getAlias(member.type.name)) !== null && _a !== void 0 ? _a : member.type;
            const align = sizeInfo.align;
            const size = sizeInfo.size;
            offset = this._roundUp(align, offset + lastSize);
            lastSize = size;
            lastOffset = offset;
            structAlign = Math.max(structAlign, align);
            member.offset = offset;
            member.size = size;
            this._updateTypeInfo(member.type);
        }
        struct.size = this._roundUp(structAlign, lastOffset + lastSize);
        struct.align = structAlign;
    }
    _getTypeSize(type) {
        var _a;
        if (type === null || type === undefined) {
            return null;
        }
        const explicitSize = this._getAttributeNum(type.attributes, "size", 0);
        const explicitAlign = this._getAttributeNum(type.attributes, "align", 0);
        if (type instanceof MemberInfo) {
            type = type.type;
        }
        if (type instanceof TypeInfo) {
            const alias = this._getAlias(type.name);
            if (alias !== null) {
                type = alias;
            }
        }
        {
            const info = WgslReflect._typeInfo[type.name];
            if (info !== undefined) {
                const divisor = type["format"] === "f16" ? 2 : 1;
                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));
            }
        }
        {
            const info = WgslReflect._typeInfo[type.name.substring(0, type.name.length - 1)];
            if (info) {
                const divisor = type.name[type.name.length - 1] === "h" ? 2 : 1;
                return new _TypeSize(Math.max(explicitAlign, info.align / divisor), Math.max(explicitSize, info.size / divisor));
            }
        }
        if (type instanceof ArrayInfo) {
            let arrayType = type;
            let align = 8;
            let size = 8;
            // Type                 AlignOf(T)          Sizeof(T)
            // array<E, N>          AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))
            // array<E>             AlignOf(E)          N * roundUp(AlignOf(E), SizeOf(E))  (N determined at runtime)
            //
            // @stride(Q)
            // array<E, N>          AlignOf(E)          N * Q
            //
            // @stride(Q)
            // array<E>             AlignOf(E)          Nruntime * Q
            //const E = type.format.name;
            const E = this._getTypeSize(arrayType.format);
            if (E !== null) {
                size = E.size;
                align = E.align;
            }
            const N = arrayType.count;
            const stride = this._getAttributeNum((_a = type === null || type === void 0 ? void 0 : type.attributes) !== null && _a !== void 0 ? _a : null, "stride", this._roundUp(align, size));
            size = N * stride;
            if (explicitSize) {
                size = explicitSize;
            }
            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));
        }
        if (type instanceof StructInfo) {
            let align = 0;
            let size = 0;
            // struct S     AlignOf:    max(AlignOfMember(S, M1), ... , AlignOfMember(S, MN))
            //              SizeOf:     roundUp(AlignOf(S), OffsetOfMember(S, L) + SizeOfMember(S, L))
            //                          Where L is the last member of the structure
            let offset = 0;
            let lastSize = 0;
            let lastOffset = 0;
            for (const m of type.members) {
                const mi = this._getTypeSize(m.type);
                if (mi !== null) {
                    align = Math.max(mi.align, align);
                    offset = this._roundUp(mi.align, offset + lastSize);
                    lastSize = mi.size;
                    lastOffset = offset;
                }
            }
            size = this._roundUp(align, lastOffset + lastSize);
            return new _TypeSize(Math.max(explicitAlign, align), Math.max(explicitSize, size));
        }
        return null;
    }
    _isUniformVar(node) {
        return node instanceof Var && node.storage == "uniform";
    }
    _isStorageVar(node) {
        return node instanceof Var && node.storage == "storage";
    }
    _isTextureVar(node) {
        return (node instanceof Var &&
            node.type !== null &&
            WgslReflect._textureTypes.indexOf(node.type.name) != -1);
    }
    _isSamplerVar(node) {
        return (node instanceof Var &&
            node.type !== null &&
            WgslReflect._samplerTypes.indexOf(node.type.name) != -1);
    }
    _getAttribute(node, name) {
        const obj = node;
        if (!obj || !obj["attributes"]) {
            return null;
        }
        const attrs = obj["attributes"];
        for (let a of attrs) {
            if (a.name == name) {
                return a;
            }
        }
        return null;
    }
    _getAttributeNum(attributes, name, defaultValue) {
        if (attributes === null) {
            return defaultValue;
        }
        for (let a of attributes) {
            if (a.name == name) {
                let v = a !== null && a.value !== null ? a.value : defaultValue;
                if (v instanceof Array) {
                    v = v[0];
                }
                if (typeof v === "number") {
                    return v;
                }
                if (typeof v === "string") {
                    return parseInt(v);
                }
                return defaultValue;
            }
        }
        return defaultValue;
    }
    _roundUp(k, n) {
        return Math.ceil(n / k) * k;
    }
}
// Type                 AlignOf(T)          Sizeof(T)
// i32, u32, or f32     4                   4
// atomic<T>            4                   4
// vec2<T>              8                   8
// vec3<T>              16                  12
// vec4<T>              16                  16
// mat2x2<f32>          8                   16
// mat3x2<f32>          8                   24
// mat4x2<f32>          8                   32
// mat2x3<f32>          16                  32
// mat3x3<f32>          16                  48
// mat4x3<f32>          16                  64
// mat2x4<f32>          16                  32
// mat3x4<f32>          16                  48
// mat4x4<f32>          16                  64
WgslReflect._typeInfo = {
    f16: { align: 2, size: 2 },
    i32: { align: 4, size: 4 },
    u32: { align: 4, size: 4 },
    f32: { align: 4, size: 4 },
    atomic: { align: 4, size: 4 },
    vec2: { align: 8, size: 8 },
    vec3: { align: 16, size: 12 },
    vec4: { align: 16, size: 16 },
    mat2x2: { align: 8, size: 16 },
    mat3x2: { align: 8, size: 24 },
    mat4x2: { align: 8, size: 32 },
    mat2x3: { align: 16, size: 32 },
    mat3x3: { align: 16, size: 48 },
    mat4x3: { align: 16, size: 64 },
    mat2x4: { align: 16, size: 32 },
    mat3x4: { align: 16, size: 48 },
    mat4x4: { align: 16, size: 64 },
};
WgslReflect._textureTypes = TokenTypes.any_texture_type.map((t) => {
    return t.name;
});
WgslReflect._samplerTypes = TokenTypes.sampler_type.map((t) => {
    return t.name;
});


//# sourceMappingURL=wgsl_reflect.module.js.map


}),
"../node_modules/.pnpm/@luma.gl+constants@9.0.17/node_modules/@luma.gl/constants/dist/webgl-constants.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  GL: function() { return GLEnum; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/* eslint-disable key-spacing, max-len, no-inline-comments, camelcase */
/**
 * Standard WebGL, WebGL2 and extension constants (OpenGL constants)
 * @note (Most) of these constants are also defined on the WebGLRenderingContext interface.
 * @see https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants
 * @privateRemarks Locally called `GLEnum` instead of `GL`, because `babel-plugin-inline-webl-constants`
 *  both depends on and processes this module, but shouldn't replace these declarations.
 */
var GLEnum;
(function (GLEnum) {
    // Clearing buffers
    // Constants passed to clear() to clear buffer masks.
    /** Passed to clear to clear the current depth buffer. */
    GLEnum[GLEnum["DEPTH_BUFFER_BIT"] = 256] = "DEPTH_BUFFER_BIT";
    /** Passed to clear to clear the current stencil buffer. */
    GLEnum[GLEnum["STENCIL_BUFFER_BIT"] = 1024] = "STENCIL_BUFFER_BIT";
    /** Passed to clear to clear the current color buffer. */
    GLEnum[GLEnum["COLOR_BUFFER_BIT"] = 16384] = "COLOR_BUFFER_BIT";
    // Rendering primitives
    // Constants passed to drawElements() or drawArrays() to specify what kind of primitive to render.
    /** Passed to drawElements or drawArrays to draw single points. */
    GLEnum[GLEnum["POINTS"] = 0] = "POINTS";
    /** Passed to drawElements or drawArrays to draw lines. Each vertex connects to the one after it. */
    GLEnum[GLEnum["LINES"] = 1] = "LINES";
    /** Passed to drawElements or drawArrays to draw lines. Each set of two vertices is treated as a separate line segment. */
    GLEnum[GLEnum["LINE_LOOP"] = 2] = "LINE_LOOP";
    /** Passed to drawElements or drawArrays to draw a connected group of line segments from the first vertex to the last. */
    GLEnum[GLEnum["LINE_STRIP"] = 3] = "LINE_STRIP";
    /** Passed to drawElements or drawArrays to draw triangles. Each set of three vertices creates a separate triangle. */
    GLEnum[GLEnum["TRIANGLES"] = 4] = "TRIANGLES";
    /** Passed to drawElements or drawArrays to draw a connected group of triangles. */
    GLEnum[GLEnum["TRIANGLE_STRIP"] = 5] = "TRIANGLE_STRIP";
    /** Passed to drawElements or drawArrays to draw a connected group of triangles. Each vertex connects to the previous and the first vertex in the fan. */
    GLEnum[GLEnum["TRIANGLE_FAN"] = 6] = "TRIANGLE_FAN";
    // Blending modes
    // Constants passed to blendFunc() or blendFuncSeparate() to specify the blending mode (for both, RBG and alpha, or separately).
    /** Passed to blendFunc or blendFuncSeparate to turn off a component. */
    GLEnum[GLEnum["ZERO"] = 0] = "ZERO";
    /** Passed to blendFunc or blendFuncSeparate to turn on a component. */
    GLEnum[GLEnum["ONE"] = 1] = "ONE";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the source elements color. */
    GLEnum[GLEnum["SRC_COLOR"] = 768] = "SRC_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source elements color. */
    GLEnum[GLEnum["ONE_MINUS_SRC_COLOR"] = 769] = "ONE_MINUS_SRC_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the source's alpha. */
    GLEnum[GLEnum["SRC_ALPHA"] = 770] = "SRC_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the source's alpha. */
    GLEnum[GLEnum["ONE_MINUS_SRC_ALPHA"] = 771] = "ONE_MINUS_SRC_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's alpha. */
    GLEnum[GLEnum["DST_ALPHA"] = 772] = "DST_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's alpha. */
    GLEnum[GLEnum["ONE_MINUS_DST_ALPHA"] = 773] = "ONE_MINUS_DST_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the destination's color. */
    GLEnum[GLEnum["DST_COLOR"] = 774] = "DST_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by one minus the destination's color. */
    GLEnum[GLEnum["ONE_MINUS_DST_COLOR"] = 775] = "ONE_MINUS_DST_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to multiply a component by the minimum of source's alpha or one minus the destination's alpha. */
    GLEnum[GLEnum["SRC_ALPHA_SATURATE"] = 776] = "SRC_ALPHA_SATURATE";
    /** Passed to blendFunc or blendFuncSeparate to specify a constant color blend function. */
    GLEnum[GLEnum["CONSTANT_COLOR"] = 32769] = "CONSTANT_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to specify one minus a constant color blend function. */
    GLEnum[GLEnum["ONE_MINUS_CONSTANT_COLOR"] = 32770] = "ONE_MINUS_CONSTANT_COLOR";
    /** Passed to blendFunc or blendFuncSeparate to specify a constant alpha blend function. */
    GLEnum[GLEnum["CONSTANT_ALPHA"] = 32771] = "CONSTANT_ALPHA";
    /** Passed to blendFunc or blendFuncSeparate to specify one minus a constant alpha blend function. */
    GLEnum[GLEnum["ONE_MINUS_CONSTANT_ALPHA"] = 32772] = "ONE_MINUS_CONSTANT_ALPHA";
    // Blending equations
    // Constants passed to blendEquation() or blendEquationSeparate() to control
    // how the blending is calculated (for both, RBG and alpha, or separately).
    /** Passed to blendEquation or blendEquationSeparate to set an addition blend function. */
    /** Passed to blendEquation or blendEquationSeparate to specify a subtraction blend function (source - destination). */
    /** Passed to blendEquation or blendEquationSeparate to specify a reverse subtraction blend function (destination - source). */
    GLEnum[GLEnum["FUNC_ADD"] = 32774] = "FUNC_ADD";
    GLEnum[GLEnum["FUNC_SUBTRACT"] = 32778] = "FUNC_SUBTRACT";
    GLEnum[GLEnum["FUNC_REVERSE_SUBTRACT"] = 32779] = "FUNC_REVERSE_SUBTRACT";
    // Getting GL parameter information
    // Constants passed to getParameter() to specify what information to return.
    /** Passed to getParameter to get the current RGB blend function. */
    GLEnum[GLEnum["BLEND_EQUATION"] = 32777] = "BLEND_EQUATION";
    /** Passed to getParameter to get the current RGB blend function. Same as BLEND_EQUATION */
    GLEnum[GLEnum["BLEND_EQUATION_RGB"] = 32777] = "BLEND_EQUATION_RGB";
    /** Passed to getParameter to get the current alpha blend function. Same as BLEND_EQUATION */
    GLEnum[GLEnum["BLEND_EQUATION_ALPHA"] = 34877] = "BLEND_EQUATION_ALPHA";
    /** Passed to getParameter to get the current destination RGB blend function. */
    GLEnum[GLEnum["BLEND_DST_RGB"] = 32968] = "BLEND_DST_RGB";
    /** Passed to getParameter to get the current destination RGB blend function. */
    GLEnum[GLEnum["BLEND_SRC_RGB"] = 32969] = "BLEND_SRC_RGB";
    /** Passed to getParameter to get the current destination alpha blend function. */
    GLEnum[GLEnum["BLEND_DST_ALPHA"] = 32970] = "BLEND_DST_ALPHA";
    /** Passed to getParameter to get the current source alpha blend function. */
    GLEnum[GLEnum["BLEND_SRC_ALPHA"] = 32971] = "BLEND_SRC_ALPHA";
    /** Passed to getParameter to return a the current blend color. */
    GLEnum[GLEnum["BLEND_COLOR"] = 32773] = "BLEND_COLOR";
    /** Passed to getParameter to get the array buffer binding. */
    GLEnum[GLEnum["ARRAY_BUFFER_BINDING"] = 34964] = "ARRAY_BUFFER_BINDING";
    /** Passed to getParameter to get the current element array buffer. */
    GLEnum[GLEnum["ELEMENT_ARRAY_BUFFER_BINDING"] = 34965] = "ELEMENT_ARRAY_BUFFER_BINDING";
    /** Passed to getParameter to get the current lineWidth (set by the lineWidth method). */
    GLEnum[GLEnum["LINE_WIDTH"] = 2849] = "LINE_WIDTH";
    /** Passed to getParameter to get the current size of a point drawn with gl.POINTS */
    GLEnum[GLEnum["ALIASED_POINT_SIZE_RANGE"] = 33901] = "ALIASED_POINT_SIZE_RANGE";
    /** Passed to getParameter to get the range of available widths for a line. Returns a length-2 array with the lo value at 0, and hight at 1. */
    GLEnum[GLEnum["ALIASED_LINE_WIDTH_RANGE"] = 33902] = "ALIASED_LINE_WIDTH_RANGE";
    /** Passed to getParameter to get the current value of cullFace. Should return FRONT, BACK, or FRONT_AND_BACK */
    GLEnum[GLEnum["CULL_FACE_MODE"] = 2885] = "CULL_FACE_MODE";
    /** Passed to getParameter to determine the current value of frontFace. Should return CW or CCW. */
    GLEnum[GLEnum["FRONT_FACE"] = 2886] = "FRONT_FACE";
    /** Passed to getParameter to return a length-2 array of floats giving the current depth range. */
    GLEnum[GLEnum["DEPTH_RANGE"] = 2928] = "DEPTH_RANGE";
    /** Passed to getParameter to determine if the depth write mask is enabled. */
    GLEnum[GLEnum["DEPTH_WRITEMASK"] = 2930] = "DEPTH_WRITEMASK";
    /** Passed to getParameter to determine the current depth clear value. */
    GLEnum[GLEnum["DEPTH_CLEAR_VALUE"] = 2931] = "DEPTH_CLEAR_VALUE";
    /** Passed to getParameter to get the current depth function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL. */
    GLEnum[GLEnum["DEPTH_FUNC"] = 2932] = "DEPTH_FUNC";
    /** Passed to getParameter to get the value the stencil will be cleared to. */
    GLEnum[GLEnum["STENCIL_CLEAR_VALUE"] = 2961] = "STENCIL_CLEAR_VALUE";
    /** Passed to getParameter to get the current stencil function. Returns NEVER, ALWAYS, LESS, EQUAL, LEQUAL, GREATER, GEQUAL, or NOTEQUAL. */
    GLEnum[GLEnum["STENCIL_FUNC"] = 2962] = "STENCIL_FUNC";
    /** Passed to getParameter to get the current stencil fail function. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP. */
    GLEnum[GLEnum["STENCIL_FAIL"] = 2964] = "STENCIL_FAIL";
    /** Passed to getParameter to get the current stencil fail function should the depth buffer test fail. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP. */
    GLEnum[GLEnum["STENCIL_PASS_DEPTH_FAIL"] = 2965] = "STENCIL_PASS_DEPTH_FAIL";
    /** Passed to getParameter to get the current stencil fail function should the depth buffer test pass. Should return KEEP, REPLACE, INCR, DECR, INVERT, INCR_WRAP, or DECR_WRAP. */
    GLEnum[GLEnum["STENCIL_PASS_DEPTH_PASS"] = 2966] = "STENCIL_PASS_DEPTH_PASS";
    /** Passed to getParameter to get the reference value used for stencil tests. */
    GLEnum[GLEnum["STENCIL_REF"] = 2967] = "STENCIL_REF";
    GLEnum[GLEnum["STENCIL_VALUE_MASK"] = 2963] = "STENCIL_VALUE_MASK";
    GLEnum[GLEnum["STENCIL_WRITEMASK"] = 2968] = "STENCIL_WRITEMASK";
    GLEnum[GLEnum["STENCIL_BACK_FUNC"] = 34816] = "STENCIL_BACK_FUNC";
    GLEnum[GLEnum["STENCIL_BACK_FAIL"] = 34817] = "STENCIL_BACK_FAIL";
    GLEnum[GLEnum["STENCIL_BACK_PASS_DEPTH_FAIL"] = 34818] = "STENCIL_BACK_PASS_DEPTH_FAIL";
    GLEnum[GLEnum["STENCIL_BACK_PASS_DEPTH_PASS"] = 34819] = "STENCIL_BACK_PASS_DEPTH_PASS";
    GLEnum[GLEnum["STENCIL_BACK_REF"] = 36003] = "STENCIL_BACK_REF";
    GLEnum[GLEnum["STENCIL_BACK_VALUE_MASK"] = 36004] = "STENCIL_BACK_VALUE_MASK";
    GLEnum[GLEnum["STENCIL_BACK_WRITEMASK"] = 36005] = "STENCIL_BACK_WRITEMASK";
    /** An Int32Array with four elements for the current viewport dimensions. */
    GLEnum[GLEnum["VIEWPORT"] = 2978] = "VIEWPORT";
    /** An Int32Array with four elements for the current scissor box dimensions. */
    GLEnum[GLEnum["SCISSOR_BOX"] = 3088] = "SCISSOR_BOX";
    GLEnum[GLEnum["COLOR_CLEAR_VALUE"] = 3106] = "COLOR_CLEAR_VALUE";
    GLEnum[GLEnum["COLOR_WRITEMASK"] = 3107] = "COLOR_WRITEMASK";
    GLEnum[GLEnum["UNPACK_ALIGNMENT"] = 3317] = "UNPACK_ALIGNMENT";
    GLEnum[GLEnum["PACK_ALIGNMENT"] = 3333] = "PACK_ALIGNMENT";
    GLEnum[GLEnum["MAX_TEXTURE_SIZE"] = 3379] = "MAX_TEXTURE_SIZE";
    GLEnum[GLEnum["MAX_VIEWPORT_DIMS"] = 3386] = "MAX_VIEWPORT_DIMS";
    GLEnum[GLEnum["SUBPIXEL_BITS"] = 3408] = "SUBPIXEL_BITS";
    GLEnum[GLEnum["RED_BITS"] = 3410] = "RED_BITS";
    GLEnum[GLEnum["GREEN_BITS"] = 3411] = "GREEN_BITS";
    GLEnum[GLEnum["BLUE_BITS"] = 3412] = "BLUE_BITS";
    GLEnum[GLEnum["ALPHA_BITS"] = 3413] = "ALPHA_BITS";
    GLEnum[GLEnum["DEPTH_BITS"] = 3414] = "DEPTH_BITS";
    GLEnum[GLEnum["STENCIL_BITS"] = 3415] = "STENCIL_BITS";
    GLEnum[GLEnum["POLYGON_OFFSET_UNITS"] = 10752] = "POLYGON_OFFSET_UNITS";
    GLEnum[GLEnum["POLYGON_OFFSET_FACTOR"] = 32824] = "POLYGON_OFFSET_FACTOR";
    GLEnum[GLEnum["TEXTURE_BINDING_2D"] = 32873] = "TEXTURE_BINDING_2D";
    GLEnum[GLEnum["SAMPLE_BUFFERS"] = 32936] = "SAMPLE_BUFFERS";
    GLEnum[GLEnum["SAMPLES"] = 32937] = "SAMPLES";
    GLEnum[GLEnum["SAMPLE_COVERAGE_VALUE"] = 32938] = "SAMPLE_COVERAGE_VALUE";
    GLEnum[GLEnum["SAMPLE_COVERAGE_INVERT"] = 32939] = "SAMPLE_COVERAGE_INVERT";
    GLEnum[GLEnum["COMPRESSED_TEXTURE_FORMATS"] = 34467] = "COMPRESSED_TEXTURE_FORMATS";
    GLEnum[GLEnum["VENDOR"] = 7936] = "VENDOR";
    GLEnum[GLEnum["RENDERER"] = 7937] = "RENDERER";
    GLEnum[GLEnum["VERSION"] = 7938] = "VERSION";
    GLEnum[GLEnum["IMPLEMENTATION_COLOR_READ_TYPE"] = 35738] = "IMPLEMENTATION_COLOR_READ_TYPE";
    GLEnum[GLEnum["IMPLEMENTATION_COLOR_READ_FORMAT"] = 35739] = "IMPLEMENTATION_COLOR_READ_FORMAT";
    GLEnum[GLEnum["BROWSER_DEFAULT_WEBGL"] = 37444] = "BROWSER_DEFAULT_WEBGL";
    // Buffers
    // Constants passed to bufferData(), bufferSubData(), bindBuffer(), or
    // getBufferParameter().
    /** Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and not change often. */
    GLEnum[GLEnum["STATIC_DRAW"] = 35044] = "STATIC_DRAW";
    /** Passed to bufferData as a hint about whether the contents of the buffer are likely to not be used often. */
    GLEnum[GLEnum["STREAM_DRAW"] = 35040] = "STREAM_DRAW";
    /** Passed to bufferData as a hint about whether the contents of the buffer are likely to be used often and change often. */
    GLEnum[GLEnum["DYNAMIC_DRAW"] = 35048] = "DYNAMIC_DRAW";
    /** Passed to bindBuffer or bufferData to specify the type of buffer being used. */
    GLEnum[GLEnum["ARRAY_BUFFER"] = 34962] = "ARRAY_BUFFER";
    /** Passed to bindBuffer or bufferData to specify the type of buffer being used. */
    GLEnum[GLEnum["ELEMENT_ARRAY_BUFFER"] = 34963] = "ELEMENT_ARRAY_BUFFER";
    /** Passed to getBufferParameter to get a buffer's size. */
    GLEnum[GLEnum["BUFFER_SIZE"] = 34660] = "BUFFER_SIZE";
    /** Passed to getBufferParameter to get the hint for the buffer passed in when it was created. */
    GLEnum[GLEnum["BUFFER_USAGE"] = 34661] = "BUFFER_USAGE";
    // Vertex attributes
    // Constants passed to getVertexAttrib().
    /** Passed to getVertexAttrib to read back the current vertex attribute. */
    GLEnum[GLEnum["CURRENT_VERTEX_ATTRIB"] = 34342] = "CURRENT_VERTEX_ATTRIB";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_ENABLED"] = 34338] = "VERTEX_ATTRIB_ARRAY_ENABLED";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_SIZE"] = 34339] = "VERTEX_ATTRIB_ARRAY_SIZE";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_STRIDE"] = 34340] = "VERTEX_ATTRIB_ARRAY_STRIDE";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_TYPE"] = 34341] = "VERTEX_ATTRIB_ARRAY_TYPE";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_NORMALIZED"] = 34922] = "VERTEX_ATTRIB_ARRAY_NORMALIZED";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_POINTER"] = 34373] = "VERTEX_ATTRIB_ARRAY_POINTER";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"] = 34975] = "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING";
    // Culling
    // Constants passed to cullFace().
    /** Passed to enable/disable to turn on/off culling. Can also be used with getParameter to find the current culling method. */
    GLEnum[GLEnum["CULL_FACE"] = 2884] = "CULL_FACE";
    /** Passed to cullFace to specify that only front faces should be culled. */
    GLEnum[GLEnum["FRONT"] = 1028] = "FRONT";
    /** Passed to cullFace to specify that only back faces should be culled. */
    GLEnum[GLEnum["BACK"] = 1029] = "BACK";
    /** Passed to cullFace to specify that front and back faces should be culled. */
    GLEnum[GLEnum["FRONT_AND_BACK"] = 1032] = "FRONT_AND_BACK";
    // Enabling and disabling
    // Constants passed to enable() or disable().
    /** Passed to enable/disable to turn on/off blending. Can also be used with getParameter to find the current blending method. */
    GLEnum[GLEnum["BLEND"] = 3042] = "BLEND";
    /** Passed to enable/disable to turn on/off the depth test. Can also be used with getParameter to query the depth test. */
    GLEnum[GLEnum["DEPTH_TEST"] = 2929] = "DEPTH_TEST";
    /** Passed to enable/disable to turn on/off dithering. Can also be used with getParameter to find the current dithering method. */
    GLEnum[GLEnum["DITHER"] = 3024] = "DITHER";
    /** Passed to enable/disable to turn on/off the polygon offset. Useful for rendering hidden-line images, decals, and or solids with highlighted edges. Can also be used with getParameter to query the scissor test. */
    GLEnum[GLEnum["POLYGON_OFFSET_FILL"] = 32823] = "POLYGON_OFFSET_FILL";
    /** Passed to enable/disable to turn on/off the alpha to coverage. Used in multi-sampling alpha channels. */
    GLEnum[GLEnum["SAMPLE_ALPHA_TO_COVERAGE"] = 32926] = "SAMPLE_ALPHA_TO_COVERAGE";
    /** Passed to enable/disable to turn on/off the sample coverage. Used in multi-sampling. */
    GLEnum[GLEnum["SAMPLE_COVERAGE"] = 32928] = "SAMPLE_COVERAGE";
    /** Passed to enable/disable to turn on/off the scissor test. Can also be used with getParameter to query the scissor test. */
    GLEnum[GLEnum["SCISSOR_TEST"] = 3089] = "SCISSOR_TEST";
    /** Passed to enable/disable to turn on/off the stencil test. Can also be used with getParameter to query the stencil test. */
    GLEnum[GLEnum["STENCIL_TEST"] = 2960] = "STENCIL_TEST";
    // Errors
    // Constants returned from getError().
    /** Returned from getError(). */
    GLEnum[GLEnum["NO_ERROR"] = 0] = "NO_ERROR";
    /** Returned from getError(). */
    GLEnum[GLEnum["INVALID_ENUM"] = 1280] = "INVALID_ENUM";
    /** Returned from getError(). */
    GLEnum[GLEnum["INVALID_VALUE"] = 1281] = "INVALID_VALUE";
    /** Returned from getError(). */
    GLEnum[GLEnum["INVALID_OPERATION"] = 1282] = "INVALID_OPERATION";
    /** Returned from getError(). */
    GLEnum[GLEnum["OUT_OF_MEMORY"] = 1285] = "OUT_OF_MEMORY";
    /** Returned from getError(). */
    GLEnum[GLEnum["CONTEXT_LOST_WEBGL"] = 37442] = "CONTEXT_LOST_WEBGL";
    // Front face directions
    // Constants passed to frontFace().
    /** Passed to frontFace to specify the front face of a polygon is drawn in the clockwise direction */
    GLEnum[GLEnum["CW"] = 2304] = "CW";
    /** Passed to frontFace to specify the front face of a polygon is drawn in the counter clockwise direction */
    GLEnum[GLEnum["CCW"] = 2305] = "CCW";
    // Hints
    // Constants passed to hint()
    /** There is no preference for this behavior. */
    GLEnum[GLEnum["DONT_CARE"] = 4352] = "DONT_CARE";
    /** The most efficient behavior should be used. */
    GLEnum[GLEnum["FASTEST"] = 4353] = "FASTEST";
    /** The most correct or the highest quality option should be used. */
    GLEnum[GLEnum["NICEST"] = 4354] = "NICEST";
    /** Hint for the quality of filtering when generating mipmap images with WebGLRenderingContext.generateMipmap(). */
    GLEnum[GLEnum["GENERATE_MIPMAP_HINT"] = 33170] = "GENERATE_MIPMAP_HINT";
    // Data types
    GLEnum[GLEnum["BYTE"] = 5120] = "BYTE";
    GLEnum[GLEnum["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
    GLEnum[GLEnum["SHORT"] = 5122] = "SHORT";
    GLEnum[GLEnum["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
    GLEnum[GLEnum["INT"] = 5124] = "INT";
    GLEnum[GLEnum["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
    GLEnum[GLEnum["FLOAT"] = 5126] = "FLOAT";
    GLEnum[GLEnum["DOUBLE"] = 5130] = "DOUBLE";
    // Pixel formats
    GLEnum[GLEnum["DEPTH_COMPONENT"] = 6402] = "DEPTH_COMPONENT";
    GLEnum[GLEnum["ALPHA"] = 6406] = "ALPHA";
    GLEnum[GLEnum["RGB"] = 6407] = "RGB";
    GLEnum[GLEnum["RGBA"] = 6408] = "RGBA";
    GLEnum[GLEnum["LUMINANCE"] = 6409] = "LUMINANCE";
    GLEnum[GLEnum["LUMINANCE_ALPHA"] = 6410] = "LUMINANCE_ALPHA";
    // Pixel types
    // UNSIGNED_BYTE = 0x1401,
    GLEnum[GLEnum["UNSIGNED_SHORT_4_4_4_4"] = 32819] = "UNSIGNED_SHORT_4_4_4_4";
    GLEnum[GLEnum["UNSIGNED_SHORT_5_5_5_1"] = 32820] = "UNSIGNED_SHORT_5_5_5_1";
    GLEnum[GLEnum["UNSIGNED_SHORT_5_6_5"] = 33635] = "UNSIGNED_SHORT_5_6_5";
    // Shaders
    // Constants passed to createShader() or getShaderParameter()
    /** Passed to createShader to define a fragment shader. */
    GLEnum[GLEnum["FRAGMENT_SHADER"] = 35632] = "FRAGMENT_SHADER";
    /** Passed to createShader to define a vertex shader */
    GLEnum[GLEnum["VERTEX_SHADER"] = 35633] = "VERTEX_SHADER";
    /** Passed to getShaderParameter to get the status of the compilation. Returns false if the shader was not compiled. You can then query getShaderInfoLog to find the exact error */
    GLEnum[GLEnum["COMPILE_STATUS"] = 35713] = "COMPILE_STATUS";
    /** Passed to getShaderParameter to determine if a shader was deleted via deleteShader. Returns true if it was, false otherwise. */
    GLEnum[GLEnum["DELETE_STATUS"] = 35712] = "DELETE_STATUS";
    /** Passed to getProgramParameter after calling linkProgram to determine if a program was linked correctly. Returns false if there were errors. Use getProgramInfoLog to find the exact error. */
    GLEnum[GLEnum["LINK_STATUS"] = 35714] = "LINK_STATUS";
    /** Passed to getProgramParameter after calling validateProgram to determine if it is valid. Returns false if errors were found. */
    GLEnum[GLEnum["VALIDATE_STATUS"] = 35715] = "VALIDATE_STATUS";
    /** Passed to getProgramParameter after calling attachShader to determine if the shader was attached correctly. Returns false if errors occurred. */
    GLEnum[GLEnum["ATTACHED_SHADERS"] = 35717] = "ATTACHED_SHADERS";
    /** Passed to getProgramParameter to get the number of attributes active in a program. */
    GLEnum[GLEnum["ACTIVE_ATTRIBUTES"] = 35721] = "ACTIVE_ATTRIBUTES";
    /** Passed to getProgramParameter to get the number of uniforms active in a program. */
    GLEnum[GLEnum["ACTIVE_UNIFORMS"] = 35718] = "ACTIVE_UNIFORMS";
    /** The maximum number of entries possible in the vertex attribute list. */
    GLEnum[GLEnum["MAX_VERTEX_ATTRIBS"] = 34921] = "MAX_VERTEX_ATTRIBS";
    GLEnum[GLEnum["MAX_VERTEX_UNIFORM_VECTORS"] = 36347] = "MAX_VERTEX_UNIFORM_VECTORS";
    GLEnum[GLEnum["MAX_VARYING_VECTORS"] = 36348] = "MAX_VARYING_VECTORS";
    GLEnum[GLEnum["MAX_COMBINED_TEXTURE_IMAGE_UNITS"] = 35661] = "MAX_COMBINED_TEXTURE_IMAGE_UNITS";
    GLEnum[GLEnum["MAX_VERTEX_TEXTURE_IMAGE_UNITS"] = 35660] = "MAX_VERTEX_TEXTURE_IMAGE_UNITS";
    /** Implementation dependent number of maximum texture units. At least 8. */
    GLEnum[GLEnum["MAX_TEXTURE_IMAGE_UNITS"] = 34930] = "MAX_TEXTURE_IMAGE_UNITS";
    GLEnum[GLEnum["MAX_FRAGMENT_UNIFORM_VECTORS"] = 36349] = "MAX_FRAGMENT_UNIFORM_VECTORS";
    GLEnum[GLEnum["SHADER_TYPE"] = 35663] = "SHADER_TYPE";
    GLEnum[GLEnum["SHADING_LANGUAGE_VERSION"] = 35724] = "SHADING_LANGUAGE_VERSION";
    GLEnum[GLEnum["CURRENT_PROGRAM"] = 35725] = "CURRENT_PROGRAM";
    // Depth or stencil tests
    // Constants passed to depthFunc() or stencilFunc().
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass, i.e., nothing will be drawn. */
    GLEnum[GLEnum["NEVER"] = 512] = "NEVER";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value. */
    GLEnum[GLEnum["LESS"] = 513] = "LESS";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value. */
    GLEnum[GLEnum["EQUAL"] = 514] = "EQUAL";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value. */
    GLEnum[GLEnum["LEQUAL"] = 515] = "LEQUAL";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value. */
    GLEnum[GLEnum["GREATER"] = 516] = "GREATER";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value. */
    GLEnum[GLEnum["NOTEQUAL"] = 517] = "NOTEQUAL";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value. */
    GLEnum[GLEnum["GEQUAL"] = 518] = "GEQUAL";
    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass, i.e., pixels will be drawn in the order they are drawn. */
    GLEnum[GLEnum["ALWAYS"] = 519] = "ALWAYS";
    // Stencil actions
    // Constants passed to stencilOp().
    GLEnum[GLEnum["KEEP"] = 7680] = "KEEP";
    GLEnum[GLEnum["REPLACE"] = 7681] = "REPLACE";
    GLEnum[GLEnum["INCR"] = 7682] = "INCR";
    GLEnum[GLEnum["DECR"] = 7683] = "DECR";
    GLEnum[GLEnum["INVERT"] = 5386] = "INVERT";
    GLEnum[GLEnum["INCR_WRAP"] = 34055] = "INCR_WRAP";
    GLEnum[GLEnum["DECR_WRAP"] = 34056] = "DECR_WRAP";
    // Textures
    // Constants passed to texParameteri(),
    // texParameterf(), bindTexture(), texImage2D(), and others.
    GLEnum[GLEnum["NEAREST"] = 9728] = "NEAREST";
    GLEnum[GLEnum["LINEAR"] = 9729] = "LINEAR";
    GLEnum[GLEnum["NEAREST_MIPMAP_NEAREST"] = 9984] = "NEAREST_MIPMAP_NEAREST";
    GLEnum[GLEnum["LINEAR_MIPMAP_NEAREST"] = 9985] = "LINEAR_MIPMAP_NEAREST";
    GLEnum[GLEnum["NEAREST_MIPMAP_LINEAR"] = 9986] = "NEAREST_MIPMAP_LINEAR";
    GLEnum[GLEnum["LINEAR_MIPMAP_LINEAR"] = 9987] = "LINEAR_MIPMAP_LINEAR";
    /** The texture magnification function is used when the pixel being textured maps to an area less than or equal to one texture element. It sets the texture magnification function to either GL_NEAREST or GL_LINEAR (see below). GL_NEAREST is generally faster than GL_LINEAR, but it can produce textured images with sharper edges because the transition between texture elements is not as smooth. Default: GL_LINEAR.  */
    GLEnum[GLEnum["TEXTURE_MAG_FILTER"] = 10240] = "TEXTURE_MAG_FILTER";
    /** The texture minifying function is used whenever the pixel being textured maps to an area greater than one texture element. There are six defined minifying functions. Two of them use the nearest one or nearest four texture elements to compute the texture value. The other four use mipmaps. Default: GL_NEAREST_MIPMAP_LINEAR */
    GLEnum[GLEnum["TEXTURE_MIN_FILTER"] = 10241] = "TEXTURE_MIN_FILTER";
    /** Sets the wrap parameter for texture coordinate  to either GL_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT, or GL_REPEAT. G */
    GLEnum[GLEnum["TEXTURE_WRAP_S"] = 10242] = "TEXTURE_WRAP_S";
    /** Sets the wrap parameter for texture coordinate  to either GL_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT, or GL_REPEAT. G */
    GLEnum[GLEnum["TEXTURE_WRAP_T"] = 10243] = "TEXTURE_WRAP_T";
    GLEnum[GLEnum["TEXTURE_2D"] = 3553] = "TEXTURE_2D";
    GLEnum[GLEnum["TEXTURE"] = 5890] = "TEXTURE";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP"] = 34067] = "TEXTURE_CUBE_MAP";
    GLEnum[GLEnum["TEXTURE_BINDING_CUBE_MAP"] = 34068] = "TEXTURE_BINDING_CUBE_MAP";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
    GLEnum[GLEnum["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
    GLEnum[GLEnum["MAX_CUBE_MAP_TEXTURE_SIZE"] = 34076] = "MAX_CUBE_MAP_TEXTURE_SIZE";
    // TEXTURE0 - 31 0x84C0 - 0x84DF A texture unit.
    GLEnum[GLEnum["TEXTURE0"] = 33984] = "TEXTURE0";
    GLEnum[GLEnum["ACTIVE_TEXTURE"] = 34016] = "ACTIVE_TEXTURE";
    GLEnum[GLEnum["REPEAT"] = 10497] = "REPEAT";
    GLEnum[GLEnum["CLAMP_TO_EDGE"] = 33071] = "CLAMP_TO_EDGE";
    GLEnum[GLEnum["MIRRORED_REPEAT"] = 33648] = "MIRRORED_REPEAT";
    // Emulation
    GLEnum[GLEnum["TEXTURE_WIDTH"] = 4096] = "TEXTURE_WIDTH";
    GLEnum[GLEnum["TEXTURE_HEIGHT"] = 4097] = "TEXTURE_HEIGHT";
    // Uniform types
    GLEnum[GLEnum["FLOAT_VEC2"] = 35664] = "FLOAT_VEC2";
    GLEnum[GLEnum["FLOAT_VEC3"] = 35665] = "FLOAT_VEC3";
    GLEnum[GLEnum["FLOAT_VEC4"] = 35666] = "FLOAT_VEC4";
    GLEnum[GLEnum["INT_VEC2"] = 35667] = "INT_VEC2";
    GLEnum[GLEnum["INT_VEC3"] = 35668] = "INT_VEC3";
    GLEnum[GLEnum["INT_VEC4"] = 35669] = "INT_VEC4";
    GLEnum[GLEnum["BOOL"] = 35670] = "BOOL";
    GLEnum[GLEnum["BOOL_VEC2"] = 35671] = "BOOL_VEC2";
    GLEnum[GLEnum["BOOL_VEC3"] = 35672] = "BOOL_VEC3";
    GLEnum[GLEnum["BOOL_VEC4"] = 35673] = "BOOL_VEC4";
    GLEnum[GLEnum["FLOAT_MAT2"] = 35674] = "FLOAT_MAT2";
    GLEnum[GLEnum["FLOAT_MAT3"] = 35675] = "FLOAT_MAT3";
    GLEnum[GLEnum["FLOAT_MAT4"] = 35676] = "FLOAT_MAT4";
    GLEnum[GLEnum["SAMPLER_2D"] = 35678] = "SAMPLER_2D";
    GLEnum[GLEnum["SAMPLER_CUBE"] = 35680] = "SAMPLER_CUBE";
    // Shader precision-specified types
    GLEnum[GLEnum["LOW_FLOAT"] = 36336] = "LOW_FLOAT";
    GLEnum[GLEnum["MEDIUM_FLOAT"] = 36337] = "MEDIUM_FLOAT";
    GLEnum[GLEnum["HIGH_FLOAT"] = 36338] = "HIGH_FLOAT";
    GLEnum[GLEnum["LOW_INT"] = 36339] = "LOW_INT";
    GLEnum[GLEnum["MEDIUM_INT"] = 36340] = "MEDIUM_INT";
    GLEnum[GLEnum["HIGH_INT"] = 36341] = "HIGH_INT";
    // Framebuffers and renderbuffers
    GLEnum[GLEnum["FRAMEBUFFER"] = 36160] = "FRAMEBUFFER";
    GLEnum[GLEnum["RENDERBUFFER"] = 36161] = "RENDERBUFFER";
    GLEnum[GLEnum["RGBA4"] = 32854] = "RGBA4";
    GLEnum[GLEnum["RGB5_A1"] = 32855] = "RGB5_A1";
    GLEnum[GLEnum["RGB565"] = 36194] = "RGB565";
    GLEnum[GLEnum["DEPTH_COMPONENT16"] = 33189] = "DEPTH_COMPONENT16";
    GLEnum[GLEnum["STENCIL_INDEX"] = 6401] = "STENCIL_INDEX";
    GLEnum[GLEnum["STENCIL_INDEX8"] = 36168] = "STENCIL_INDEX8";
    GLEnum[GLEnum["DEPTH_STENCIL"] = 34041] = "DEPTH_STENCIL";
    GLEnum[GLEnum["RENDERBUFFER_WIDTH"] = 36162] = "RENDERBUFFER_WIDTH";
    GLEnum[GLEnum["RENDERBUFFER_HEIGHT"] = 36163] = "RENDERBUFFER_HEIGHT";
    GLEnum[GLEnum["RENDERBUFFER_INTERNAL_FORMAT"] = 36164] = "RENDERBUFFER_INTERNAL_FORMAT";
    GLEnum[GLEnum["RENDERBUFFER_RED_SIZE"] = 36176] = "RENDERBUFFER_RED_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_GREEN_SIZE"] = 36177] = "RENDERBUFFER_GREEN_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_BLUE_SIZE"] = 36178] = "RENDERBUFFER_BLUE_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_ALPHA_SIZE"] = 36179] = "RENDERBUFFER_ALPHA_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_DEPTH_SIZE"] = 36180] = "RENDERBUFFER_DEPTH_SIZE";
    GLEnum[GLEnum["RENDERBUFFER_STENCIL_SIZE"] = 36181] = "RENDERBUFFER_STENCIL_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"] = 36048] = "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"] = 36049] = "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"] = 36050] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"] = 36051] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE";
    GLEnum[GLEnum["COLOR_ATTACHMENT0"] = 36064] = "COLOR_ATTACHMENT0";
    GLEnum[GLEnum["DEPTH_ATTACHMENT"] = 36096] = "DEPTH_ATTACHMENT";
    GLEnum[GLEnum["STENCIL_ATTACHMENT"] = 36128] = "STENCIL_ATTACHMENT";
    GLEnum[GLEnum["DEPTH_STENCIL_ATTACHMENT"] = 33306] = "DEPTH_STENCIL_ATTACHMENT";
    GLEnum[GLEnum["NONE"] = 0] = "NONE";
    GLEnum[GLEnum["FRAMEBUFFER_COMPLETE"] = 36053] = "FRAMEBUFFER_COMPLETE";
    GLEnum[GLEnum["FRAMEBUFFER_INCOMPLETE_ATTACHMENT"] = 36054] = "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    GLEnum[GLEnum["FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"] = 36055] = "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    GLEnum[GLEnum["FRAMEBUFFER_INCOMPLETE_DIMENSIONS"] = 36057] = "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    GLEnum[GLEnum["FRAMEBUFFER_UNSUPPORTED"] = 36061] = "FRAMEBUFFER_UNSUPPORTED";
    GLEnum[GLEnum["FRAMEBUFFER_BINDING"] = 36006] = "FRAMEBUFFER_BINDING";
    GLEnum[GLEnum["RENDERBUFFER_BINDING"] = 36007] = "RENDERBUFFER_BINDING";
    GLEnum[GLEnum["READ_FRAMEBUFFER"] = 36008] = "READ_FRAMEBUFFER";
    GLEnum[GLEnum["DRAW_FRAMEBUFFER"] = 36009] = "DRAW_FRAMEBUFFER";
    GLEnum[GLEnum["MAX_RENDERBUFFER_SIZE"] = 34024] = "MAX_RENDERBUFFER_SIZE";
    GLEnum[GLEnum["INVALID_FRAMEBUFFER_OPERATION"] = 1286] = "INVALID_FRAMEBUFFER_OPERATION";
    // Pixel storage modes
    // Constants passed to pixelStorei().
    GLEnum[GLEnum["UNPACK_FLIP_Y_WEBGL"] = 37440] = "UNPACK_FLIP_Y_WEBGL";
    GLEnum[GLEnum["UNPACK_PREMULTIPLY_ALPHA_WEBGL"] = 37441] = "UNPACK_PREMULTIPLY_ALPHA_WEBGL";
    GLEnum[GLEnum["UNPACK_COLORSPACE_CONVERSION_WEBGL"] = 37443] = "UNPACK_COLORSPACE_CONVERSION_WEBGL";
    // Additional constants defined WebGL 2
    // These constants are defined on the WebGL2RenderingContext interface.
    // All WebGL 1 constants are also available in a WebGL 2 context.
    // Getting GL parameter information
    // Constants passed to getParameter()
    // to specify what information to return.
    GLEnum[GLEnum["READ_BUFFER"] = 3074] = "READ_BUFFER";
    GLEnum[GLEnum["UNPACK_ROW_LENGTH"] = 3314] = "UNPACK_ROW_LENGTH";
    GLEnum[GLEnum["UNPACK_SKIP_ROWS"] = 3315] = "UNPACK_SKIP_ROWS";
    GLEnum[GLEnum["UNPACK_SKIP_PIXELS"] = 3316] = "UNPACK_SKIP_PIXELS";
    GLEnum[GLEnum["PACK_ROW_LENGTH"] = 3330] = "PACK_ROW_LENGTH";
    GLEnum[GLEnum["PACK_SKIP_ROWS"] = 3331] = "PACK_SKIP_ROWS";
    GLEnum[GLEnum["PACK_SKIP_PIXELS"] = 3332] = "PACK_SKIP_PIXELS";
    GLEnum[GLEnum["TEXTURE_BINDING_3D"] = 32874] = "TEXTURE_BINDING_3D";
    GLEnum[GLEnum["UNPACK_SKIP_IMAGES"] = 32877] = "UNPACK_SKIP_IMAGES";
    GLEnum[GLEnum["UNPACK_IMAGE_HEIGHT"] = 32878] = "UNPACK_IMAGE_HEIGHT";
    GLEnum[GLEnum["MAX_3D_TEXTURE_SIZE"] = 32883] = "MAX_3D_TEXTURE_SIZE";
    GLEnum[GLEnum["MAX_ELEMENTS_VERTICES"] = 33000] = "MAX_ELEMENTS_VERTICES";
    GLEnum[GLEnum["MAX_ELEMENTS_INDICES"] = 33001] = "MAX_ELEMENTS_INDICES";
    GLEnum[GLEnum["MAX_TEXTURE_LOD_BIAS"] = 34045] = "MAX_TEXTURE_LOD_BIAS";
    GLEnum[GLEnum["MAX_FRAGMENT_UNIFORM_COMPONENTS"] = 35657] = "MAX_FRAGMENT_UNIFORM_COMPONENTS";
    GLEnum[GLEnum["MAX_VERTEX_UNIFORM_COMPONENTS"] = 35658] = "MAX_VERTEX_UNIFORM_COMPONENTS";
    GLEnum[GLEnum["MAX_ARRAY_TEXTURE_LAYERS"] = 35071] = "MAX_ARRAY_TEXTURE_LAYERS";
    GLEnum[GLEnum["MIN_PROGRAM_TEXEL_OFFSET"] = 35076] = "MIN_PROGRAM_TEXEL_OFFSET";
    GLEnum[GLEnum["MAX_PROGRAM_TEXEL_OFFSET"] = 35077] = "MAX_PROGRAM_TEXEL_OFFSET";
    GLEnum[GLEnum["MAX_VARYING_COMPONENTS"] = 35659] = "MAX_VARYING_COMPONENTS";
    GLEnum[GLEnum["FRAGMENT_SHADER_DERIVATIVE_HINT"] = 35723] = "FRAGMENT_SHADER_DERIVATIVE_HINT";
    GLEnum[GLEnum["RASTERIZER_DISCARD"] = 35977] = "RASTERIZER_DISCARD";
    GLEnum[GLEnum["VERTEX_ARRAY_BINDING"] = 34229] = "VERTEX_ARRAY_BINDING";
    GLEnum[GLEnum["MAX_VERTEX_OUTPUT_COMPONENTS"] = 37154] = "MAX_VERTEX_OUTPUT_COMPONENTS";
    GLEnum[GLEnum["MAX_FRAGMENT_INPUT_COMPONENTS"] = 37157] = "MAX_FRAGMENT_INPUT_COMPONENTS";
    GLEnum[GLEnum["MAX_SERVER_WAIT_TIMEOUT"] = 37137] = "MAX_SERVER_WAIT_TIMEOUT";
    GLEnum[GLEnum["MAX_ELEMENT_INDEX"] = 36203] = "MAX_ELEMENT_INDEX";
    // Textures
    // Constants passed to texParameteri(),
    // texParameterf(), bindTexture(), texImage2D(), and others.
    GLEnum[GLEnum["RED"] = 6403] = "RED";
    GLEnum[GLEnum["RGB8"] = 32849] = "RGB8";
    GLEnum[GLEnum["RGBA8"] = 32856] = "RGBA8";
    GLEnum[GLEnum["RGB10_A2"] = 32857] = "RGB10_A2";
    GLEnum[GLEnum["TEXTURE_3D"] = 32879] = "TEXTURE_3D";
    /** Sets the wrap parameter for texture coordinate  to either GL_CLAMP_TO_EDGE, GL_MIRRORED_REPEAT, or GL_REPEAT. G */
    GLEnum[GLEnum["TEXTURE_WRAP_R"] = 32882] = "TEXTURE_WRAP_R";
    GLEnum[GLEnum["TEXTURE_MIN_LOD"] = 33082] = "TEXTURE_MIN_LOD";
    GLEnum[GLEnum["TEXTURE_MAX_LOD"] = 33083] = "TEXTURE_MAX_LOD";
    GLEnum[GLEnum["TEXTURE_BASE_LEVEL"] = 33084] = "TEXTURE_BASE_LEVEL";
    GLEnum[GLEnum["TEXTURE_MAX_LEVEL"] = 33085] = "TEXTURE_MAX_LEVEL";
    GLEnum[GLEnum["TEXTURE_COMPARE_MODE"] = 34892] = "TEXTURE_COMPARE_MODE";
    GLEnum[GLEnum["TEXTURE_COMPARE_FUNC"] = 34893] = "TEXTURE_COMPARE_FUNC";
    GLEnum[GLEnum["SRGB"] = 35904] = "SRGB";
    GLEnum[GLEnum["SRGB8"] = 35905] = "SRGB8";
    GLEnum[GLEnum["SRGB8_ALPHA8"] = 35907] = "SRGB8_ALPHA8";
    GLEnum[GLEnum["COMPARE_REF_TO_TEXTURE"] = 34894] = "COMPARE_REF_TO_TEXTURE";
    GLEnum[GLEnum["RGBA32F"] = 34836] = "RGBA32F";
    GLEnum[GLEnum["RGB32F"] = 34837] = "RGB32F";
    GLEnum[GLEnum["RGBA16F"] = 34842] = "RGBA16F";
    GLEnum[GLEnum["RGB16F"] = 34843] = "RGB16F";
    GLEnum[GLEnum["TEXTURE_2D_ARRAY"] = 35866] = "TEXTURE_2D_ARRAY";
    GLEnum[GLEnum["TEXTURE_BINDING_2D_ARRAY"] = 35869] = "TEXTURE_BINDING_2D_ARRAY";
    GLEnum[GLEnum["R11F_G11F_B10F"] = 35898] = "R11F_G11F_B10F";
    GLEnum[GLEnum["RGB9_E5"] = 35901] = "RGB9_E5";
    GLEnum[GLEnum["RGBA32UI"] = 36208] = "RGBA32UI";
    GLEnum[GLEnum["RGB32UI"] = 36209] = "RGB32UI";
    GLEnum[GLEnum["RGBA16UI"] = 36214] = "RGBA16UI";
    GLEnum[GLEnum["RGB16UI"] = 36215] = "RGB16UI";
    GLEnum[GLEnum["RGBA8UI"] = 36220] = "RGBA8UI";
    GLEnum[GLEnum["RGB8UI"] = 36221] = "RGB8UI";
    GLEnum[GLEnum["RGBA32I"] = 36226] = "RGBA32I";
    GLEnum[GLEnum["RGB32I"] = 36227] = "RGB32I";
    GLEnum[GLEnum["RGBA16I"] = 36232] = "RGBA16I";
    GLEnum[GLEnum["RGB16I"] = 36233] = "RGB16I";
    GLEnum[GLEnum["RGBA8I"] = 36238] = "RGBA8I";
    GLEnum[GLEnum["RGB8I"] = 36239] = "RGB8I";
    GLEnum[GLEnum["RED_INTEGER"] = 36244] = "RED_INTEGER";
    GLEnum[GLEnum["RGB_INTEGER"] = 36248] = "RGB_INTEGER";
    GLEnum[GLEnum["RGBA_INTEGER"] = 36249] = "RGBA_INTEGER";
    GLEnum[GLEnum["R8"] = 33321] = "R8";
    GLEnum[GLEnum["RG8"] = 33323] = "RG8";
    GLEnum[GLEnum["R16F"] = 33325] = "R16F";
    GLEnum[GLEnum["R32F"] = 33326] = "R32F";
    GLEnum[GLEnum["RG16F"] = 33327] = "RG16F";
    GLEnum[GLEnum["RG32F"] = 33328] = "RG32F";
    GLEnum[GLEnum["R8I"] = 33329] = "R8I";
    GLEnum[GLEnum["R8UI"] = 33330] = "R8UI";
    GLEnum[GLEnum["R16I"] = 33331] = "R16I";
    GLEnum[GLEnum["R16UI"] = 33332] = "R16UI";
    GLEnum[GLEnum["R32I"] = 33333] = "R32I";
    GLEnum[GLEnum["R32UI"] = 33334] = "R32UI";
    GLEnum[GLEnum["RG8I"] = 33335] = "RG8I";
    GLEnum[GLEnum["RG8UI"] = 33336] = "RG8UI";
    GLEnum[GLEnum["RG16I"] = 33337] = "RG16I";
    GLEnum[GLEnum["RG16UI"] = 33338] = "RG16UI";
    GLEnum[GLEnum["RG32I"] = 33339] = "RG32I";
    GLEnum[GLEnum["RG32UI"] = 33340] = "RG32UI";
    GLEnum[GLEnum["R8_SNORM"] = 36756] = "R8_SNORM";
    GLEnum[GLEnum["RG8_SNORM"] = 36757] = "RG8_SNORM";
    GLEnum[GLEnum["RGB8_SNORM"] = 36758] = "RGB8_SNORM";
    GLEnum[GLEnum["RGBA8_SNORM"] = 36759] = "RGBA8_SNORM";
    GLEnum[GLEnum["RGB10_A2UI"] = 36975] = "RGB10_A2UI";
    /* covered by extension
    COMPRESSED_R11_EAC  = 0x9270,
    COMPRESSED_SIGNED_R11_EAC = 0x9271,
    COMPRESSED_RG11_EAC = 0x9272,
    COMPRESSED_SIGNED_RG11_EAC  = 0x9273,
    COMPRESSED_RGB8_ETC2  = 0x9274,
    COMPRESSED_SRGB8_ETC2 = 0x9275,
    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2  = 0x9276,
    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC  = 0x9277,
    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,
    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC  = 0x9279,
    */
    GLEnum[GLEnum["TEXTURE_IMMUTABLE_FORMAT"] = 37167] = "TEXTURE_IMMUTABLE_FORMAT";
    GLEnum[GLEnum["TEXTURE_IMMUTABLE_LEVELS"] = 33503] = "TEXTURE_IMMUTABLE_LEVELS";
    // Pixel types
    GLEnum[GLEnum["UNSIGNED_INT_2_10_10_10_REV"] = 33640] = "UNSIGNED_INT_2_10_10_10_REV";
    GLEnum[GLEnum["UNSIGNED_INT_10F_11F_11F_REV"] = 35899] = "UNSIGNED_INT_10F_11F_11F_REV";
    GLEnum[GLEnum["UNSIGNED_INT_5_9_9_9_REV"] = 35902] = "UNSIGNED_INT_5_9_9_9_REV";
    GLEnum[GLEnum["FLOAT_32_UNSIGNED_INT_24_8_REV"] = 36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";
    GLEnum[GLEnum["UNSIGNED_INT_24_8"] = 34042] = "UNSIGNED_INT_24_8";
    GLEnum[GLEnum["HALF_FLOAT"] = 5131] = "HALF_FLOAT";
    GLEnum[GLEnum["RG"] = 33319] = "RG";
    GLEnum[GLEnum["RG_INTEGER"] = 33320] = "RG_INTEGER";
    GLEnum[GLEnum["INT_2_10_10_10_REV"] = 36255] = "INT_2_10_10_10_REV";
    // Queries
    GLEnum[GLEnum["CURRENT_QUERY"] = 34917] = "CURRENT_QUERY";
    /** Returns a GLuint containing the query result. */
    GLEnum[GLEnum["QUERY_RESULT"] = 34918] = "QUERY_RESULT";
    /** Whether query result is available. */
    GLEnum[GLEnum["QUERY_RESULT_AVAILABLE"] = 34919] = "QUERY_RESULT_AVAILABLE";
    /** Occlusion query (if drawing passed depth test)  */
    GLEnum[GLEnum["ANY_SAMPLES_PASSED"] = 35887] = "ANY_SAMPLES_PASSED";
    /** Occlusion query less accurate/faster version */
    GLEnum[GLEnum["ANY_SAMPLES_PASSED_CONSERVATIVE"] = 36202] = "ANY_SAMPLES_PASSED_CONSERVATIVE";
    // Draw buffers
    GLEnum[GLEnum["MAX_DRAW_BUFFERS"] = 34852] = "MAX_DRAW_BUFFERS";
    GLEnum[GLEnum["DRAW_BUFFER0"] = 34853] = "DRAW_BUFFER0";
    GLEnum[GLEnum["DRAW_BUFFER1"] = 34854] = "DRAW_BUFFER1";
    GLEnum[GLEnum["DRAW_BUFFER2"] = 34855] = "DRAW_BUFFER2";
    GLEnum[GLEnum["DRAW_BUFFER3"] = 34856] = "DRAW_BUFFER3";
    GLEnum[GLEnum["DRAW_BUFFER4"] = 34857] = "DRAW_BUFFER4";
    GLEnum[GLEnum["DRAW_BUFFER5"] = 34858] = "DRAW_BUFFER5";
    GLEnum[GLEnum["DRAW_BUFFER6"] = 34859] = "DRAW_BUFFER6";
    GLEnum[GLEnum["DRAW_BUFFER7"] = 34860] = "DRAW_BUFFER7";
    GLEnum[GLEnum["DRAW_BUFFER8"] = 34861] = "DRAW_BUFFER8";
    GLEnum[GLEnum["DRAW_BUFFER9"] = 34862] = "DRAW_BUFFER9";
    GLEnum[GLEnum["DRAW_BUFFER10"] = 34863] = "DRAW_BUFFER10";
    GLEnum[GLEnum["DRAW_BUFFER11"] = 34864] = "DRAW_BUFFER11";
    GLEnum[GLEnum["DRAW_BUFFER12"] = 34865] = "DRAW_BUFFER12";
    GLEnum[GLEnum["DRAW_BUFFER13"] = 34866] = "DRAW_BUFFER13";
    GLEnum[GLEnum["DRAW_BUFFER14"] = 34867] = "DRAW_BUFFER14";
    GLEnum[GLEnum["DRAW_BUFFER15"] = 34868] = "DRAW_BUFFER15";
    GLEnum[GLEnum["MAX_COLOR_ATTACHMENTS"] = 36063] = "MAX_COLOR_ATTACHMENTS";
    GLEnum[GLEnum["COLOR_ATTACHMENT1"] = 36065] = "COLOR_ATTACHMENT1";
    GLEnum[GLEnum["COLOR_ATTACHMENT2"] = 36066] = "COLOR_ATTACHMENT2";
    GLEnum[GLEnum["COLOR_ATTACHMENT3"] = 36067] = "COLOR_ATTACHMENT3";
    GLEnum[GLEnum["COLOR_ATTACHMENT4"] = 36068] = "COLOR_ATTACHMENT4";
    GLEnum[GLEnum["COLOR_ATTACHMENT5"] = 36069] = "COLOR_ATTACHMENT5";
    GLEnum[GLEnum["COLOR_ATTACHMENT6"] = 36070] = "COLOR_ATTACHMENT6";
    GLEnum[GLEnum["COLOR_ATTACHMENT7"] = 36071] = "COLOR_ATTACHMENT7";
    GLEnum[GLEnum["COLOR_ATTACHMENT8"] = 36072] = "COLOR_ATTACHMENT8";
    GLEnum[GLEnum["COLOR_ATTACHMENT9"] = 36073] = "COLOR_ATTACHMENT9";
    GLEnum[GLEnum["COLOR_ATTACHMENT10"] = 36074] = "COLOR_ATTACHMENT10";
    GLEnum[GLEnum["COLOR_ATTACHMENT11"] = 36075] = "COLOR_ATTACHMENT11";
    GLEnum[GLEnum["COLOR_ATTACHMENT12"] = 36076] = "COLOR_ATTACHMENT12";
    GLEnum[GLEnum["COLOR_ATTACHMENT13"] = 36077] = "COLOR_ATTACHMENT13";
    GLEnum[GLEnum["COLOR_ATTACHMENT14"] = 36078] = "COLOR_ATTACHMENT14";
    GLEnum[GLEnum["COLOR_ATTACHMENT15"] = 36079] = "COLOR_ATTACHMENT15";
    // Samplers
    GLEnum[GLEnum["SAMPLER_3D"] = 35679] = "SAMPLER_3D";
    GLEnum[GLEnum["SAMPLER_2D_SHADOW"] = 35682] = "SAMPLER_2D_SHADOW";
    GLEnum[GLEnum["SAMPLER_2D_ARRAY"] = 36289] = "SAMPLER_2D_ARRAY";
    GLEnum[GLEnum["SAMPLER_2D_ARRAY_SHADOW"] = 36292] = "SAMPLER_2D_ARRAY_SHADOW";
    GLEnum[GLEnum["SAMPLER_CUBE_SHADOW"] = 36293] = "SAMPLER_CUBE_SHADOW";
    GLEnum[GLEnum["INT_SAMPLER_2D"] = 36298] = "INT_SAMPLER_2D";
    GLEnum[GLEnum["INT_SAMPLER_3D"] = 36299] = "INT_SAMPLER_3D";
    GLEnum[GLEnum["INT_SAMPLER_CUBE"] = 36300] = "INT_SAMPLER_CUBE";
    GLEnum[GLEnum["INT_SAMPLER_2D_ARRAY"] = 36303] = "INT_SAMPLER_2D_ARRAY";
    GLEnum[GLEnum["UNSIGNED_INT_SAMPLER_2D"] = 36306] = "UNSIGNED_INT_SAMPLER_2D";
    GLEnum[GLEnum["UNSIGNED_INT_SAMPLER_3D"] = 36307] = "UNSIGNED_INT_SAMPLER_3D";
    GLEnum[GLEnum["UNSIGNED_INT_SAMPLER_CUBE"] = 36308] = "UNSIGNED_INT_SAMPLER_CUBE";
    GLEnum[GLEnum["UNSIGNED_INT_SAMPLER_2D_ARRAY"] = 36311] = "UNSIGNED_INT_SAMPLER_2D_ARRAY";
    GLEnum[GLEnum["MAX_SAMPLES"] = 36183] = "MAX_SAMPLES";
    GLEnum[GLEnum["SAMPLER_BINDING"] = 35097] = "SAMPLER_BINDING";
    // Buffers
    GLEnum[GLEnum["PIXEL_PACK_BUFFER"] = 35051] = "PIXEL_PACK_BUFFER";
    GLEnum[GLEnum["PIXEL_UNPACK_BUFFER"] = 35052] = "PIXEL_UNPACK_BUFFER";
    GLEnum[GLEnum["PIXEL_PACK_BUFFER_BINDING"] = 35053] = "PIXEL_PACK_BUFFER_BINDING";
    GLEnum[GLEnum["PIXEL_UNPACK_BUFFER_BINDING"] = 35055] = "PIXEL_UNPACK_BUFFER_BINDING";
    GLEnum[GLEnum["COPY_READ_BUFFER"] = 36662] = "COPY_READ_BUFFER";
    GLEnum[GLEnum["COPY_WRITE_BUFFER"] = 36663] = "COPY_WRITE_BUFFER";
    GLEnum[GLEnum["COPY_READ_BUFFER_BINDING"] = 36662] = "COPY_READ_BUFFER_BINDING";
    GLEnum[GLEnum["COPY_WRITE_BUFFER_BINDING"] = 36663] = "COPY_WRITE_BUFFER_BINDING";
    // Data types
    GLEnum[GLEnum["FLOAT_MAT2x3"] = 35685] = "FLOAT_MAT2x3";
    GLEnum[GLEnum["FLOAT_MAT2x4"] = 35686] = "FLOAT_MAT2x4";
    GLEnum[GLEnum["FLOAT_MAT3x2"] = 35687] = "FLOAT_MAT3x2";
    GLEnum[GLEnum["FLOAT_MAT3x4"] = 35688] = "FLOAT_MAT3x4";
    GLEnum[GLEnum["FLOAT_MAT4x2"] = 35689] = "FLOAT_MAT4x2";
    GLEnum[GLEnum["FLOAT_MAT4x3"] = 35690] = "FLOAT_MAT4x3";
    GLEnum[GLEnum["UNSIGNED_INT_VEC2"] = 36294] = "UNSIGNED_INT_VEC2";
    GLEnum[GLEnum["UNSIGNED_INT_VEC3"] = 36295] = "UNSIGNED_INT_VEC3";
    GLEnum[GLEnum["UNSIGNED_INT_VEC4"] = 36296] = "UNSIGNED_INT_VEC4";
    GLEnum[GLEnum["UNSIGNED_NORMALIZED"] = 35863] = "UNSIGNED_NORMALIZED";
    GLEnum[GLEnum["SIGNED_NORMALIZED"] = 36764] = "SIGNED_NORMALIZED";
    // Vertex attributes
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_INTEGER"] = 35069] = "VERTEX_ATTRIB_ARRAY_INTEGER";
    GLEnum[GLEnum["VERTEX_ATTRIB_ARRAY_DIVISOR"] = 35070] = "VERTEX_ATTRIB_ARRAY_DIVISOR";
    // Transform feedback
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER_MODE"] = 35967] = "TRANSFORM_FEEDBACK_BUFFER_MODE";
    GLEnum[GLEnum["MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"] = 35968] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_VARYINGS"] = 35971] = "TRANSFORM_FEEDBACK_VARYINGS";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER_START"] = 35972] = "TRANSFORM_FEEDBACK_BUFFER_START";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER_SIZE"] = 35973] = "TRANSFORM_FEEDBACK_BUFFER_SIZE";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"] = 35976] = "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN";
    GLEnum[GLEnum["MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"] = 35978] = "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS";
    GLEnum[GLEnum["MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"] = 35979] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS";
    GLEnum[GLEnum["INTERLEAVED_ATTRIBS"] = 35980] = "INTERLEAVED_ATTRIBS";
    GLEnum[GLEnum["SEPARATE_ATTRIBS"] = 35981] = "SEPARATE_ATTRIBS";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER"] = 35982] = "TRANSFORM_FEEDBACK_BUFFER";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BUFFER_BINDING"] = 35983] = "TRANSFORM_FEEDBACK_BUFFER_BINDING";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK"] = 36386] = "TRANSFORM_FEEDBACK";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_PAUSED"] = 36387] = "TRANSFORM_FEEDBACK_PAUSED";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_ACTIVE"] = 36388] = "TRANSFORM_FEEDBACK_ACTIVE";
    GLEnum[GLEnum["TRANSFORM_FEEDBACK_BINDING"] = 36389] = "TRANSFORM_FEEDBACK_BINDING";
    // Framebuffers and renderbuffers
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"] = 33296] = "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"] = 33297] = "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_RED_SIZE"] = 33298] = "FRAMEBUFFER_ATTACHMENT_RED_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"] = 33299] = "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"] = 33300] = "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"] = 33301] = "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"] = 33302] = "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"] = 33303] = "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE";
    GLEnum[GLEnum["FRAMEBUFFER_DEFAULT"] = 33304] = "FRAMEBUFFER_DEFAULT";
    // DEPTH_STENCIL_ATTACHMENT  = 0x821A,
    // DEPTH_STENCIL = 0x84F9,
    GLEnum[GLEnum["DEPTH24_STENCIL8"] = 35056] = "DEPTH24_STENCIL8";
    GLEnum[GLEnum["DRAW_FRAMEBUFFER_BINDING"] = 36006] = "DRAW_FRAMEBUFFER_BINDING";
    GLEnum[GLEnum["READ_FRAMEBUFFER_BINDING"] = 36010] = "READ_FRAMEBUFFER_BINDING";
    GLEnum[GLEnum["RENDERBUFFER_SAMPLES"] = 36011] = "RENDERBUFFER_SAMPLES";
    GLEnum[GLEnum["FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"] = 36052] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER";
    GLEnum[GLEnum["FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"] = 36182] = "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE";
    // Uniforms
    GLEnum[GLEnum["UNIFORM_BUFFER"] = 35345] = "UNIFORM_BUFFER";
    GLEnum[GLEnum["UNIFORM_BUFFER_BINDING"] = 35368] = "UNIFORM_BUFFER_BINDING";
    GLEnum[GLEnum["UNIFORM_BUFFER_START"] = 35369] = "UNIFORM_BUFFER_START";
    GLEnum[GLEnum["UNIFORM_BUFFER_SIZE"] = 35370] = "UNIFORM_BUFFER_SIZE";
    GLEnum[GLEnum["MAX_VERTEX_UNIFORM_BLOCKS"] = 35371] = "MAX_VERTEX_UNIFORM_BLOCKS";
    GLEnum[GLEnum["MAX_FRAGMENT_UNIFORM_BLOCKS"] = 35373] = "MAX_FRAGMENT_UNIFORM_BLOCKS";
    GLEnum[GLEnum["MAX_COMBINED_UNIFORM_BLOCKS"] = 35374] = "MAX_COMBINED_UNIFORM_BLOCKS";
    GLEnum[GLEnum["MAX_UNIFORM_BUFFER_BINDINGS"] = 35375] = "MAX_UNIFORM_BUFFER_BINDINGS";
    GLEnum[GLEnum["MAX_UNIFORM_BLOCK_SIZE"] = 35376] = "MAX_UNIFORM_BLOCK_SIZE";
    GLEnum[GLEnum["MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"] = 35377] = "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS";
    GLEnum[GLEnum["MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"] = 35379] = "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS";
    GLEnum[GLEnum["UNIFORM_BUFFER_OFFSET_ALIGNMENT"] = 35380] = "UNIFORM_BUFFER_OFFSET_ALIGNMENT";
    GLEnum[GLEnum["ACTIVE_UNIFORM_BLOCKS"] = 35382] = "ACTIVE_UNIFORM_BLOCKS";
    GLEnum[GLEnum["UNIFORM_TYPE"] = 35383] = "UNIFORM_TYPE";
    GLEnum[GLEnum["UNIFORM_SIZE"] = 35384] = "UNIFORM_SIZE";
    GLEnum[GLEnum["UNIFORM_BLOCK_INDEX"] = 35386] = "UNIFORM_BLOCK_INDEX";
    GLEnum[GLEnum["UNIFORM_OFFSET"] = 35387] = "UNIFORM_OFFSET";
    GLEnum[GLEnum["UNIFORM_ARRAY_STRIDE"] = 35388] = "UNIFORM_ARRAY_STRIDE";
    GLEnum[GLEnum["UNIFORM_MATRIX_STRIDE"] = 35389] = "UNIFORM_MATRIX_STRIDE";
    GLEnum[GLEnum["UNIFORM_IS_ROW_MAJOR"] = 35390] = "UNIFORM_IS_ROW_MAJOR";
    GLEnum[GLEnum["UNIFORM_BLOCK_BINDING"] = 35391] = "UNIFORM_BLOCK_BINDING";
    GLEnum[GLEnum["UNIFORM_BLOCK_DATA_SIZE"] = 35392] = "UNIFORM_BLOCK_DATA_SIZE";
    GLEnum[GLEnum["UNIFORM_BLOCK_ACTIVE_UNIFORMS"] = 35394] = "UNIFORM_BLOCK_ACTIVE_UNIFORMS";
    GLEnum[GLEnum["UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"] = 35395] = "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES";
    GLEnum[GLEnum["UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"] = 35396] = "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER";
    GLEnum[GLEnum["UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"] = 35398] = "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER";
    // Sync objects
    GLEnum[GLEnum["OBJECT_TYPE"] = 37138] = "OBJECT_TYPE";
    GLEnum[GLEnum["SYNC_CONDITION"] = 37139] = "SYNC_CONDITION";
    GLEnum[GLEnum["SYNC_STATUS"] = 37140] = "SYNC_STATUS";
    GLEnum[GLEnum["SYNC_FLAGS"] = 37141] = "SYNC_FLAGS";
    GLEnum[GLEnum["SYNC_FENCE"] = 37142] = "SYNC_FENCE";
    GLEnum[GLEnum["SYNC_GPU_COMMANDS_COMPLETE"] = 37143] = "SYNC_GPU_COMMANDS_COMPLETE";
    GLEnum[GLEnum["UNSIGNALED"] = 37144] = "UNSIGNALED";
    GLEnum[GLEnum["SIGNALED"] = 37145] = "SIGNALED";
    GLEnum[GLEnum["ALREADY_SIGNALED"] = 37146] = "ALREADY_SIGNALED";
    GLEnum[GLEnum["TIMEOUT_EXPIRED"] = 37147] = "TIMEOUT_EXPIRED";
    GLEnum[GLEnum["CONDITION_SATISFIED"] = 37148] = "CONDITION_SATISFIED";
    GLEnum[GLEnum["WAIT_FAILED"] = 37149] = "WAIT_FAILED";
    GLEnum[GLEnum["SYNC_FLUSH_COMMANDS_BIT"] = 1] = "SYNC_FLUSH_COMMANDS_BIT";
    // Miscellaneous constants
    GLEnum[GLEnum["COLOR"] = 6144] = "COLOR";
    GLEnum[GLEnum["DEPTH"] = 6145] = "DEPTH";
    GLEnum[GLEnum["STENCIL"] = 6146] = "STENCIL";
    GLEnum[GLEnum["MIN"] = 32775] = "MIN";
    GLEnum[GLEnum["MAX"] = 32776] = "MAX";
    GLEnum[GLEnum["DEPTH_COMPONENT24"] = 33190] = "DEPTH_COMPONENT24";
    GLEnum[GLEnum["STREAM_READ"] = 35041] = "STREAM_READ";
    GLEnum[GLEnum["STREAM_COPY"] = 35042] = "STREAM_COPY";
    GLEnum[GLEnum["STATIC_READ"] = 35045] = "STATIC_READ";
    GLEnum[GLEnum["STATIC_COPY"] = 35046] = "STATIC_COPY";
    GLEnum[GLEnum["DYNAMIC_READ"] = 35049] = "DYNAMIC_READ";
    GLEnum[GLEnum["DYNAMIC_COPY"] = 35050] = "DYNAMIC_COPY";
    GLEnum[GLEnum["DEPTH_COMPONENT32F"] = 36012] = "DEPTH_COMPONENT32F";
    GLEnum[GLEnum["DEPTH32F_STENCIL8"] = 36013] = "DEPTH32F_STENCIL8";
    GLEnum[GLEnum["INVALID_INDEX"] = 4294967295] = "INVALID_INDEX";
    GLEnum[GLEnum["TIMEOUT_IGNORED"] = -1] = "TIMEOUT_IGNORED";
    GLEnum[GLEnum["MAX_CLIENT_WAIT_TIMEOUT_WEBGL"] = 37447] = "MAX_CLIENT_WAIT_TIMEOUT_WEBGL";
    // Constants defined in WebGL extensions
    // WEBGL_debug_renderer_info
    /** Passed to getParameter to get the vendor string of the graphics driver. */
    GLEnum[GLEnum["UNMASKED_VENDOR_WEBGL"] = 37445] = "UNMASKED_VENDOR_WEBGL";
    /** Passed to getParameter to get the renderer string of the graphics driver. */
    GLEnum[GLEnum["UNMASKED_RENDERER_WEBGL"] = 37446] = "UNMASKED_RENDERER_WEBGL";
    // EXT_texture_filter_anisotropic
    /** Returns the maximum available anisotropy. */
    GLEnum[GLEnum["MAX_TEXTURE_MAX_ANISOTROPY_EXT"] = 34047] = "MAX_TEXTURE_MAX_ANISOTROPY_EXT";
    /** Passed to texParameter to set the desired maximum anisotropy for a texture. */
    GLEnum[GLEnum["TEXTURE_MAX_ANISOTROPY_EXT"] = 34046] = "TEXTURE_MAX_ANISOTROPY_EXT";
    // EXT_texture_norm16 - https://khronos.org/registry/webgl/extensions/EXT_texture_norm16/
    GLEnum[GLEnum["R16_EXT"] = 33322] = "R16_EXT";
    GLEnum[GLEnum["RG16_EXT"] = 33324] = "RG16_EXT";
    GLEnum[GLEnum["RGB16_EXT"] = 32852] = "RGB16_EXT";
    GLEnum[GLEnum["RGBA16_EXT"] = 32859] = "RGBA16_EXT";
    GLEnum[GLEnum["R16_SNORM_EXT"] = 36760] = "R16_SNORM_EXT";
    GLEnum[GLEnum["RG16_SNORM_EXT"] = 36761] = "RG16_SNORM_EXT";
    GLEnum[GLEnum["RGB16_SNORM_EXT"] = 36762] = "RGB16_SNORM_EXT";
    GLEnum[GLEnum["RGBA16_SNORM_EXT"] = 36763] = "RGBA16_SNORM_EXT";
    // WEBGL_compressed_texture_s3tc (BC1, BC2, BC3)
    /** A DXT1-compressed image in an RGB image format. */
    GLEnum[GLEnum["COMPRESSED_RGB_S3TC_DXT1_EXT"] = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
    /** A DXT1-compressed image in an RGB image format with a simple on/off alpha value. */
    GLEnum[GLEnum["COMPRESSED_RGBA_S3TC_DXT1_EXT"] = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
    /** A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression. */
    GLEnum[GLEnum["COMPRESSED_RGBA_S3TC_DXT3_EXT"] = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
    /** A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3 compression in how the alpha compression is done. */
    GLEnum[GLEnum["COMPRESSED_RGBA_S3TC_DXT5_EXT"] = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
    // WEBGL_compressed_texture_s3tc_srgb (BC1, BC2, BC3 -  SRGB)
    GLEnum[GLEnum["COMPRESSED_SRGB_S3TC_DXT1_EXT"] = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
    GLEnum[GLEnum["COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"] = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
    GLEnum[GLEnum["COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"] = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
    GLEnum[GLEnum["COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"] = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
    // WEBGL_compressed_texture_rgtc (BC4, BC5)
    GLEnum[GLEnum["COMPRESSED_RED_RGTC1_EXT"] = 36283] = "COMPRESSED_RED_RGTC1_EXT";
    GLEnum[GLEnum["COMPRESSED_SIGNED_RED_RGTC1_EXT"] = 36284] = "COMPRESSED_SIGNED_RED_RGTC1_EXT";
    GLEnum[GLEnum["COMPRESSED_RED_GREEN_RGTC2_EXT"] = 36285] = "COMPRESSED_RED_GREEN_RGTC2_EXT";
    GLEnum[GLEnum["COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"] = 36286] = "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT";
    // WEBGL_compressed_texture_bptc (BC6, BC7)
    GLEnum[GLEnum["COMPRESSED_RGBA_BPTC_UNORM_EXT"] = 36492] = "COMPRESSED_RGBA_BPTC_UNORM_EXT";
    GLEnum[GLEnum["COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT"] = 36493] = "COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT";
    GLEnum[GLEnum["COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT"] = 36494] = "COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT";
    GLEnum[GLEnum["COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT"] = 36495] = "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT";
    // WEBGL_compressed_texture_es3
    /** One-channel (red) unsigned format compression. */
    GLEnum[GLEnum["COMPRESSED_R11_EAC"] = 37488] = "COMPRESSED_R11_EAC";
    /** One-channel (red) signed format compression. */
    GLEnum[GLEnum["COMPRESSED_SIGNED_R11_EAC"] = 37489] = "COMPRESSED_SIGNED_R11_EAC";
    /** Two-channel (red and green) unsigned format compression. */
    GLEnum[GLEnum["COMPRESSED_RG11_EAC"] = 37490] = "COMPRESSED_RG11_EAC";
    /** Two-channel (red and green) signed format compression. */
    GLEnum[GLEnum["COMPRESSED_SIGNED_RG11_EAC"] = 37491] = "COMPRESSED_SIGNED_RG11_EAC";
    /** Compresses RGB8 data with no alpha channel. */
    GLEnum[GLEnum["COMPRESSED_RGB8_ETC2"] = 37492] = "COMPRESSED_RGB8_ETC2";
    /** Compresses RGBA8 data. The RGB part is encoded the same as RGB_ETC2, but the alpha part is encoded separately. */
    GLEnum[GLEnum["COMPRESSED_RGBA8_ETC2_EAC"] = 37493] = "COMPRESSED_RGBA8_ETC2_EAC";
    /** Compresses sRGB8 data with no alpha channel. */
    GLEnum[GLEnum["COMPRESSED_SRGB8_ETC2"] = 37494] = "COMPRESSED_SRGB8_ETC2";
    /** Compresses sRGBA8 data. The sRGB part is encoded the same as SRGB_ETC2, but the alpha part is encoded separately. */
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"] = 37495] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";
    /** Similar to RGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent. */
    GLEnum[GLEnum["COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37496] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
    /** Similar to SRGB8_ETC, but with ability to punch through the alpha channel, which means to make it completely opaque or transparent. */
    GLEnum[GLEnum["COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37497] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
    // WEBGL_compressed_texture_pvrtc
    /** RGB compression in 4-bit mode. One block for each 4×4 pixels. */
    GLEnum[GLEnum["COMPRESSED_RGB_PVRTC_4BPPV1_IMG"] = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
    /** RGBA compression in 4-bit mode. One block for each 4×4 pixels. */
    GLEnum[GLEnum["COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
    /** RGB compression in 2-bit mode. One block for each 8×4 pixels. */
    GLEnum[GLEnum["COMPRESSED_RGB_PVRTC_2BPPV1_IMG"] = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
    /** RGBA compression in 2-bit mode. One block for each 8×4 pixels. */
    GLEnum[GLEnum["COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
    // WEBGL_compressed_texture_etc1
    /** Compresses 24-bit RGB data with no alpha channel. */
    GLEnum[GLEnum["COMPRESSED_RGB_ETC1_WEBGL"] = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
    // WEBGL_compressed_texture_atc
    GLEnum[GLEnum["COMPRESSED_RGB_ATC_WEBGL"] = 35986] = "COMPRESSED_RGB_ATC_WEBGL";
    GLEnum[GLEnum["COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL"] = 35986] = "COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL";
    GLEnum[GLEnum["COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL"] = 34798] = "COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL";
    // WEBGL_compressed_texture_astc
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_4x4_KHR"] = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_5x4_KHR"] = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_5x5_KHR"] = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_6x5_KHR"] = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_6x6_KHR"] = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_8x5_KHR"] = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_8x6_KHR"] = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_8x8_KHR"] = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_10x5_KHR"] = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_10x6_KHR"] = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_10x8_KHR"] = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_10x10_KHR"] = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_12x10_KHR"] = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR";
    GLEnum[GLEnum["COMPRESSED_RGBA_ASTC_12x12_KHR"] = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"] = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"] = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"] = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"] = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"] = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"] = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"] = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"] = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"] = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"] = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"] = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"] = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"] = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR";
    GLEnum[GLEnum["COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"] = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR";
    // EXT_disjoint_timer_query
    /** The number of bits used to hold the query result for the given target. */
    GLEnum[GLEnum["QUERY_COUNTER_BITS_EXT"] = 34916] = "QUERY_COUNTER_BITS_EXT";
    /** The currently active query. */
    GLEnum[GLEnum["CURRENT_QUERY_EXT"] = 34917] = "CURRENT_QUERY_EXT";
    /** The query result. */
    GLEnum[GLEnum["QUERY_RESULT_EXT"] = 34918] = "QUERY_RESULT_EXT";
    /** A Boolean indicating whether or not a query result is available. */
    GLEnum[GLEnum["QUERY_RESULT_AVAILABLE_EXT"] = 34919] = "QUERY_RESULT_AVAILABLE_EXT";
    /** Elapsed time (in nanoseconds). */
    GLEnum[GLEnum["TIME_ELAPSED_EXT"] = 35007] = "TIME_ELAPSED_EXT";
    /** The current time. */
    GLEnum[GLEnum["TIMESTAMP_EXT"] = 36392] = "TIMESTAMP_EXT";
    /** A Boolean indicating whether or not the GPU performed any disjoint operation (lost context) */
    GLEnum[GLEnum["GPU_DISJOINT_EXT"] = 36795] = "GPU_DISJOINT_EXT";
    // KHR_parallel_shader_compile https://registry.khronos.org/webgl/extensions/KHR_parallel_shader_compile
    /** a non-blocking poll operation, so that compile/link status availability can be queried without potentially incurring stalls */
    GLEnum[GLEnum["COMPLETION_STATUS_KHR"] = 37297] = "COMPLETION_STATUS_KHR";
    // EXT_depth_clamp https://registry.khronos.org/webgl/extensions/EXT_depth_clamp/
    /** Disables depth clipping */
    GLEnum[GLEnum["DEPTH_CLAMP_EXT"] = 34383] = "DEPTH_CLAMP_EXT";
    // WEBGL_provoking_vertex https://registry.khronos.org/webgl/extensions/WEBGL_provoking_vertex/
    /** Values of first vertex in primitive are used for flat shading */
    GLEnum[GLEnum["FIRST_VERTEX_CONVENTION_WEBGL"] = 36429] = "FIRST_VERTEX_CONVENTION_WEBGL";
    /** Values of first vertex in primitive are used for flat shading */
    GLEnum[GLEnum["LAST_VERTEX_CONVENTION_WEBGL"] = 36430] = "LAST_VERTEX_CONVENTION_WEBGL";
    /** Controls which vertex in primitive is used for flat shading */
    GLEnum[GLEnum["PROVOKING_VERTEX_WEBL"] = 36431] = "PROVOKING_VERTEX_WEBL";
    // WEBGL_polygon_mode https://registry.khronos.org/webgl/extensions/WEBGL_polygon_mode/
    GLEnum[GLEnum["POLYGON_MODE_WEBGL"] = 2880] = "POLYGON_MODE_WEBGL";
    GLEnum[GLEnum["POLYGON_OFFSET_LINE_WEBGL"] = 10754] = "POLYGON_OFFSET_LINE_WEBGL";
    GLEnum[GLEnum["LINE_WEBGL"] = 6913] = "LINE_WEBGL";
    GLEnum[GLEnum["FILL_WEBGL"] = 6914] = "FILL_WEBGL";
    // WEBGL_clip_cull_distance https://registry.khronos.org/webgl/extensions/WEBGL_clip_cull_distance/
    /** Max clip distances */
    GLEnum[GLEnum["MAX_CLIP_DISTANCES_WEBGL"] = 3378] = "MAX_CLIP_DISTANCES_WEBGL";
    /** Max cull distances */
    GLEnum[GLEnum["MAX_CULL_DISTANCES_WEBGL"] = 33529] = "MAX_CULL_DISTANCES_WEBGL";
    /** Max clip and cull distances */
    GLEnum[GLEnum["MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL"] = 33530] = "MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL";
    /** Enable gl_ClipDistance[0] and gl_CullDistance[0] */
    GLEnum[GLEnum["CLIP_DISTANCE0_WEBGL"] = 12288] = "CLIP_DISTANCE0_WEBGL";
    /** Enable gl_ClipDistance[1] and gl_CullDistance[1] */
    GLEnum[GLEnum["CLIP_DISTANCE1_WEBGL"] = 12289] = "CLIP_DISTANCE1_WEBGL";
    /** Enable gl_ClipDistance[2] and gl_CullDistance[2] */
    GLEnum[GLEnum["CLIP_DISTANCE2_WEBGL"] = 12290] = "CLIP_DISTANCE2_WEBGL";
    /** Enable gl_ClipDistance[3] and gl_CullDistance[3] */
    GLEnum[GLEnum["CLIP_DISTANCE3_WEBGL"] = 12291] = "CLIP_DISTANCE3_WEBGL";
    /** Enable gl_ClipDistance[4] and gl_CullDistance[4] */
    GLEnum[GLEnum["CLIP_DISTANCE4_WEBGL"] = 12292] = "CLIP_DISTANCE4_WEBGL";
    /** Enable gl_ClipDistance[5] and gl_CullDistance[5] */
    GLEnum[GLEnum["CLIP_DISTANCE5_WEBGL"] = 12293] = "CLIP_DISTANCE5_WEBGL";
    /** Enable gl_ClipDistance[6] and gl_CullDistance[6] */
    GLEnum[GLEnum["CLIP_DISTANCE6_WEBGL"] = 12294] = "CLIP_DISTANCE6_WEBGL";
    /** Enable gl_ClipDistance[7] and gl_CullDistance[7] */
    GLEnum[GLEnum["CLIP_DISTANCE7_WEBGL"] = 12295] = "CLIP_DISTANCE7_WEBGL";
    /** EXT_polygon_offset_clamp https://registry.khronos.org/webgl/extensions/EXT_polygon_offset_clamp/ */
    GLEnum[GLEnum["POLYGON_OFFSET_CLAMP_EXT"] = 36379] = "POLYGON_OFFSET_CLAMP_EXT";
    /** EXT_clip_control https://registry.khronos.org/webgl/extensions/EXT_clip_control/ */
    GLEnum[GLEnum["LOWER_LEFT_EXT"] = 36001] = "LOWER_LEFT_EXT";
    GLEnum[GLEnum["UPPER_LEFT_EXT"] = 36002] = "UPPER_LEFT_EXT";
    GLEnum[GLEnum["NEGATIVE_ONE_TO_ONE_EXT"] = 37726] = "NEGATIVE_ONE_TO_ONE_EXT";
    GLEnum[GLEnum["ZERO_TO_ONE_EXT"] = 37727] = "ZERO_TO_ONE_EXT";
    GLEnum[GLEnum["CLIP_ORIGIN_EXT"] = 37724] = "CLIP_ORIGIN_EXT";
    GLEnum[GLEnum["CLIP_DEPTH_MODE_EXT"] = 37725] = "CLIP_DEPTH_MODE_EXT";
    /** WEBGL_blend_func_extended https://registry.khronos.org/webgl/extensions/WEBGL_blend_func_extended/ */
    GLEnum[GLEnum["SRC1_COLOR_WEBGL"] = 35065] = "SRC1_COLOR_WEBGL";
    GLEnum[GLEnum["SRC1_ALPHA_WEBGL"] = 34185] = "SRC1_ALPHA_WEBGL";
    GLEnum[GLEnum["ONE_MINUS_SRC1_COLOR_WEBGL"] = 35066] = "ONE_MINUS_SRC1_COLOR_WEBGL";
    GLEnum[GLEnum["ONE_MINUS_SRC1_ALPHA_WEBGL"] = 35067] = "ONE_MINUS_SRC1_ALPHA_WEBGL";
    GLEnum[GLEnum["MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL"] = 35068] = "MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL";
    /** EXT_texture_mirror_clamp_to_edge https://registry.khronos.org/webgl/extensions/EXT_texture_mirror_clamp_to_edge/ */
    GLEnum[GLEnum["MIRROR_CLAMP_TO_EDGE_EXT"] = 34627] = "MIRROR_CLAMP_TO_EDGE_EXT";
})(GLEnum || (GLEnum = {}));



}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/attribute-utils/get-attribute-from-layouts.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getAttributeInfosByLocation: function() { return getAttributeInfosByLocation; },
  getAttributeInfosFromLayouts: function() { return getAttributeInfosFromLayouts; },
  mergeShaderLayout: function() { return mergeShaderLayout; }
});
/* harmony import */var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _type_utils_decode_attribute_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-attribute-type.js");
/* harmony import */var _type_utils_decode_vertex_format_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-vertex-format.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Map from "attribute names" to "resolved attribute infos"
 * containing information about both buffer layouts and shader attribute declarations
 */
function getAttributeInfosFromLayouts(shaderLayout, bufferLayout) {
    const attributeInfos = {};
    for (const attribute of shaderLayout.attributes) {
        attributeInfos[attribute.name] = getAttributeInfoFromLayouts(shaderLayout, bufferLayout, attribute.name);
    }
    return attributeInfos;
}
/**
 * Array indexed by "location" holding "resolved attribute infos"
 */
function getAttributeInfosByLocation(shaderLayout, bufferLayout, maxVertexAttributes = 16) {
    const attributeInfos = getAttributeInfosFromLayouts(shaderLayout, bufferLayout);
    const locationInfos = new Array(maxVertexAttributes).fill(null);
    for (const attributeInfo of Object.values(attributeInfos)) {
        locationInfos[attributeInfo.location] = attributeInfo;
    }
    return locationInfos;
}
/**
 * Get the combined information from a shader layout and a buffer layout for a specific attribute
 */
function getAttributeInfoFromLayouts(shaderLayout, bufferLayout, name) {
    const shaderDeclaration = getAttributeFromShaderLayout(shaderLayout, name);
    const bufferMapping = getAttributeFromBufferLayout(bufferLayout, name);
    // TODO should no longer happen
    if (!shaderDeclaration) {
        //  || !bufferMapping
        return null;
    }
    const attributeTypeInfo = (0,_type_utils_decode_attribute_type_js__WEBPACK_IMPORTED_MODULE_0__.decodeShaderAttributeType)(shaderDeclaration.type);
    const vertexFormat = bufferMapping?.vertexFormat || attributeTypeInfo.defaultVertexFormat;
    const vertexFormatInfo = (0,_type_utils_decode_vertex_format_js__WEBPACK_IMPORTED_MODULE_1__.decodeVertexFormat)(vertexFormat);
    return {
        attributeName: bufferMapping?.attributeName || shaderDeclaration.name,
        bufferName: bufferMapping?.bufferName || shaderDeclaration.name,
        location: shaderDeclaration.location,
        shaderType: shaderDeclaration.type,
        shaderDataType: attributeTypeInfo.dataType,
        shaderComponents: attributeTypeInfo.components,
        vertexFormat,
        bufferDataType: vertexFormatInfo.type,
        bufferComponents: vertexFormatInfo.components,
        // normalized is a property of the buffer's vertex format
        normalized: vertexFormatInfo.normalized,
        // integer is a property of the shader declaration
        integer: attributeTypeInfo.integer,
        stepMode: bufferMapping?.stepMode || shaderDeclaration.stepMode,
        byteOffset: bufferMapping?.byteOffset || 0,
        byteStride: bufferMapping?.byteStride || 0
    };
}
function getAttributeFromShaderLayout(shaderLayout, name) {
    const attribute = shaderLayout.attributes.find(attr => attr.name === name);
    if (!attribute) {
        _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`shader layout attribute "${name}" not present in shader`);
    }
    return attribute || null;
}
function getAttributeFromBufferLayout(bufferLayouts, name) {
    // Check that bufferLayouts are valid (each either has format or attribute)
    checkBufferLayouts(bufferLayouts);
    let bufferLayoutInfo = getAttributeFromShortHand(bufferLayouts, name);
    if (bufferLayoutInfo) {
        return bufferLayoutInfo;
    }
    bufferLayoutInfo = getAttributeFromAttributesList(bufferLayouts, name);
    if (bufferLayoutInfo) {
        return bufferLayoutInfo;
    }
    // Didn't find...
    _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`layout for attribute "${name}" not present in buffer layout`);
    return null;
}
/** Check that bufferLayouts are valid (each either has format or attribute) */
function checkBufferLayouts(bufferLayouts) {
    for (const bufferLayout of bufferLayouts) {
        if ((bufferLayout.attributes && bufferLayout.format) ||
            (!bufferLayout.attributes && !bufferLayout.format)) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`BufferLayout ${name} must have either 'attributes' or 'format' field`);
        }
    }
}
/** Get attribute from format shorthand if specified */
function getAttributeFromShortHand(bufferLayouts, name) {
    for (const bufferLayout of bufferLayouts) {
        if (bufferLayout.format && bufferLayout.name === name) {
            return {
                attributeName: bufferLayout.name,
                bufferName: name,
                stepMode: bufferLayout.stepMode,
                vertexFormat: bufferLayout.format,
                // If offset is needed, use `attributes` field.
                byteOffset: 0,
                byteStride: bufferLayout.byteStride || 0
            };
        }
    }
    return null;
}
/**
 * Search attribute mappings (e.g. interleaved attributes) for buffer mapping.
 * Not the name of the buffer might be the same as one of the interleaved attributes.
 */
function getAttributeFromAttributesList(bufferLayouts, name) {
    for (const bufferLayout of bufferLayouts) {
        let byteStride = bufferLayout.byteStride;
        // Calculate a default byte stride if not provided
        if (typeof bufferLayout.byteStride !== 'number') {
            for (const attributeMapping of bufferLayout.attributes || []) {
                const info = (0,_type_utils_decode_vertex_format_js__WEBPACK_IMPORTED_MODULE_1__.decodeVertexFormat)(attributeMapping.format);
                byteStride += info.byteLength;
            }
        }
        const attributeMapping = bufferLayout.attributes?.find(mapping => mapping.attribute === name);
        if (attributeMapping) {
            return {
                attributeName: attributeMapping.attribute,
                bufferName: bufferLayout.name,
                stepMode: bufferLayout.stepMode,
                vertexFormat: attributeMapping.format,
                byteOffset: attributeMapping.byteOffset,
                byteStride
            };
        }
    }
    return null;
}
/**
 * Merges an provided shader layout into a base shader layout
 * In WebGL, this allows the auto generated shader layout to be overridden by the application
 * Typically to change the format of the vertex attributes (from float32x4 to uint8x4 etc).
 * @todo Drop this? Aren't all use cases covered by mergeBufferLayout()?
 */
function mergeShaderLayout(baseLayout, overrideLayout) {
    // Deep clone the base layout
    const mergedLayout = {
        ...baseLayout,
        attributes: baseLayout.attributes.map(attribute => ({ ...attribute }))
    };
    // Merge the attributes
    for (const attribute of overrideLayout?.attributes || []) {
        const baseAttribute = mergedLayout.attributes.find(attr => attr.name === attribute.name);
        if (!baseAttribute) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`shader layout attribute ${attribute.name} not present in shader`);
        }
        else {
            baseAttribute.type = attribute.type || baseAttribute.type;
            baseAttribute.stepMode = attribute.stepMode || baseAttribute.stepMode;
        }
    }
    return mergedLayout;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/canvas-context.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CanvasContext: function() { return CanvasContext; }
});
/* harmony import */var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


const isPage = (0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)() && typeof document !== 'undefined';
const isPageLoaded = () => isPage && document.readyState === 'complete';
const DEFAULT_CANVAS_CONTEXT_PROPS = {
    canvas: null,
    width: 800, // width are height are only used by headless gl
    height: 600,
    useDevicePixels: true,
    autoResize: true,
    container: null,
    visible: true,
    colorSpace: 'srgb',
    alphaMode: 'opaque'
};
/**
 * Manages a canvas. Supports both HTML or offscreen canvas
 * - Creates a new canvas or looks up a canvas from the DOM
 * - Provides check for DOM loaded
 * @todo commit(): https://github.com/w3ctag/design-reviews/issues/288
 * @todo transferControlToOffscreen: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen
 */
class CanvasContext {
    id;
    props;
    canvas;
    htmlCanvas;
    offscreenCanvas;
    type;
    width = 1;
    height = 1;
    resizeObserver;
    /** State used by luma.gl classes: TODO - move to canvasContext*/
    _canvasSizeInfo = { clientWidth: 0, clientHeight: 0, devicePixelRatio: 1 };
    /** Check if the DOM is loaded */
    static get isPageLoaded() {
        return isPageLoaded();
    }
    /**
     * Get a 'lazy' promise that resolves when the DOM is loaded.
     * @note Since there may be limitations on number of `load` event listeners,
     * it is recommended avoid calling this function until actually needed.
     * I.e. don't call it until you know that you will be looking up a string in the DOM.
     */
    static pageLoaded = getPageLoadPromise();
    constructor(props) {
        this.props = { ...DEFAULT_CANVAS_CONTEXT_PROPS, ...props };
        props = this.props;
        if (!(0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)()) {
            this.id = 'node-canvas-context';
            this.type = 'node';
            this.width = this.props.width;
            this.height = this.props.height;
            // TODO - does this prevent app from using jsdom style polyfills?
            this.canvas = null;
            return;
        }
        if (!props.canvas) {
            const canvas = createCanvas(props);
            const container = getContainer(props?.container || null);
            container.insertBefore(canvas, container.firstChild);
            this.canvas = canvas;
            if (!props?.visible) {
                this.canvas.style.visibility = 'hidden';
            }
        }
        else if (typeof props.canvas === 'string') {
            this.canvas = getCanvasFromDOM(props.canvas);
        }
        else {
            this.canvas = props.canvas;
        }
        if (this.canvas instanceof HTMLCanvasElement) {
            this.id = this.canvas.id;
            this.type = 'html-canvas';
            this.htmlCanvas = this.canvas;
        }
        else {
            this.id = 'offscreen-canvas';
            this.type = 'offscreen-canvas';
            this.offscreenCanvas = this.canvas;
        }
        // React to size changes
        if (this.canvas instanceof HTMLCanvasElement && props.autoResize) {
            this.resizeObserver = new ResizeObserver(entries => {
                for (const entry of entries) {
                    if (entry.target === this.canvas) {
                        this.update();
                    }
                }
            });
            this.resizeObserver.observe(this.canvas);
        }
    }
    /**
     * Returns the current DPR, if props.useDevicePixels is true
     * Device refers to physical
     */
    getDevicePixelRatio(useDevicePixels) {
        if (typeof OffscreenCanvas !== 'undefined' && this.canvas instanceof OffscreenCanvas) {
            return 1;
        }
        useDevicePixels = useDevicePixels === undefined ? this.props.useDevicePixels : useDevicePixels;
        if (!useDevicePixels || useDevicePixels <= 0) {
            return 1;
        }
        // The param was mainly provide to support the test cases, could be removed
        if (useDevicePixels === true) {
            const dpr = typeof window !== 'undefined' && window.devicePixelRatio;
            return dpr || 1;
        }
        return useDevicePixels;
    }
    /**
     * Returns the size of drawing buffer in device pixels.
     * @note This can be different from the 'CSS' size of a canvas, and also from the
     * canvas' internal drawing buffer size (.width, .height).
     * This is the size required to cover the canvas, adjusted for DPR
     */
    getPixelSize() {
        switch (this.type) {
            case 'node':
                return [this.width, this.height];
            case 'offscreen-canvas':
                return [this.canvas.width, this.canvas.height];
            case 'html-canvas':
                const dpr = this.getDevicePixelRatio();
                const canvas = this.canvas;
                // If not attached to DOM client size can be 0
                return canvas.parentElement
                    ? [canvas.clientWidth * dpr, canvas.clientHeight * dpr]
                    : [this.canvas.width, this.canvas.height];
            default:
                throw new Error(this.type);
        }
    }
    getAspect() {
        const [width, height] = this.getPixelSize();
        return width / height;
    }
    /**
     * Returns multiplier need to convert CSS size to Device size
     */
    cssToDeviceRatio() {
        try {
            // For headless gl we might have used custom width and height
            // hence use cached clientWidth
            const [drawingBufferWidth] = this.getDrawingBufferSize();
            const { clientWidth } = this._canvasSizeInfo;
            return clientWidth ? drawingBufferWidth / clientWidth : 1;
        }
        catch {
            return 1;
        }
    }
    /**
     * Maps CSS pixel position to device pixel position
     */
    cssToDevicePixels(cssPixel, yInvert = true) {
        const ratio = this.cssToDeviceRatio();
        const [width, height] = this.getDrawingBufferSize();
        return scalePixels(cssPixel, ratio, width, height, yInvert);
    }
    /**
     * Use devicePixelRatio to set canvas width and height
     * @note this is a raw port of luma.gl v8 code. Might be worth a review
     */
    setDevicePixelRatio(devicePixelRatio, options = {}) {
        if (!this.htmlCanvas) {
            return;
        }
        // NOTE: if options.width and options.height not used remove in v8
        let clientWidth = 'width' in options ? options.width : this.htmlCanvas.clientWidth;
        let clientHeight = 'height' in options ? options.height : this.htmlCanvas.clientHeight;
        if (!clientWidth || !clientHeight) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.log(1, 'Canvas clientWidth/clientHeight is 0')();
            // by forcing devicePixel ratio to 1, we do not scale canvas.width and height in each frame.
            devicePixelRatio = 1;
            clientWidth = this.htmlCanvas.width || 1;
            clientHeight = this.htmlCanvas.height || 1;
        }
        const cachedSize = this._canvasSizeInfo;
        // Check if canvas needs to be resized
        if (cachedSize.clientWidth !== clientWidth ||
            cachedSize.clientHeight !== clientHeight ||
            cachedSize.devicePixelRatio !== devicePixelRatio) {
            let clampedPixelRatio = devicePixelRatio;
            const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);
            const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);
            this.htmlCanvas.width = canvasWidth;
            this.htmlCanvas.height = canvasHeight;
            // Note: when devicePixelRatio is too high, it is possible we might hit system limit for
            // drawing buffer width and hight, in those cases they get clamped and resulting aspect ration may not be maintained
            // for those cases, reduce devicePixelRatio.
            const [drawingBufferWidth, drawingBufferHeight] = this.getDrawingBufferSize();
            if (drawingBufferWidth !== canvasWidth || drawingBufferHeight !== canvasHeight) {
                clampedPixelRatio = Math.min(drawingBufferWidth / clientWidth, drawingBufferHeight / clientHeight);
                this.htmlCanvas.width = Math.floor(clientWidth * clampedPixelRatio);
                this.htmlCanvas.height = Math.floor(clientHeight * clampedPixelRatio);
                _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.warn('Device pixel ratio clamped')();
            }
            this._canvasSizeInfo.clientWidth = clientWidth;
            this._canvasSizeInfo.clientHeight = clientHeight;
            this._canvasSizeInfo.devicePixelRatio = devicePixelRatio;
        }
    }
    // PRIVATE
    /** @todo Major hack done to port the CSS methods above, base canvas context should not depend on WebGL */
    getDrawingBufferSize() {
        // @ts-expect-error This only works for WebGL
        const gl = this.device.gl;
        if (!gl) {
            // use default device pixel ratio
            throw new Error('canvas size');
        }
        return [gl.drawingBufferWidth, gl.drawingBufferHeight];
    }
    /**
     * Allows subclass constructor to override the canvas id for auto created canvases.
     * This can really help when debugging DOM in apps that create multiple devices
     */
    _setAutoCreatedCanvasId(id) {
        if (this.htmlCanvas?.id === 'lumagl-auto-created-canvas') {
            this.htmlCanvas.id = id;
        }
    }
}
// HELPER FUNCTIONS
/** Returns a promise that resolves when the page is loaded */
function getPageLoadPromise() {
    if (isPageLoaded() || typeof window === 'undefined') {
        return Promise.resolve();
    }
    return new Promise(resolve => {
        window.addEventListener('load', () => resolve());
    });
}
function getContainer(container) {
    if (typeof container === 'string') {
        const element = document.getElementById(container);
        if (!element && !isPageLoaded()) {
            throw new Error(`Accessing '${container}' before page was loaded`);
        }
        if (!element) {
            throw new Error(`${container} is not an HTML element`);
        }
        return element;
    }
    else if (container) {
        return container;
    }
    return document.body;
}
/** Get a Canvas element from DOM id */
function getCanvasFromDOM(canvasId) {
    const canvas = document.getElementById(canvasId);
    if (!canvas && !isPageLoaded()) {
        throw new Error(`Accessing '${canvasId}' before page was loaded`);
    }
    if (!(canvas instanceof HTMLCanvasElement)) {
        throw new Error('Object is not a canvas element');
    }
    return canvas;
}
/** Create a new canvas */
function createCanvas(props) {
    const { width, height } = props;
    const targetCanvas = document.createElement('canvas');
    targetCanvas.id = 'lumagl-auto-created-canvas';
    targetCanvas.width = width || 1;
    targetCanvas.height = height || 1;
    targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : '100%';
    targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : '100%';
    return targetCanvas;
}
/**
 *
 * @param pixel
 * @param ratio
 * @param width
 * @param height
 * @param yInvert
 * @returns
 */
function scalePixels(pixel, ratio, width, height, yInvert) {
    const point = pixel;
    const x = scaleX(point[0], ratio, width);
    let y = scaleY(point[1], ratio, height, yInvert);
    // Find boundaries of next pixel to provide valid range of device pixel locations
    let t = scaleX(point[0] + 1, ratio, width);
    // If next pixel's position is clamped to boundary, use it as is, otherwise subtract 1 for current pixel boundary
    const xHigh = t === width - 1 ? t : t - 1;
    t = scaleY(point[1] + 1, ratio, height, yInvert);
    let yHigh;
    if (yInvert) {
        // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range
        t = t === 0 ? t : t + 1;
        // swap y and yHigh
        yHigh = y;
        y = t;
    }
    else {
        // If next pixel's position is clamped to boundary, use it as is, otherwise clamp it to valid range
        yHigh = t === height - 1 ? t : t - 1;
        // y remains same
    }
    return {
        x,
        y,
        // when ratio < 1, current css pixel and next css pixel may point to same device pixel, set width/height to 1 in those cases.
        width: Math.max(xHigh - x + 1, 1),
        height: Math.max(yHigh - y + 1, 1)
    };
}
function scaleX(x, ratio, width) {
    // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit
    const r = Math.min(Math.round(x * ratio), width - 1);
    return r;
}
function scaleY(y, ratio, height, yInvert) {
    // since we are rounding to nearest, when ratio > 1, edge pixels may point to out of bounds value, clamp to the limit
    return yInvert
        ? Math.max(0, height - 1 - Math.round(y * ratio))
        : Math.min(Math.round(y * ratio), height - 1);
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/device.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Device: function() { return Device; },
  DeviceFeatures: function() { return DeviceFeatures; },
  DeviceLimits: function() { return DeviceLimits; }
});
/* harmony import */var _init_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/init.js");
/* harmony import */var _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/stats-manager.js");
/* harmony import */var _utils_log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */var _resources_buffer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */var _type_utils_decode_texture_format_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-texture-format.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors






/** Limits for a device (max supported sizes of resources, max number of bindings etc) */
class DeviceLimits {
}
/** Set-like class for features (lets apps check for WebGL / WebGPU extensions) */
class DeviceFeatures {
    features;
    disabledFeatures;
    constructor(features = [], disabledFeatures) {
        this.features = new Set(features);
        this.disabledFeatures = disabledFeatures || {};
    }
    *[Symbol.iterator]() {
        yield* this.features;
    }
    has(feature) {
        return !this.disabledFeatures[feature] && this.features.has(feature);
    }
}
/**
 * WebGPU Device/WebGL context abstraction
 */
class Device {
    static defaultProps = {
        id: null,
        canvas: null,
        container: null,
        manageState: true,
        width: 800, // width are height are only used by headless gl
        height: 600,
        requestMaxLimits: true,
        debug: Boolean(_utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.get('debug')), // Instrument context (at the expense of performance)
        spector: Boolean(_utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.get('spector') || _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.get('spectorjs')), // Initialize the SpectorJS WebGL debugger
        break: [],
        // TODO - Change these after confirming things work as expected
        initalizeFeatures: true,
        disabledFeatures: {
            'compilation-status-async-webgl': true
        },
        // alpha: undefined,
        // depth: undefined,
        // stencil: undefined,
        // antialias: undefined,
        // premultipliedAlpha: undefined,
        // preserveDrawingBuffer: undefined,
        // failIfMajorPerformanceCaveat: undefined
        gl: null,
        // Callbacks
        onError: (error) => _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.error(error.message)
    };
    get [Symbol.toStringTag]() {
        return 'Device';
    }
    static VERSION = _init_js__WEBPACK_IMPORTED_MODULE_1__.VERSION;
    constructor(props) {
        this.props = { ...Device.defaultProps, ...props };
        this.id = this.props.id || (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.uid)(this[Symbol.toStringTag].toLowerCase());
    }
    /** id of this device, primarily for debugging */
    id;
    /** A copy of the device props  */
    props;
    /** Available for the application to store data on the device */
    userData = {};
    /** stats */
    statsManager = _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_3__.lumaStats;
    /** Used by other luma.gl modules to store data on the device */
    _lumaData = {};
    /** Check if a specific texture format is GPU compressed */
    isTextureFormatCompressed(format) {
        return (0,_type_utils_decode_texture_format_js__WEBPACK_IMPORTED_MODULE_4__.isTextureFormatCompressed)(format);
    }
    /**
     * Trigger device loss.
     * @returns `true` if context loss could actually be triggered.
     * @note primarily intended for testing how application reacts to device loss
     */
    loseDevice() {
        return false;
    }
    /** Returns the default / primary canvas context. Throws an error if no canvas context is available (a WebGPU compute device) */
    getCanvasContext() {
        if (!this.canvasContext) {
            throw new Error('Device has no CanvasContext');
        }
        return this.canvasContext;
    }
    createTexture(props) {
        // Signature: new Texture2D(gl, url | Promise)
        if (props instanceof Promise || typeof props === 'string') {
            props = { data: props };
        }
        return this._createTexture(props);
    }
    createCommandEncoder(props = {}) {
        throw new Error('not implemented');
    }
    // WebGL specific HACKS - enables app to remove webgl import
    // Use until we have a better way to handle these
    /** @deprecated - will be removed - should use command encoder */
    readPixelsToArrayWebGL(source, options) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use command encoder */
    readPixelsToBufferWebGL(source, options) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
    setParametersWebGL(parameters) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
    getParametersWebGL(parameters) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
    withParametersWebGL(parameters, func) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use clear arguments in RenderPass */
    clearWebGL(options) {
        throw new Error('not implemented');
    }
    /** @deprecated - will be removed - should use for debugging only */
    resetWebGL() {
        throw new Error('not implemented');
    }
    timestamp = 0;
    /** A monotonic counter for tracking buffer and texture updates */
    incrementTimestamp() {
        return this.timestamp++;
    }
    // Error Handling
    /** Report unhandled device errors */
    onError(error) {
        this.props.onError(error);
    }
    // IMPLEMENTATION
    _getBufferProps(props) {
        if (props instanceof ArrayBuffer || ArrayBuffer.isView(props)) {
            props = { data: props };
        }
        // TODO - fragile, as this is done before we merge with default options
        // inside the Buffer constructor
        const newProps = { ...props };
        // Deduce indexType
        if ((props.usage || 0) & _resources_buffer_js__WEBPACK_IMPORTED_MODULE_5__.Buffer.INDEX && !props.indexType) {
            if (props.data instanceof Uint32Array) {
                newProps.indexType = 'uint32';
            }
            else if (props.data instanceof Uint16Array) {
                newProps.indexType = 'uint16';
            }
            else {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_0__.log.warn('indices buffer content must be of integer type')();
            }
        }
        return newProps;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Buffer: function() { return Buffer; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Abstract GPU buffer */
class Buffer extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        usage: 0, // Buffer.COPY_DST | Buffer.COPY_SRC
        byteLength: 0,
        byteOffset: 0,
        data: null,
        indexType: 'uint16',
        mappedAtCreation: false
    };
    // Usage Flags
    static MAP_READ = 0x01;
    static MAP_WRITE = 0x02;
    static COPY_SRC = 0x0004;
    static COPY_DST = 0x0008;
    /** Index buffer */
    static INDEX = 0x0010;
    /** Vertex buffer */
    static VERTEX = 0x0020;
    /** Uniform buffer */
    static UNIFORM = 0x0040;
    /** Storage buffer */
    static STORAGE = 0x0080;
    static INDIRECT = 0x0100;
    static QUERY_RESOLVE = 0x0200;
    get [Symbol.toStringTag]() {
        return 'Buffer';
    }
    /** The usage with which this buffer was created */
    usage;
    /** For index buffers, whether indices are 16 or 32 bit */
    indexType;
    /** "Time" of last update */
    updateTimestamp;
    constructor(device, props) {
        const deducedProps = { ...props };
        // Deduce indexType
        if ((props.usage || 0) & Buffer.INDEX && !props.indexType) {
            if (props.data instanceof Uint32Array) {
                deducedProps.indexType = 'uint32';
            }
            else if (props.data instanceof Uint16Array) {
                deducedProps.indexType = 'uint16';
            }
        }
        super(device, deducedProps, Buffer.defaultProps);
        this.usage = props.usage || 0;
        this.indexType = deducedProps.indexType;
        // TODO - perhaps this should be set on async write completion?
        this.updateTimestamp = device.incrementTimestamp();
    }
    /** Read data synchronously. @note WebGL2 only */
    readSyncWebGL(byteOffset, byteLength) {
        throw new Error('not implemented');
    }
    // PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)
    /** Max amount of debug data saved. Two vec4's */
    static DEBUG_DATA_MAX_LENGTH = 32;
    /** A partial CPU-side copy of the data in this buffer, for debugging purposes */
    debugData = new ArrayBuffer(0);
    /** This doesn't handle partial non-zero offset updates correctly */
    _setDebugData(data, byteOffset, byteLength) {
        const buffer = ArrayBuffer.isView(data) ? data.buffer : data;
        const debugDataLength = Math.min(data ? data.byteLength : byteLength, Buffer.DEBUG_DATA_MAX_LENGTH);
        if (data === null) {
            this.debugData = new ArrayBuffer(debugDataLength);
        }
        else if (byteOffset === 0 && byteLength === data.byteLength) {
            this.debugData = buffer.slice(0, debugDataLength);
        }
        else {
            this.debugData = buffer.slice(byteOffset, byteOffset + debugDataLength);
        }
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/command-buffer.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CommandBuffer: function() { return CommandBuffer; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Encodes commands to queue that can be executed later
 */
class CommandBuffer extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps
    };
    get [Symbol.toStringTag]() {
        return 'CommandBuffer';
    }
    constructor(device, props) {
        super(device, props, CommandBuffer.defaultProps);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/command-encoder.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CommandEncoder: function() { return CommandEncoder; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Encodes commands to queue that can be executed later
 */
class CommandEncoder extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        measureExecutionTime: undefined
    };
    get [Symbol.toStringTag]() {
        return 'CommandEncoder';
    }
    constructor(device, props) {
        super(device, props, CommandEncoder.defaultProps);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/compute-pipeline.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ComputePipeline: function() { return ComputePipeline; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * A compiled and linked shader program for compute
 */
class ComputePipeline extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        shader: undefined,
        entryPoint: undefined,
        constants: {},
        shaderLayout: undefined
    };
    get [Symbol.toStringTag]() {
        return 'ComputePipeline';
    }
    hash = '';
    constructor(device, props) {
        super(device, props, ComputePipeline.defaultProps);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Framebuffer: function() { return Framebuffer; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
/* harmony import */var _texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Create new textures with correct size for all attachments.
 * @note resize() destroys existing textures (if size has changed).
 */
class Framebuffer extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        width: 1,
        height: 1,
        colorAttachments: [], // ['rgba8unorm'],
        depthStencilAttachment: null // 'depth24plus-stencil8'
    };
    get [Symbol.toStringTag]() {
        return 'Framebuffer';
    }
    /** Width of all attachments in this framebuffer */
    width;
    /** Height of all attachments in this framebuffer */
    height;
    /** Color attachments */
    colorAttachments = [];
    /** Depth-stencil attachment, if provided */
    depthStencilAttachment = null;
    constructor(device, props = {}) {
        super(device, props, Framebuffer.defaultProps);
        this.width = this.props.width;
        this.height = this.props.height;
        // NOTE: call from subclass constructor as we cannot call overridden methods here (subclass not yet constructed)
        // this.autoCreateAttachmentTextures();
    }
    resize(size) {
        let updateSize = !size;
        if (size) {
            const [width, height] = Array.isArray(size) ? size : [size.width, size.height];
            updateSize = updateSize || height !== this.height || width !== this.width;
            this.width = width;
            this.height = height;
        }
        if (updateSize) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();
            this.resizeAttachments(this.width, this.height);
        }
    }
    /** Auto creates any textures */
    autoCreateAttachmentTextures() {
        if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {
            throw new Error('Framebuffer has noattachments');
        }
        this.colorAttachments = this.props.colorAttachments.map(attachment => {
            if (typeof attachment === 'string') {
                const texture = this.createColorTexture(attachment);
                this.attachResource(texture);
                return texture.view;
            }
            if (attachment instanceof _texture_js__WEBPACK_IMPORTED_MODULE_2__.Texture) {
                return attachment.view;
            }
            return attachment;
        });
        const attachment = this.props.depthStencilAttachment;
        if (attachment) {
            if (typeof attachment === 'string') {
                const texture = this.createDepthStencilTexture(attachment);
                this.attachResource(texture);
                this.depthStencilAttachment = texture.view;
            }
            else if (attachment instanceof _texture_js__WEBPACK_IMPORTED_MODULE_2__.Texture) {
                this.depthStencilAttachment = attachment.view;
            }
            else {
                this.depthStencilAttachment = attachment;
            }
        }
    }
    /** Create a color texture */
    createColorTexture(format) {
        return this.device.createTexture({
            id: 'color-attachment',
            usage: _texture_js__WEBPACK_IMPORTED_MODULE_2__.Texture.RENDER_ATTACHMENT,
            format,
            width: this.width,
            height: this.height
        });
    }
    /** Create depth stencil texture */
    createDepthStencilTexture(format) {
        return this.device.createTexture({
            id: 'depth-stencil-attachment',
            usage: _texture_js__WEBPACK_IMPORTED_MODULE_2__.Texture.RENDER_ATTACHMENT,
            format,
            width: this.width,
            height: this.height
        });
    }
    /**
     * Default implementation of resize
     * Creates new textures with correct size for all attachments.
     * and destroys existing textures if owned
     */
    resizeAttachments(width, height) {
        for (let i = 0; i < this.colorAttachments.length; ++i) {
            if (this.colorAttachments[i]) {
                const resizedTexture = this.device._createTexture({
                    ...this.colorAttachments[i].props,
                    width,
                    height
                });
                this.destroyAttachedResource(this.colorAttachments[i]);
                this.colorAttachments[i] = resizedTexture.view;
                this.attachResource(resizedTexture.view);
            }
        }
        if (this.depthStencilAttachment) {
            const resizedTexture = this.device._createTexture({
                ...this.depthStencilAttachment.props,
                width,
                height
            });
            this.destroyAttachedResource(this.depthStencilAttachment);
            this.depthStencilAttachment = resizedTexture.view;
            this.attachResource(resizedTexture);
        }
    }
}
// TODO - remove if not needed
// Create a color attachment for WebGL *
// protected override createColorTexture(colorAttachment: Required<ColorAttachment>): Required<ColorAttachment> {
//   return this.device._createTexture({
//     id: `${this.id}-color`,
//     data: null, // reserves texture memory, but texels are undefined
//     format,
//     // type: GL.UNSIGNED_BYTE,
//     width: this.width,
//     height: this.height,
//     // Note: Mipmapping can be disabled by texture resource when we resize the texture
//     // to a non-power-of-two dimenstion (NPOT texture) under WebGL1. To have consistant
//     // behavior we always disable mipmaps.
//     mipmaps: false,
//     // Set MIN and MAG filtering parameters so mipmaps are not used in sampling.
//     // Use LINEAR so subpixel algos like fxaa work.
//     // Set WRAP modes that support NPOT textures too.
//     sampler: {
//       minFilter: 'linear',
//       magFilter: 'linear',
//       addressModeU: 'clamp-to-edge',
//       addressModeV: 'clamp-to-edge'
//     }
//     // parameters: {
//     //   [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,
//     //   [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,
//     //   [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,
//     //   [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE
//     // }
//   });
// }
// /** Returns fully populated attachment object. */
// protected normalizeColorAttachment(
//   attachment: Texture | ColorTextureFormat
// ): Required<ColorAttachment> {
//   const COLOR_ATTACHMENT_DEFAULTS: Required<ColorAttachment> = {
//     texture: undefined!,
//     format: undefined!,
//     clearValue: [0.0, 0.0, 0.0, 0.0],
//     loadOp: 'clear',
//     storeOp: 'store'
//   };
//   if (attachment instanceof Texture) {
//     return {...COLOR_ATTACHMENT_DEFAULTS, texture: attachment};
//   }
//   if (typeof attachment === 'string') {
//     return {...COLOR_ATTACHMENT_DEFAULTS, format: attachment};
//   }
//   return {...COLOR_ATTACHMENT_DEFAULTS, ...attachment};
// }
// /** Wraps texture inside fully populated attachment object. */
// protected normalizeDepthStencilAttachment(
//   attachment: DepthStencilAttachment | Texture | DepthStencilTextureFormat
// ): Required<DepthStencilAttachment> {
//   const DEPTH_STENCIL_ATTACHMENT_DEFAULTS: Required<DepthStencilAttachment> = {
//     texture: undefined!,
//     format: undefined!,
//     depthClearValue: 1.0,
//     depthLoadOp: 'clear',
//     depthStoreOp: 'store',
//     depthReadOnly: false,
//     stencilClearValue: 0,
//     stencilLoadOp: 'clear',
//     stencilStoreOp: 'store',
//     stencilReadOnly: false
//   };
//   if (typeof attachment === 'string') {
//     return {...DEPTH_STENCIL_ATTACHMENT_DEFAULTS, format: attachment};
//   }
//   // @ts-expect-error attachment instanceof Texture doesn't cover Renderbuffer
//   if (attachment.handle || attachment instanceof Texture) {
//     return {...DEPTH_STENCIL_ATTACHMENT_DEFAULTS, texture: attachment as Texture};
//   }
//   return {...DEPTH_STENCIL_ATTACHMENT_DEFAULTS, ...attachment};
// }


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/query-set.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  QuerySet: function() { return QuerySet; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Immutable QuerySet object */
class QuerySet extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        type: undefined,
        count: undefined
    };
    get [Symbol.toStringTag]() {
        return 'QuerySet';
    }
    constructor(device, props) {
        super(device, props, QuerySet.defaultProps);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/render-pass.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  RenderPass: function() { return RenderPass; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// import {Binding} from '../types/shader-layout';

/**
 * A RenderPass instance is a required parameter to all draw calls.
 *
 * It holds a combination of
 * - render targets (specified via a framebuffer)
 * - clear colors, read/write, discard information for the framebuffer attachments
 * - a couple of mutable parameters ()
 */
class RenderPass extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    /** Default properties for RenderPass */
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        framebuffer: null,
        parameters: undefined,
        clearColor: [0, 0, 0, 0],
        clearDepth: 1,
        clearStencil: 0,
        depthReadOnly: false,
        stencilReadOnly: false,
        discard: false,
        occlusionQuerySet: undefined,
        timestampQuerySet: undefined,
        beginTimestampIndex: undefined,
        endTimestampIndex: undefined
    };
    get [Symbol.toStringTag]() {
        return 'RenderPass';
    }
    constructor(device, props) {
        super(device, props, RenderPass.defaultProps);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  RenderPipeline: function() { return RenderPipeline; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// import {normalizeAttributeMap} from '../helpers/attribute-bindings';

/**
 * A compiled and linked shader program
 */
class RenderPipeline extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        vs: null,
        vertexEntryPoint: 'vertexMain',
        vsConstants: {},
        fs: null,
        fragmentEntryPoint: 'fragmentMain',
        fsConstants: {},
        shaderLayout: null,
        bufferLayout: [],
        topology: 'triangle-list',
        parameters: {},
        // isInstanced: false,
        // instanceCount: 0,
        // vertexCount: 0,
        bindings: {},
        uniforms: {}
    };
    get [Symbol.toStringTag]() {
        return 'RenderPipeline';
    }
    /** The merged layout */
    shaderLayout;
    /** Buffer map describing buffer interleaving etc */
    bufferLayout;
    /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */
    linkStatus = 'pending';
    /** The hash of the pipeline */
    hash = '';
    constructor(device, props) {
        super(device, props, RenderPipeline.defaultProps);
        this.shaderLayout = this.props.shaderLayout;
        this.bufferLayout = this.props.bufferLayout || [];
    }
    // DEPRECATED METHODS
    /**
     * Uniforms
     * @deprecated Use uniforms buffers
     * @note textures, samplers and uniform buffers should be set via `setBindings()`, these are not considered uniforms.
     * @note In WebGL uniforms have a performance penalty, they are reset before each call to enable pipeline sharing.
     */
    setUniformsWebGL(uniforms) {
        throw new Error('Use uniform blocks');
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Resource: function() { return Resource; }
});
/* harmony import */var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/utils.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Base class for GPU (WebGPU/WebGL) Resources
 */
class Resource {
    /** Default properties for resource */
    static defaultProps = {
        id: 'undefined',
        handle: undefined,
        userData: undefined
    };
    /** props.id, for debugging. */
    id;
    props;
    userData = {};
    _device;
    /** Whether this resource has been destroyed */
    destroyed = false;
    /** For resources that allocate GPU memory */
    allocatedBytes = 0;
    /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created "sub" resources. */
    _attachedResources = new Set();
    /**
     * Create a new Resource. Called from Subclass
     */
    constructor(device, props, defaultProps) {
        if (!device) {
            throw new Error('no device');
        }
        this._device = device;
        this.props = selectivelyMerge(props, defaultProps);
        const id = this.props.id !== 'undefined' ? this.props.id : (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.uid)(this[Symbol.toStringTag]);
        this.props.id = id;
        this.id = id;
        this.userData = this.props.userData || {};
        this.addStats();
    }
    /**
     * destroy can be called on any resource to release it before it is garbage collected.
     */
    destroy() {
        this.destroyResource();
    }
    /** @deprecated Use destroy() */
    delete() {
        this.destroy();
        return this;
    }
    toString() {
        return `${this[Symbol.toStringTag] || this.constructor.name}(${this.id})`;
    }
    /**
     * Combines a map of user props and default props, only including props from defaultProps
     * @returns returns a map of overridden default props
     */
    getProps() {
        return this.props;
    }
    // ATTACHED RESOURCES
    /**
     * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed
     * Called automatically when sub resources are auto created but can be called by application
     */
    attachResource(resource) {
        this._attachedResources.add(resource);
    }
    /**
     * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.
     */
    detachResource(resource) {
        this._attachedResources.delete(resource);
    }
    /**
     * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.
     */
    destroyAttachedResource(resource) {
        if (this._attachedResources.delete(resource)) {
            resource.destroy();
        }
    }
    /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */
    destroyAttachedResources() {
        for (const resource of Object.values(this._attachedResources)) {
            resource.destroy();
        }
        // don't remove while we are iterating
        this._attachedResources = new Set();
    }
    // PROTECTED METHODS
    /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */
    destroyResource() {
        this.destroyAttachedResources();
        this.removeStats();
        this.destroyed = true;
    }
    /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */
    removeStats() {
        const stats = this._device.statsManager.getStats('Resource Counts');
        const name = this[Symbol.toStringTag];
        stats.get(`${name}s Active`).decrementCount();
    }
    /** Called by subclass to track memory allocations */
    trackAllocatedMemory(bytes, name = this[Symbol.toStringTag]) {
        const stats = this._device.statsManager.getStats('Resource Counts');
        stats.get('GPU Memory').addCount(bytes);
        stats.get(`${name} Memory`).addCount(bytes);
        this.allocatedBytes = bytes;
    }
    /** Called by subclass to track memory deallocations */
    trackDeallocatedMemory(name = this[Symbol.toStringTag]) {
        const stats = this._device.statsManager.getStats('Resource Counts');
        stats.get('GPU Memory').subtractCount(this.allocatedBytes);
        stats.get(`${name} Memory`).subtractCount(this.allocatedBytes);
        this.allocatedBytes = 0;
    }
    /** Called by resource constructor to track object creation */
    addStats() {
        const stats = this._device.statsManager.getStats('Resource Counts');
        const name = this[Symbol.toStringTag];
        stats.get('Resources Created').incrementCount();
        stats.get(`${name}s Created`).incrementCount();
        stats.get(`${name}s Active`).incrementCount();
    }
}
/**
 * Combines a map of user props and default props, only including props from defaultProps
 * @param props
 * @param defaultProps
 * @returns returns a map of overridden default props
 */
function selectivelyMerge(props, defaultProps) {
    const mergedProps = { ...defaultProps };
    for (const key in props) {
        if (props[key] !== undefined) {
            mergedProps[key] = props[key];
        }
    }
    return mergedProps;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/sampler.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Sampler: function() { return Sampler; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Immutable Sampler object */
class Sampler extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        type: 'color-sampler',
        addressModeU: 'clamp-to-edge',
        addressModeV: 'clamp-to-edge',
        addressModeW: 'clamp-to-edge',
        magFilter: 'nearest',
        minFilter: 'nearest',
        mipmapFilter: 'nearest',
        lodMinClamp: 0,
        lodMaxClamp: 32, // Per WebGPU spec
        compare: 'less-equal',
        maxAnisotropy: 1
    };
    get [Symbol.toStringTag]() {
        return 'Sampler';
    }
    constructor(device, props) {
        super(device, props, Sampler.defaultProps);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/shader.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Shader: function() { return Shader; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
/* harmony import */var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */var _lib_compiler_log_format_compiler_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/compiler-log/format-compiler-log.js");
/* harmony import */var _lib_compiler_log_get_shader_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/compiler-log/get-shader-info.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// import { log } from '../../utils/log';



/**
 * Immutable Shader object
 * In WebGPU the handle can be copied between threads
 */
class Shader extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        language: 'auto',
        stage: undefined,
        source: '',
        sourceMap: null,
        entryPoint: 'main',
        debug: 'errors'
    };
    get [Symbol.toStringTag]() {
        return 'Shader';
    }
    /** The stage of this shader */
    stage;
    /** The source code of this shader */
    source;
    /** The compilation status of the shader. 'pending' if compilation is asynchronous, and on production */
    compilationStatus = 'pending';
    /** Create a new Shader instance */
    constructor(device, props) {
        super(device, { id: getShaderIdFromProps(props), ...props }, Shader.defaultProps);
        this.stage = this.props.stage;
        this.source = this.props.source;
    }
    /** Get compiler log synchronously (WebGL only) */
    getCompilationInfoSync() {
        return null;
    }
    /** Get translated shader source in host platform's native language (HLSL, GLSL, and even GLSL ES), if available */
    getTranslatedSource() {
        return null;
    }
    // PORTABLE HELPERS
    /** In browser logging of errors */
    async debugShader(trigger = this.props.debug) {
        switch (trigger) {
            case 'never':
                return;
            case 'errors':
                // On WebGL - Don't extract the log unless errors
                if (this.compilationStatus === 'success') {
                    return;
                }
                break;
            case 'warnings':
            case 'always':
                break;
        }
        const messages = await this.getCompilationInfo();
        if (this.props.debug === 'warnings' && messages?.length === 0) {
            return;
        }
        this._displayShaderLog(messages);
    }
    // PRIVATE
    /** In-browser UI logging of errors */
    _displayShaderLog(messages) {
        // Return if under Node.js / incomplete `document` polyfills
        if (typeof document === 'undefined' || !document?.createElement) {
            return;
        }
        const shaderName = (0,_lib_compiler_log_get_shader_info_js__WEBPACK_IMPORTED_MODULE_1__.getShaderInfo)(this.source).name;
        const shaderTitle = `${this.stage} ${shaderName}`;
        let htmlLog = (0,_lib_compiler_log_format_compiler_log_js__WEBPACK_IMPORTED_MODULE_2__.formatCompilerLog)(messages, this.source, { showSourceCode: 'all', html: true });
        // Show translated source if available
        const translatedSource = this.getTranslatedSource();
        if (translatedSource) {
            htmlLog += `<br /><br /><h1>Translated Source</h1><br /><br /><code style="user-select:text;"><pre>${translatedSource}</pre></code>`;
        }
        // Make it clickable so we can copy to clipboard
        const button = document.createElement('Button');
        button.innerHTML = `
<h1>Shader Compilation Error in ${shaderTitle}</h1><br /><br />
<code style="user-select:text;"><pre>
${htmlLog}
</pre></code>`;
        button.style.top = '10px';
        button.style.left = '10px';
        button.style.position = 'absolute';
        button.style.zIndex = '9999';
        button.style.width = '100%';
        button.style.textAlign = 'left';
        document.body.appendChild(button);
        const errors = document.getElementsByClassName('luma-compiler-log-error');
        if (errors[0]?.scrollIntoView) {
            errors[0].scrollIntoView();
        }
        // TODO - add a small embedded copy button (instead of main button)
        button.onclick = () => {
            // const source = this.source.replaceAll('\n', '<br />');
            const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;
            navigator.clipboard.writeText(dataURI);
        };
        // TODO - add a small embedded close button
    }
}
// HELPERS
/** Deduce an id, from shader source, or supplied id, or shader type */
function getShaderIdFromProps(props) {
    return (0,_lib_compiler_log_get_shader_info_js__WEBPACK_IMPORTED_MODULE_1__.getShaderInfo)(props.source).name || props.id || (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.uid)(`unnamed ${props.stage}-shader`);
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  TextureView: function() { return TextureView; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Immutable TextureView object */
class TextureView extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        format: undefined,
        dimension: undefined,
        aspect: 'all',
        baseMipLevel: 0,
        mipLevelCount: undefined,
        baseArrayLayer: 0,
        arrayLayerCount: undefined
    };
    get [Symbol.toStringTag]() {
        return 'TextureView';
    }
    /** Should not be constructed directly. Use `texture.createView(props)` */
    constructor(device, props) {
        super(device, props, TextureView.defaultProps);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Texture: function() { return Texture; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Abstract Texture interface
 * Texture Object
 * https://gpuweb.github.io/gpuweb/#gputexture
 */
class Texture extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        data: null,
        dimension: '2d',
        format: 'rgba8unorm',
        width: undefined,
        height: undefined,
        depth: 1,
        mipmaps: true,
        // type: undefined,
        compressed: false,
        // mipLevels: 1,
        usage: 0,
        // usage: GPUTextureUsage.COPY_DST
        mipLevels: undefined,
        samples: undefined,
        type: undefined,
        sampler: {},
        view: undefined
    };
    static COPY_SRC = 0x01;
    static COPY_DST = 0x02;
    static TEXTURE_BINDING = 0x04;
    static STORAGE_BINDING = 0x08;
    static RENDER_ATTACHMENT = 0x10;
    get [Symbol.toStringTag]() {
        return 'Texture';
    }
    /** dimension of this texture */
    dimension;
    /** format of this texture */
    format;
    /** width in pixels of this texture */
    width;
    /** height in pixels of this texture */
    height;
    /** depth of this texture */
    depth;
    /** "Time" of last update. Monotonically increasing timestamp */
    updateTimestamp;
    /** Do not use directly. Create with device.createTexture() */
    constructor(device, props, defaultProps = Texture.defaultProps) {
        super(device, props, defaultProps);
        this.dimension = this.props.dimension;
        this.format = this.props.format;
        this.width = this.props.width;
        this.height = this.props.height;
        this.depth = this.props.depth;
        // TODO - perhaps this should be set on async write completion?
        this.updateTimestamp = device.incrementTimestamp();
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/transform-feedback.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  TransformFeedback: function() { return TransformFeedback; }
});
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Holds a set of output buffers for pipeline (WebGL only) */
class TransformFeedback extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        layout: undefined,
        buffers: {}
    };
    get [Symbol.toStringTag]() {
        return 'TransformFeedback';
    }
    constructor(device, props) {
        super(device, props, TransformFeedback.defaultProps);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/vertex-array.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  VertexArray: function() { return VertexArray; }
});
/* harmony import */var _attribute_utils_get_attribute_from_layouts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/attribute-utils/get-attribute-from-layouts.js");
/* harmony import */var _resource_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/resource.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Stores attribute bindings.
 * Makes it easy to share a render pipeline and use separate vertex arrays.
 * @note On WebGL, VertexArray allows non-constant bindings to be performed in advance
 * reducing the number of WebGL calls per draw call.
 * @note On WebGPU this is just a convenience class that collects the bindings.
 */
class VertexArray extends _resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource {
    static defaultProps = {
        ..._resource_js__WEBPACK_IMPORTED_MODULE_0__.Resource.defaultProps,
        renderPipeline: null
    };
    get [Symbol.toStringTag]() {
        return 'VertexArray';
    }
    /** Max number of vertex attributes */
    maxVertexAttributes;
    /** Attribute infos indexed by location - TODO only needed by webgl module? */
    attributeInfos;
    /** Index buffer */
    indexBuffer = null;
    /** Attributes indexed by buffer slot */
    attributes;
    constructor(device, props) {
        super(device, props, VertexArray.defaultProps);
        this.maxVertexAttributes = device.limits.maxVertexAttributes;
        this.attributes = new Array(this.maxVertexAttributes).fill(null);
        this.attributeInfos = (0,_attribute_utils_get_attribute_from_layouts_js__WEBPACK_IMPORTED_MODULE_1__.getAttributeInfosByLocation)(props.renderPipeline.shaderLayout, props.renderPipeline.bufferLayout, this.maxVertexAttributes);
    }
    // DEPRECATED METHODS
    /** @deprecated Set constant attributes (WebGL only) */
    setConstantWebGL(location, value) {
        throw new Error('constant attributes not supported');
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-attribute-type.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  decodeShaderAttributeType: function() { return decodeShaderAttributeType; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */
function decodeShaderAttributeType(attributeType) {
    const [dataType, components] = TYPE_INFO[attributeType];
    const integer = dataType === 'i32' || dataType === 'u32';
    const signed = dataType !== 'u32';
    const byteLength = TYPE_SIZES[dataType] * components;
    const defaultVertexFormat = getCompatibleVertexFormat(dataType, components);
    return {
        dataType,
        components,
        defaultVertexFormat,
        byteLength,
        integer,
        signed
    };
}
/** Get the "default" vertex format for a certain shader data type */
function getCompatibleVertexFormat(dataType, components) {
    let vertexType;
    switch (dataType) {
        case 'f32':
            vertexType = 'float32';
            break;
        case 'i32':
            vertexType = 'sint32';
            break;
        case 'u32':
            vertexType = 'uint32';
            break;
        case 'f16':
            return components <= 2 ? 'float16x2' : 'float16x4';
    }
    // TODO logic does not work for float16
    if (components === 1) {
        return vertexType;
    }
    return `${vertexType}x${components}`;
}
/** All valid shader attribute types. A table guarantees exhaustive list and fast execution */
const TYPE_INFO = {
    f32: ['f32', 1],
    'vec2<f32>': ['f32', 2],
    'vec3<f32>': ['f32', 3],
    'vec4<f32>': ['f32', 4],
    f16: ['f16', 1],
    'vec2<f16>': ['f16', 2],
    'vec3<f16>': ['f16', 3],
    'vec4<f16>': ['f16', 4],
    i32: ['i32', 1],
    'vec2<i32>': ['i32', 2],
    'vec3<i32>': ['i32', 3],
    'vec4<i32>': ['i32', 4],
    u32: ['u32', 1],
    'vec2<u32>': ['u32', 2],
    'vec3<u32>': ['u32', 3],
    'vec4<u32>': ['u32', 4]
};
const TYPE_SIZES = {
    f32: 4,
    f16: 2,
    i32: 4,
    u32: 4
    // 'bool-webgl': 4,
};


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-data-type.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  decodeVertexType: function() { return decodeVertexType; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Decodes a vertex type, returning byte length and flags (integer, signed, normalized) */
function decodeVertexType(type) {
    const dataType = TYPE_MAP[type];
    const bytes = getDataTypeBytes(dataType);
    const normalized = type.includes('norm');
    const integer = !normalized && !type.startsWith('float');
    const signed = type.startsWith('s');
    return {
        dataType: TYPE_MAP[type],
        byteLength: bytes,
        integer,
        signed,
        normalized
    };
}
function getDataTypeBytes(type) {
    const bytes = TYPE_SIZES[type];
    // assert(bytes);
    return bytes;
}
const TYPE_MAP = {
    uint8: 'uint8',
    sint8: 'sint8',
    unorm8: 'uint8',
    snorm8: 'sint8',
    uint16: 'uint16',
    sint16: 'sint16',
    unorm16: 'uint16',
    snorm16: 'sint16',
    float16: 'float16',
    float32: 'float32',
    uint32: 'uint32',
    sint32: 'sint32'
};
const TYPE_SIZES = {
    uint8: 1,
    sint8: 1,
    uint16: 2,
    sint16: 2,
    float16: 2,
    float32: 4,
    uint32: 4,
    sint32: 4
};


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-shader-types.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  alignTo: function() { return alignTo; },
  decodeShaderUniformType: function() { return decodeShaderUniformType; }
});
/* harmony import */var _utils_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const UNIFORM_FORMATS = {
    f32: { type: 'f32', components: 1 },
    i32: { type: 'i32', components: 1 },
    u32: { type: 'u32', components: 1 },
    // 'bool-webgl': {type: 'bool-webgl', components: 1},
    'vec2<f32>': { type: 'f32', components: 2 },
    'vec3<f32>': { type: 'f32', components: 3 },
    'vec4<f32>': { type: 'f32', components: 4 },
    'vec2<i32>': { type: 'i32', components: 2 },
    'vec3<i32>': { type: 'i32', components: 3 },
    'vec4<i32>': { type: 'i32', components: 4 },
    'vec2<u32>': { type: 'u32', components: 2 },
    'vec3<u32>': { type: 'u32', components: 3 },
    'vec4<u32>': { type: 'u32', components: 4 },
    'mat2x2<f32>': { type: 'f32', components: 4 },
    'mat2x3<f32>': { type: 'f32', components: 6 },
    'mat2x4<f32>': { type: 'f32', components: 8 },
    'mat3x2<f32>': { type: 'f32', components: 6 },
    'mat3x3<f32>': { type: 'f32', components: 9 },
    'mat3x4<f32>': { type: 'f32', components: 12 },
    'mat4x2<f32>': { type: 'f32', components: 8 },
    'mat4x3<f32>': { type: 'f32', components: 12 },
    'mat4x4<f32>': { type: 'f32', components: 16 }
};
/** Split a uniform type string into type and components */
function decodeShaderUniformType(format) {
    const decoded = UNIFORM_FORMATS[format];
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(format);
    return decoded;
}
/** Align offset to 1, 2 or 4 elements (4, 8 or 16 bytes) */
function alignTo(size, count) {
    // prettier-ignore
    switch (count) {
        case 1: return size; // Pad upwards to even multiple of 2
        case 2: return size + (size % 2); // Pad upwards to even multiple of 2
        default: return size + ((4 - (size % 4)) % 4); // Pad upwards to even multiple of 4
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-texture-format.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  decodeTextureFormat: function() { return decodeTextureFormat; },
  isTextureFormatCompressed: function() { return isTextureFormatCompressed; }
});
/* harmony import */var _decode_data_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-data-type.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// prettier-ignore
const COMPRESSED_TEXTURE_FORMAT_PREFIXES = [
    'bc1', 'bc2', 'bc3', 'bc4', 'bc5', 'bc6', 'bc7', 'etc1', 'etc2', 'eac', 'atc', 'astc', 'pvrtc'
];
const REGEX = /^(rg?b?a?)([0-9]*)([a-z]*)(-srgb)?(-webgl|-unsized)?$/;
/**
 * Returns true if a texture format is GPU compressed
 */
function isTextureFormatCompressed(textureFormat) {
    return COMPRESSED_TEXTURE_FORMAT_PREFIXES.some(prefix => textureFormat.startsWith(prefix));
}
/**
 * Decodes a vertex format, returning type, components, byte length and flags (integer, signed, normalized)
 */
function decodeTextureFormat(format) {
    const matches = REGEX.exec(format);
    if (matches) {
        const [, format, length, type, srgb, suffix] = matches;
        if (format) {
            const dataType = `${type}${length}`;
            const decodedType = (0,_decode_data_type_js__WEBPACK_IMPORTED_MODULE_0__.decodeVertexType)(dataType);
            return {
                format: format,
                components: format.length,
                // dataType - overwritten by decodedType
                srgb: srgb === '-srgb',
                unsized: suffix === '-unsized',
                webgl: suffix === '-webgl',
                ...decodedType
            };
        }
    }
    return decodeNonStandardFormat(format);
}
// https://www.w3.org/TR/webgpu/#texture-format-caps
const EXCEPTIONS = {
    // Packed 16 bit formats
    'rgba4unorm-webgl': { format: 'rgba', bpp: 2 },
    'rgb565unorm-webgl': { format: 'rgb', bpp: 2 },
    'rgb5a1unorm-webgl': { format: 'rgba', bbp: 2 },
    // Packed 32 bit formats
    rgb9e5ufloat: { format: 'rgb', bbp: 4 },
    rg11b10ufloat: { format: 'rgb', bbp: 4 },
    rgb10a2unorm: { format: 'rgba', bbp: 4 },
    'rgb10a2uint-webgl': { format: 'rgba', bbp: 4 },
    // Depth/stencil
    stencil8: { components: 1, bpp: 1, a: 'stencil' },
    depth16unorm: { components: 1, bpp: 2, a: 'depth' },
    depth24plus: { components: 1, bpp: 3, a: 'depth' },
    depth32float: { components: 1, bpp: 4, a: 'depth' },
    'depth24plus-stencil8': { components: 2, bpp: 4, a: 'depth-stencil' },
    // "depth24unorm-stencil8" feature
    'depth24unorm-stencil8': { components: 2, bpp: 4, a: 'depth-stencil' },
    // "depth32float-stencil8" feature
    'depth32float-stencil8': { components: 2, bpp: 4, a: 'depth-stencil' }
};
function decodeNonStandardFormat(format) {
    const data = EXCEPTIONS[format];
    if (!data) {
        throw new Error(`Unknown format ${format}`);
    }
    return {
        format: data.format || '',
        components: data.components || data.format?.length || 1,
        byteLength: data.bpp || 1,
        srgb: false,
        unsized: false
    };
}
/*
'r8unorm':	{s: "float"}, // 	✓	✓	✓	},
'r8snorm':	{s: "float"}, // 		✓		},
'r8uint':	{s: "uint"}, // 	✓	✓		},
'r8sint':	{s: "sint"}, // 	✓	✓		},
'rg8unorm':	{s: "float"}, // 	✓	✓	✓	},
'rg8snorm':	{s: "float"}, // 		✓		},
'rg8uint':	{s: "uint"}, // 	✓	✓		},
'rg8sint':	{s: "sint"}, // 	✓	✓		},
'rgba8unorm':	{s: "float"}, // 	✓	✓	✓	✓},
'rgba8unorm-srgb': {s: "float"}, // 	✓	✓	✓	},
'rgba8snorm':	{s: "float"}, // 		✓		✓},
'rgba8uint':	{s: "uint"}, // 	✓	✓		✓},
'rgba8sint':	{s: "sint"}, // 	✓	✓		✓},
'bgra8unorm':	{s: "float"}, // 	✓	✓	✓	},
'bgra8unorm-srgb': {s: "float"}, // 	✓	✓	✓	},
// 16-bit per component
'r16uint': {s: "uint"}, // 	✓	✓		},
'r16sint': {s: "sint"}, // 	✓	✓		},
'r16float': {s: "float"}, // 	✓	✓	✓	},
'rg16uint': {s: "uint"}, // 	✓	✓		},
'rg16sint': {s: "sint"}, // 	✓	✓		},
'rg16float': {s: "float"}, // 	✓	✓	✓	},
'rgba16uint': {s: "uint"}, // 	✓	✓		✓},
'rgba16sint': {s: "sint"}, // 	✓	✓		✓},
'rgba16float': {s: "float"}, // 	✓	✓	✓	✓},
// 32-bit per component
'r32uint': {s: "uint"}, // 	✓			✓},
'r32sint': {s: "sint"}, // 	✓			✓},
'r32float': {"unfilterable-float"	✓	✓		✓},
'rg32uint': {s: "uint"}, // 	✓			✓},
'rg32sint': {s: "sint"}, // 	✓			✓},
'rg32float': {"unfilterable-float"	✓			✓},
'rgba32uint': {s: "uint"}, // 	✓			✓},
'rgba32sint': {s: "sint"}, // 	✓			✓},
'rgba32float': {"unfilterable-float"	✓			✓},
// mixed component width
'rgb10a2unorm': {s: "float"}, // 	✓	✓	✓	}
'rg11b10ufloat': {s: "float"}, // 		✓		}
// Format	Bytes per texel	Aspect	GPUTextureSampleType	Valid image copy source	Valid image copy destination
'stencil8': {1 − 4	stencil	"uint"	✓}
'depth16unorm': {2	depth	"depth"	✓}
'depth24plus': {4	depth	"depth"	✗}
'depth24plus': {stencil8	4 − 8	depth	"depth"	✗}
'stencil': {s: "uint"}, // 	✓}
'depth32float': {4	depth	"depth"	✓	✗}
'depth24unorm': {stencil8	4	depth	"depth"	✗}
'stencil': {s: "uint"}, // 	✓}
'depth32float': {stencil8}

// Format	Bytes per block	GPUTextureSampleType	Block Size	Feature
'rgb9e5ufloat': {c: 4, s: "float",	bpp: 4/(1*1)},

'bc1-rgba-unorm': {c: 4. s: "float", bpp: 8/(4 * 4) f: 'texture-compression-bc'},
'bc1-rgba-unorm-srgb': {c: 4. s: "float", bpp: 8/(4 * 4) f: 'texture-compression-bc'},
'bc2-rgba-unorm': {c: 4. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc2-rgba-unorm-srgb': {c: 4. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc3-rgba-unorm': {c: 4. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc3-rgba-unorm-srgb': {c: 4. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc4-r-unorm': {c: 1. s: "float", bpp: 8/(4 * 4) f: 'texture-compression-bc'},
'bc4-r-snorm': {c: 1. s: "float", bpp: 8/(4 * 4) f: 'texture-compression-bc'},
'bc5-rg-unorm': {c: 2. s: "float", bpp: 16/(4 * 4) f: 'texture-compression-bc'},
'bc5-rg-snorm': { },
'bc6h-rgb-ufloat': {	16 },
'bc6h-rgb-float': { },
'bc7-rgba-unorm': {	16 },
'bc7-rgba-unorm-srgb': { },

'etc2-rgb8unorm': {	8	"float"	4 × 4	texture-compression-etc2 },
'etc2-rgb8unorm-srgb': { },
'etc2-rgb8a1unorm': {	8 },
'etc2-rgb8a1unorm-srgb': { },
'etc2-rgba8unorm': {	16 },
'etc2-rgba8unorm-srgb': { },

'eac-r11unorm': {	8 },
'eac-r11snorm': { },
'eac-rg11unorm': {	16 },
'eac-rg11snorm': { },

'astc-4x4-unorm': {	16	"float"	4 × 4	texture-compression-astc },
'astc-4x4-unorm-srgb': { },
'astc-5x4-unorm': {	16	5 × 4 },
'astc-5x4-unorm-srgb': { },
'astc-5x5-unorm': {	16	5 × 5 },
'astc-5x5-unorm-srgb': { },
'astc-6x5-unorm': {	16	6 × 5 },
'astc-6x5-unorm-srgb': { },
'astc-6x6-unorm': {	16	6 × 6 },
'astc-6x6-unorm-srgb': { },
'astc-8x5-unorm': {	16	8 × 5 },
'astc-8x5-unorm-srgb': { },
'astc-8x6-unorm': {	16	8 × 6 },
'astc-8x6-unorm-srgb': { },
'astc-8x8-unorm': {	16	8 × 8 },
'astc-8x8-unorm-srgb': { },
'astc-10x5-unorm': {	16	10 × 5 },
'astc-10x5-unorm-srgb': { },
'astc-10x6-unorm': {	16	10 × 6 },
'astc-10x6-unorm-srgb': { },
'astc-10x8-unorm': {	16	10 × 8 },
'astc-10x8-unorm-srgb': { },
'astc-10x10-unorm': {	16	10 × 10 },
'astc-10x10-unorm-srgb': { },
'astc-12x10-unorm': {	16	12 × 10 },
'astc-12x10-unorm-srgb': { },
'astc-12x12-unorm': {	16 },
*/


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-vertex-format.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  decodeVertexFormat: function() { return decodeVertexFormat; }
});
/* harmony import */var _decode_data_type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-data-type.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Decodes a vertex format, returning type, components, byte  length and flags (integer, signed, normalized)
 */
function decodeVertexFormat(format) {
    // Strip the -webgl ending if present
    let webglOnly;
    if (format.endsWith('-webgl')) {
        format.replace('-webgl', '');
        webglOnly = true;
    }
    // split components from type
    const [type_, count] = format.split('x');
    const type = type_;
    const components = (count ? parseInt(count) : 1);
    // decode the type
    const decodedType = (0,_decode_data_type_js__WEBPACK_IMPORTED_MODULE_0__.decodeVertexType)(type);
    const result = {
        type,
        components,
        byteLength: decodedType.byteLength * components,
        integer: decodedType.integer,
        signed: decodedType.signed,
        normalized: decodedType.normalized
    };
    if (webglOnly) {
        result.webglOnly = true;
    }
    return result;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/vertex-format-from-attribute.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getDataTypeFromTypedArray: function() { return getDataTypeFromTypedArray; },
  getTypedArrayFromDataType: function() { return getTypedArrayFromDataType; },
  getVertexFormatFromAttribute: function() { return getVertexFormatFromAttribute; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
function getDataTypeFromTypedArray(arrayOrType) {
    const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
    switch (type) {
        case Float32Array:
            return 'float32';
        case Uint16Array:
            return 'uint16';
        case Uint32Array:
            return 'uint32';
        case Uint8Array:
        case Uint8ClampedArray:
            return 'uint8';
        case Int8Array:
            return 'sint8';
        case Int16Array:
            return 'sint16';
        case Int32Array:
            return 'sint32';
        default:
            // Failed to deduce data type from typed array
            throw new Error(type.constructor.name);
    }
}
function getTypedArrayFromDataType(dataType) {
    switch (dataType) {
        case 'float32':
            return Float32Array;
        case 'uint32':
            return Uint32Array;
        case 'sint32':
            return Int32Array;
        case 'uint16':
        case 'unorm16':
            return Uint16Array;
        case 'sint16':
        case 'snorm16':
            return Int16Array;
        case 'uint8':
        case 'unorm8':
            return Uint8Array;
        case 'sint8':
        case 'snorm8':
            return Int8Array;
        default:
            // Failed to deduce typed array from data type
            throw new Error(dataType);
    }
}
/** Get the vertex format for an attribute with TypedArray and size */
function getVertexFormatFromAttribute(typedArray, size, normalized) {
    if (!size || size > 4) {
        throw new Error(`size ${size}`);
    }
    const components = size;
    let dataType = getDataTypeFromTypedArray(typedArray);
    if (dataType === 'uint8' || dataType === 'sint8') {
        if (components === 1 || components === 3) {
            // WebGPU 8 bit formats must be aligned to 16 bit boundaries');
            throw new Error(`size: ${size}`);
        }
        if (normalized) {
            dataType = dataType.replace('int', 'norm');
        }
        return `${dataType}x${components}`;
    }
    if (dataType === 'uint16' || dataType === 'sint16') {
        if (components === 1 || components === 3) {
            // WebGPU 16 bit formats must be aligned to 32 bit boundaries
            throw new Error(`size: ${size}`);
        }
        if (normalized) {
            dataType = dataType.replace('int', 'norm');
        }
        return `${dataType}x${components}`;
    }
    if (components === 1) {
        return dataType;
    }
    return `${dataType}x${components}`;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/init.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  VERSION: function() { return VERSION; }
});
/* harmony import */var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */var _utils_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/stats-manager.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * By adding the result of init() to Device.VERSION we guarantee it will be called
 * @returns version
 */
function initializeLuma() {
    // Version detection using babel plugin
    // @ts-expect-error
    const VERSION =  true ? "9.0.17" : 0;
    const STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';
    // Assign luma.log.level in console to control logging: \
    // 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs
    // luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;
    if (globalThis.luma && globalThis.luma.VERSION !== VERSION) {
        throw new Error(`luma.gl - multiple VERSIONs detected: ${globalThis.luma.VERSION} vs ${VERSION}`);
    }
    if (!globalThis.luma) {
        if ((0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)()) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log.log(1, `${VERSION} - ${STARTUP_MESSAGE}`)();
        }
        globalThis.luma = globalThis.luma || {
            VERSION,
            version: VERSION,
            log: _utils_log_js__WEBPACK_IMPORTED_MODULE_1__.log,
            // A global stats object that various components can add information to
            // E.g. see webgl/resource.js
            stats: _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_2__.lumaStats
        };
    }
    return VERSION;
}
const VERSION = initializeLuma();


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/compiler-log/format-compiler-log.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  formatCompilerLog: function() { return formatCompilerLog; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** @returns annotated errors or warnings */
function formatCompilerLog(shaderLog, source, options) {
    let formattedLog = '';
    const lines = source.split(/\r?\n/);
    const log = shaderLog.slice().sort((a, b) => a.lineNum - b.lineNum);
    switch (options?.showSourceCode || 'no') {
        case 'all':
            // Parse the error - note: browser and driver dependent
            let currentMessage = 0;
            for (let lineNum = 1; lineNum <= lines.length; lineNum++) {
                formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);
                while (log.length > currentMessage && log[currentMessage].lineNum === lineNum) {
                    const message = log[currentMessage++];
                    formattedLog += formatCompilerMessage(message, lines, message.lineNum, {
                        ...options,
                        inlineSource: false
                    });
                }
            }
            return formattedLog;
        case 'issues':
        case 'no':
            // Parse the error - note: browser and driver dependent
            for (const message of shaderLog) {
                formattedLog += formatCompilerMessage(message, lines, message.lineNum, {
                    inlineSource: options?.showSourceCode !== 'no'
                });
            }
            return formattedLog;
    }
}
// Helpers
/** Format one message */
function formatCompilerMessage(message, lines, lineNum, options) {
    if (options?.inlineSource) {
        const numberedLines = getNumberedLines(lines, lineNum);
        // If we got error position on line add a `^^^` indicator on next line
        const positionIndicator = message.linePos > 0 ? `${' '.repeat(message.linePos + 5)}^^^\n` : '';
        return `
${numberedLines}${positionIndicator}${message.type.toUpperCase()}: ${message.message}

`;
    }
    return options?.html
        ? `<div class='luma-compiler-log-error' style="color:red;"><b> ${message.type.toUpperCase()}: ${message.message}</b></div>`
        : `${message.type.toUpperCase()}: ${message.message}`;
}
function getNumberedLines(lines, lineNum, options) {
    let numberedLines = '';
    for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {
        const sourceLine = lines[lineIndex - 1];
        if (sourceLine !== undefined) {
            numberedLines += getNumberedLine(sourceLine, lineNum, options);
        }
    }
    return numberedLines;
}
function getNumberedLine(line, lineNum, options) {
    const escapedLine = options?.html ? escapeHTML(line) : line;
    return `${padLeft(String(lineNum), 4)}: ${escapedLine}${options?.html ? '<br/>' : '\n'}`;
}
/**
 * Pads a string with a number of spaces (space characters) to the left
 * @param {String} string - string to pad
 * @param {Number} digits - number of spaces to add
 * @return {String} string - The padded string
 */
function padLeft(string, paddedLength) {
    let result = '';
    for (let i = string.length; i < paddedLength; ++i) {
        result += ' ';
    }
    return result + string;
}
function escapeHTML(unsafe) {
    return unsafe
        .replaceAll('&', '&amp;')
        .replaceAll('<', '&lt;')
        .replaceAll('>', '&gt;')
        .replaceAll('"', '&quot;')
        .replaceAll("'", '&#039;');
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/compiler-log/get-shader-info.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getShaderInfo: function() { return getShaderInfo; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Extracts information from shader source code */
function getShaderInfo(source, defaultName) {
    return {
        name: getShaderName(source, defaultName),
        language: 'glsl',
        version: getShaderVersion(source)
    };
}
/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */
function getShaderName(shader, defaultName = 'unnamed') {
    const SHADER_NAME_REGEXP = /#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/;
    const match = SHADER_NAME_REGEXP.exec(shader);
    return match ? match[1] : defaultName;
}
/** returns GLSL shader version of given shader string */
function getShaderVersion(source) {
    let version = 100;
    const words = source.match(/[^\s]+/g);
    if (words && words.length >= 2 && words[0] === '#version') {
        const v = parseInt(words[1], 10);
        if (Number.isFinite(v)) {
            version = v;
        }
    }
    return version;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/luma.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  luma: function() { return luma; }
});
/* harmony import */var _adapter_device_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/device.js");
/* harmony import */var _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/stats-manager.js");
/* harmony import */var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _utils_assert_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




const deviceMap = new Map();
/**
 * Entry point to the luma.gl GPU abstraction
 * Register WebGPU and/or WebGL devices (controls application bundle size)
 * Run-time selection of the first available Device
 */
class luma {
    static defaultProps = {
        ..._adapter_device_js__WEBPACK_IMPORTED_MODULE_0__.Device.defaultProps,
        type: 'best-available',
        devices: undefined
    };
    /** Global stats for all devices */
    static stats = _utils_stats_manager_js__WEBPACK_IMPORTED_MODULE_1__.lumaStats;
    /** Global log */
    static log = _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log;
    static registerDevices(deviceClasses /* : typeof Device */) {
        for (const deviceClass of deviceClasses) {
            (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_3__.assert)(deviceClass.type && deviceClass.isSupported && deviceClass.create);
            deviceMap.set(deviceClass.type, deviceClass);
        }
    }
    static getAvailableDevices() {
        // @ts-expect-error
        return Array.from(deviceMap).map(Device => Device.type);
    }
    static getSupportedDevices() {
        return (Array.from(deviceMap)
            // @ts-expect-error
            .filter(Device => Device.isSupported())
            // @ts-expect-error
            .map(Device => Device.type));
    }
    static setDefaultDeviceProps(props) {
        Object.assign(_adapter_device_js__WEBPACK_IMPORTED_MODULE_0__.Device.defaultProps, props);
    }
    /** Attach to an existing GPU API handle (WebGL2RenderingContext or GPUDevice). */
    static async attachDevice(props) {
        const devices = getDeviceMap(props.devices) || deviceMap;
        // WebGL
        if (props.handle instanceof WebGL2RenderingContext) {
            const WebGLDevice = devices.get('webgl');
            if (WebGLDevice) {
                return (await WebGLDevice.attach(props.handle));
            }
        }
        // TODO - WebGPU does not yet have a stable API
        // if (props.handle instanceof GPUDevice) {
        //   const WebGPUDevice = devices.get('webgpu') as any;
        //   if (WebGPUDevice) {
        //     return (await WebGPUDevice.attach(props.handle)) as Device;
        //   }
        // }
        // null
        if (props.handle === null) {
            const UnknownDevice = devices.get('unknown');
            if (UnknownDevice) {
                return (await UnknownDevice.attach(null));
            }
        }
        throw new Error('Failed to attach device. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.');
    }
    /** Creates a device. Asynchronously. */
    static async createDevice(props = {}) {
        props = { ...luma.defaultProps, ...props };
        if (props.gl) {
            props.type = 'webgl';
        }
        const devices = getDeviceMap(props.devices) || deviceMap;
        switch (props.type) {
            case 'webgpu':
                let WebGPUDevice = devices.get('webgpu');
                if (WebGPUDevice) {
                    return await WebGPUDevice.create(props);
                }
                break;
            case 'webgl':
                let WebGLDevice = devices.get('webgl');
                if (WebGLDevice) {
                    return await WebGLDevice.create(props);
                }
                break;
            case 'unknown':
                const UnknownDevice = devices.get('unknown');
                if (UnknownDevice) {
                    return await UnknownDevice.create(props);
                }
                break;
            case 'best-available':
                WebGPUDevice = devices.get('webgpu');
                if (WebGPUDevice?.isSupported?.()) {
                    return await WebGPUDevice.create(props);
                }
                WebGLDevice = devices.get('webgl');
                if (WebGLDevice?.isSupported?.()) {
                    return await WebGLDevice.create(props);
                }
                break;
        }
        throw new Error('No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.');
    }
    static enforceWebGL2(enforce = true) {
        const prototype = HTMLCanvasElement.prototype;
        if (!enforce && prototype.originalGetContext) {
            // Reset the original getContext function
            prototype.getContext = prototype.originalGetContext;
            prototype.originalGetContext = undefined;
            return;
        }
        // Store the original getContext function
        prototype.originalGetContext = prototype.getContext;
        // Override the getContext function
        prototype.getContext = function (contextId, options) {
            // Attempt to force WebGL2 for all WebGL1 contexts
            if (contextId === 'webgl' || contextId === 'experimental-webgl') {
                return this.originalGetContext('webgl2', options);
            }
            // For any other type, return the original context
            return this.originalGetContext(contextId, options);
        };
    }
}
/** Convert a list of devices to a map */
function getDeviceMap(deviceClasses /* : typeof Device */) {
    if (!deviceClasses || deviceClasses?.length === 0) {
        return null;
    }
    const map = new Map();
    for (const deviceClass of deviceClasses) {
        // assert(deviceClass.type && deviceClass.isSupported && deviceClass.create);
        map.set(deviceClass.type, deviceClass);
    }
    return map;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform-block.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  UniformBlock: function() { return UniformBlock; }
});
/* harmony import */var _utils_array_equal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/array-equal.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * A uniform block holds values of the of uniform values for one uniform block / buffer.
 * It also does some book keeping on what has changed, to minimize unnecessary writes to uniform buffers.
 */
class UniformBlock {
    name;
    uniforms = {};
    modifiedUniforms = {};
    modified = true;
    bindingLayout = {};
    needsRedraw = 'initialized';
    constructor(props) {
        this.name = props?.name;
        // TODO - Extract uniform layout from the shaderLayout object
        if (props?.name && props?.shaderLayout) {
            const binding = props?.shaderLayout.bindings?.find(binding => binding.type === 'uniform' && binding.name === props?.name);
            if (!binding) {
                throw new Error(props?.name);
            }
            const uniformBlock = binding;
            for (const uniform of uniformBlock.uniforms || []) {
                this.bindingLayout[uniform.name] = uniform;
            }
        }
    }
    /** Set a map of uniforms */
    setUniforms(uniforms) {
        for (const [key, value] of Object.entries(uniforms)) {
            this._setUniform(key, value);
            if (!this.needsRedraw) {
                this.setNeedsRedraw(`${this.name}.${key}=${value}`);
            }
        }
    }
    setNeedsRedraw(reason) {
        this.needsRedraw = this.needsRedraw || reason;
    }
    /** Returns all uniforms */
    getAllUniforms() {
        // @ts-expect-error
        this.modifiedUniforms = {};
        this.needsRedraw = false;
        return (this.uniforms || {});
    }
    /** Set a single uniform */
    _setUniform(key, value) {
        if ((0,_utils_array_equal_js__WEBPACK_IMPORTED_MODULE_0__.arrayEqual)(this.uniforms[key], value)) {
            return;
        }
        this.uniforms[key] = (0,_utils_array_equal_js__WEBPACK_IMPORTED_MODULE_0__.arrayCopy)(value);
        this.modifiedUniforms[key] = true;
        this.modified = true;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform-buffer-layout.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  UniformBufferLayout: function() { return UniformBufferLayout; }
});
/* harmony import */var _adapter_type_utils_decode_shader_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-shader-types.js");
/* harmony import */var _utils_array_utils_flat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/array-utils-flat.js");
/* harmony import */var _utils_is_array_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/is-array.js");
/* harmony import */var _utils_log_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/**
 * Smallest buffer size that can be used for uniform buffers.
 * TODO - does this depend on device?
 */
const minBufferSize = 1024;
/**
 * Std140 layout for uniform buffers
 * Supports manual listing of uniforms
 */
class UniformBufferLayout {
    layout = {};
    /** number of bytes needed for buffer allocation */
    byteLength;
    /** Create a new UniformBufferLayout given a map of attributes. */
    constructor(uniformTypes) {
        /** number of 4 byte slots taken */
        let size = 0;
        // Add layout (type, size and offset) definitions for each uniform in the layout
        for (const [key, uniformType] of Object.entries(uniformTypes)) {
            const typeAndComponents = (0,_adapter_type_utils_decode_shader_types_js__WEBPACK_IMPORTED_MODULE_0__.decodeShaderUniformType)(uniformType);
            const { type, components: count } = typeAndComponents;
            // First, align (bump) current offset to an even multiple of current object (1, 2, 4)
            size = (0,_adapter_type_utils_decode_shader_types_js__WEBPACK_IMPORTED_MODULE_0__.alignTo)(size, count);
            // Use the aligned size as the offset of the current uniform.
            const offset = size;
            // Then, add our object's padded size ((1, 2, multiple of 4) to the current offset
            size += count;
            this.layout[key] = { type, size: count, offset };
        }
        size += (4 - (size % 4)) % 4;
        const actualByteLength = size * 4;
        this.byteLength = Math.max(actualByteLength, minBufferSize);
    }
    /** Get the data for the complete buffer */
    getData(uniformValues) {
        const bufferSize = Math.max(this.byteLength, minBufferSize);
        // Allocate three typed arrays pointing at same memory
        const arrayBuffer = (0,_utils_array_utils_flat_js__WEBPACK_IMPORTED_MODULE_1__.getScratchArrayBuffer)(bufferSize);
        const typedArrays = {
            i32: new Int32Array(arrayBuffer),
            u32: new Uint32Array(arrayBuffer),
            f32: new Float32Array(arrayBuffer),
            // TODO not implemented
            f16: new Uint16Array(arrayBuffer)
        };
        // TODO is this needed?
        // typedArrays.i32.fill(0);
        for (const [name, value] of Object.entries(uniformValues)) {
            const uniformLayout = this.layout[name];
            if (!uniformLayout) {
                _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Supplied uniform value ${name} not present in uniform block layout`)();
                // eslint-disable-next-line no-continue
                continue;
            }
            const { type, size, offset } = uniformLayout;
            const typedArray = typedArrays[type];
            if (size === 1) {
                if (typeof value !== 'number' && typeof value !== 'boolean') {
                    _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Supplied value for single component uniform ${name} is not a number: ${value}`)();
                    // eslint-disable-next-line no-continue
                    continue;
                }
                // single value -> just set it
                typedArray[offset] = Number(value);
            }
            else {
                const numericArray = (0,_utils_is_array_js__WEBPACK_IMPORTED_MODULE_3__.isNumberArray)(value);
                if (!numericArray) {
                    _utils_log_js__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Supplied value for multi component / array uniform ${name} is not a numeric array: ${value}`)();
                    // eslint-disable-next-line no-continue
                    continue;
                }
                // vector/matrix -> copy the supplied (typed) array, starting from offset
                // TODO: we should limit or check size in case the supplied data overflows
                typedArray.set(numericArray, offset);
            }
        }
        return new Uint8Array(arrayBuffer);
    }
    /** Does this layout have a field with specified name */
    has(name) {
        return Boolean(this.layout[name]);
    }
    /** Get offset and size for a field with specified name */
    get(name) {
        const layout = this.layout[name];
        return layout;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform-store.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  UniformStore: function() { return UniformStore; }
});
/* harmony import */var _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */var _uniform_block_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform-block.js");
/* harmony import */var _uniform_buffer_layout_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform-buffer-layout.js");
/* harmony import */var _utils_log_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/**
 * A uniform store holds a uniform values for one or more uniform blocks,
 * - It can generate binary data for any uniform buffer
 * - It can manage a uniform buffer for each block
 * - It can update managed uniform buffers with a single call
 * - It performs some book keeping on what has changed to minimize unnecessary writes to uniform buffers.
 */
class UniformStore {
    /** Stores the uniform values for each uniform block */
    uniformBlocks = new Map();
    /** Can generate data for a uniform buffer for each block from data */
    uniformBufferLayouts = new Map();
    /** Actual buffer for the blocks */
    uniformBuffers = new Map();
    /**
     * Create a new UniformStore instance
     * @param blocks
     */
    constructor(blocks) {
        for (const [bufferName, block] of Object.entries(blocks)) {
            const uniformBufferName = bufferName;
            // Create a layout object to help us generate correctly formatted binary uniform buffers
            const uniformBufferLayout = new _uniform_buffer_layout_js__WEBPACK_IMPORTED_MODULE_0__.UniformBufferLayout(block.uniformTypes || {});
            this.uniformBufferLayouts.set(uniformBufferName, uniformBufferLayout);
            // Create a Uniform block to store the uniforms for each buffer.
            const uniformBlock = new _uniform_block_js__WEBPACK_IMPORTED_MODULE_1__.UniformBlock({ name: bufferName });
            uniformBlock.setUniforms(block.defaultUniforms || {});
            this.uniformBlocks.set(uniformBufferName, uniformBlock);
        }
    }
    /** Destroy any managed uniform buffers */
    destroy() {
        for (const uniformBuffer of this.uniformBuffers.values()) {
            uniformBuffer.destroy();
        }
    }
    /**
     * Set uniforms
     * Makes all properties partial
     */
    setUniforms(uniforms) {
        for (const [blockName, uniformValues] of Object.entries(uniforms)) {
            this.uniformBlocks.get(blockName).setUniforms(uniformValues);
            // We leverage logging in updateUniformBuffers(), even though slightly less efficient
            // this.updateUniformBuffer(blockName);
        }
        this.updateUniformBuffers();
    }
    /** Get the required minimum length of the uniform buffer */
    getUniformBufferByteLength(uniformBufferName) {
        return this.uniformBufferLayouts.get(uniformBufferName).byteLength;
    }
    /** Get formatted binary memory that can be uploaded to a buffer */
    getUniformBufferData(uniformBufferName) {
        const uniformValues = this.uniformBlocks.get(uniformBufferName).getAllUniforms();
        return this.uniformBufferLayouts.get(uniformBufferName).getData(uniformValues);
    }
    /**
     * Creates an unmanaged uniform buffer (umnanaged means that application is responsible for destroying it)
     * The new buffer is initialized with current / supplied values
     */
    createUniformBuffer(device, uniformBufferName, uniforms) {
        if (uniforms) {
            this.setUniforms(uniforms);
        }
        const byteLength = this.getUniformBufferByteLength(uniformBufferName);
        const uniformBuffer = device.createBuffer({
            usage: _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__.Buffer.UNIFORM | _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__.Buffer.COPY_DST,
            byteLength
        });
        // Note that this clears the needs redraw flag
        const uniformBufferData = this.getUniformBufferData(uniformBufferName);
        uniformBuffer.write(uniformBufferData);
        return uniformBuffer;
    }
    /** Get the managed uniform buffer. "managed" resources are destroyed when the uniformStore is destroyed. */
    getManagedUniformBuffer(device, uniformBufferName) {
        if (!this.uniformBuffers.get(uniformBufferName)) {
            const byteLength = this.getUniformBufferByteLength(uniformBufferName);
            const uniformBuffer = device.createBuffer({
                usage: _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__.Buffer.UNIFORM | _adapter_resources_buffer_js__WEBPACK_IMPORTED_MODULE_2__.Buffer.COPY_DST,
                byteLength
            });
            this.uniformBuffers.set(uniformBufferName, uniformBuffer);
        }
        // this.updateUniformBuffers();
        return this.uniformBuffers.get(uniformBufferName);
    }
    /** Updates all uniform buffers where values have changed */
    updateUniformBuffers() {
        let reason = false;
        for (const uniformBufferName of this.uniformBlocks.keys()) {
            const bufferReason = this.updateUniformBuffer(uniformBufferName);
            reason ||= bufferReason;
        }
        if (reason) {
            _utils_log_js__WEBPACK_IMPORTED_MODULE_3__.log.log(3, `UniformStore.updateUniformBuffers(): ${reason}`)();
        }
        return reason;
    }
    /** Update one uniform buffer. Only updates if values have changed */
    updateUniformBuffer(uniformBufferName) {
        const uniformBlock = this.uniformBlocks.get(uniformBufferName);
        const uniformBuffer = this.uniformBuffers.get(uniformBufferName);
        let reason = false;
        if (uniformBuffer && uniformBlock.needsRedraw) {
            reason ||= uniformBlock.needsRedraw;
            // This clears the needs redraw flag
            const uniformBufferData = this.getUniformBufferData(uniformBufferName);
            const uniformBuffer = this.uniformBuffers.get(uniformBufferName);
            uniformBuffer.write(uniformBufferData);
            // logging - TODO - don't query the values unnecessarily
            const uniformValues = this.uniformBlocks.get(uniformBufferName).getAllUniforms();
            _utils_log_js__WEBPACK_IMPORTED_MODULE_3__.log.log(4, `Writing to uniform buffer ${String(uniformBufferName)}`, uniformBufferData, uniformValues)();
        }
        return reason;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isUniformValue: function() { return isUniformValue; },
  splitUniformsAndBindings: function() { return splitUniformsAndBindings; }
});
/* harmony import */var _utils_is_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/is-array.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

function isUniformValue(value) {
    return (0,_utils_is_array_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(value) !== null || typeof value === 'number' || typeof value === 'boolean';
}
function splitUniformsAndBindings(uniforms) {
    const result = { bindings: {}, uniforms: {} };
    Object.keys(uniforms).forEach(name => {
        const uniform = uniforms[name];
        if (isUniformValue(uniform)) {
            result.uniforms[name] = uniform;
        }
        else {
            result.bindings[name] = uniform;
        }
    });
    return result;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/array-equal.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  arrayCopy: function() { return arrayCopy; },
  arrayEqual: function() { return arrayEqual; }
});
/* harmony import */var _is_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/is-array.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Test if two arrays are deep equal, with a length limit that defaults to 16 */
function arrayEqual(a, b, limit = 16) {
    if (a !== b) {
        return false;
    }
    const arrayA = (0,_is_array_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(a);
    if (!arrayA) {
        return false;
    }
    const arrayB = (0,_is_array_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(b);
    if (arrayB && arrayA.length === arrayB.length) {
        for (let i = 0; i < arrayA.length; ++i) {
            if (arrayB[i] !== arrayA[i]) {
                return false;
            }
        }
    }
    return true;
}
/** Copy a value */
function arrayCopy(a) {
    const numberArray = (0,_is_array_js__WEBPACK_IMPORTED_MODULE_0__.isNumberArray)(a);
    if (numberArray) {
        return numberArray.slice();
    }
    return a;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/array-utils-flat.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  fillArray: function() { return fillArray; },
  getScratchArray: function() { return getScratchArray; },
  getScratchArrayBuffer: function() { return getScratchArrayBuffer; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
let arrayBuffer;
function getScratchArrayBuffer(byteLength) {
    if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {
        arrayBuffer = new ArrayBuffer(byteLength);
    }
    return arrayBuffer;
}
function getScratchArray(Type, length) {
    const scratchArrayBuffer = getScratchArrayBuffer(Type.BYTES_PER_ELEMENT * length);
    return new Type(scratchArrayBuffer, 0, length); // arrayBuffer, byteOffset, length (in elements)
}
// Uses copyWithin to significantly speed up typed array value filling
function fillArray(options) {
    const { target, source, start = 0, count = 1 } = options;
    const length = source.length;
    const total = count * length;
    let copied = 0;
    for (let i = start; copied < length; copied++) {
        target[i++] = source[copied];
    }
    while (copied < total) {
        // If we have copied less than half, copy everything we got
        // else copy remaining in one operation
        if (copied < total - copied) {
            target.copyWithin(start + copied, start, start + copied);
            copied *= 2;
        }
        else {
            target.copyWithin(start + copied, start, start + total - copied);
            copied = total;
        }
    }
    return options.target;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  assert: function() { return assert; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Recommendation is to ignore message but current test suite checks agains the
// message so keep it for now.
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'luma.gl: assertion failed.');
    }
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/cast.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  cast: function() { return cast; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Helper for type downcasts, e.g. Buffer -> WebGPUBuffer */
function cast(value) {
    return value;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/check-props.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  checkProps: function() { return checkProps; }
});
/* harmony import */var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

function checkProps(className, props, propChecks) {
    const { removedProps = {}, deprecatedProps = {}, replacedProps = {} } = propChecks;
    // removedProps: Removed props no longer supported
    // print error and link to upgrade guide
    for (const propName in removedProps) {
        if (propName in props) {
            const replacementProp = removedProps[propName];
            const replacement = replacementProp ? `${className}.${removedProps[propName]}` : 'N/A';
            _log_js__WEBPACK_IMPORTED_MODULE_0__.log.removed(`${className}.${propName}`, replacement)();
        }
    }
    // deprecatedProps: Deprecated props that can not be autosubstituted
    // print warning and rely on caller to substitute
    for (const propName in deprecatedProps) {
        if (propName in props) {
            const replacementProp = deprecatedProps[propName];
            _log_js__WEBPACK_IMPORTED_MODULE_0__.log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();
        }
    }
    // replacedProps: Deprecated props that can be autosubstituted
    // print warning and return updated props object
    let newProps = null;
    for (const [propName, replacementProp] of Object.entries(replacedProps)) {
        if (propName in props) {
            _log_js__WEBPACK_IMPORTED_MODULE_0__.log.deprecated(`${className}.${propName}`, `${className}.${replacementProp}`)();
            newProps = newProps || Object.assign({}, props);
            newProps[replacementProp] = props[propName];
            delete newProps[propName];
        }
    }
    return newProps || props;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/deep-equal.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  deepEqual: function() { return deepEqual; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Fast partial deep equal for prop.
 *
 * @param a Prop
 * @param b Prop to compare against `a`
 * @param depth Depth to which to recurse in nested Objects/Arrays. Use 0 (default) for shallow comparison, -1 for infinite depth
 */
/* eslint-disable complexity */
function deepEqual(a, b, depth) {
    if (a === b) {
        return true;
    }
    if (!depth || !a || !b) {
        return false;
    }
    if (Array.isArray(a)) {
        if (!Array.isArray(b) || a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (!deepEqual(a[i], b[i], depth - 1)) {
                return false;
            }
        }
        return true;
    }
    if (Array.isArray(b)) {
        return false;
    }
    if (typeof a === 'object' && typeof b === 'object') {
        const aKeys = Object.keys(a);
        const bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) {
            return false;
        }
        for (const key of aKeys) {
            if (!b.hasOwnProperty(key)) {
                return false;
            }
            if (!deepEqual(a[key], b[key], depth - 1)) {
                return false;
            }
        }
        return true;
    }
    return false;
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/is-array.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isNumberArray: function() { return isNumberArray; },
  isTypedArray: function() { return isTypedArray; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Check is an array is a typed array
 * @param value value to be tested
 * @returns input as TypedArray, or null
 * @todo this should be provided by @math.gl/types
 */
function isTypedArray(value) {
    return ArrayBuffer.isView(value) && !(value instanceof DataView) ? value : null;
}
/**
 * Check is an array is a numeric array (typed array or array of numbers)
 * @param value value to be tested
 * @returns input as NumberArray, or null
 * @todo this should be provided by @math.gl/types
 */
function isNumberArray(value) {
    if (Array.isArray(value)) {
        return value.length === 0 || typeof value[0] === 'number' ? value : null;
    }
    return isTypedArray(value);
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/load-file.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  loadFile: function() { return loadFile; },
  loadImage: function() { return loadImage; },
  loadImageBitmap: function() { return loadImageBitmap; },
  loadScript: function() { return loadScript; },
  setPathPrefix: function() { return setPathPrefix; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
let pathPrefix = '';
/**
 * Set a relative path prefix
 */
function setPathPrefix(prefix) {
    pathPrefix = prefix;
}
/**
 * Reads raw file data. Respects setPathPrefix.
 */
async function loadFile(url, options) {
    url = url.startsWith('http') ? url : pathPrefix + url;
    const dataType = options?.dataType || 'text';
    const response = await fetch(url, options);
    return await response[dataType]();
}
/**
 * Loads ImageBitmap asynchronously. Respects setPathPrefix.
 * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'
 * @returns a promise tracking the load
 */
async function loadImageBitmap(url, opts) {
    const image = new Image();
    image.crossOrigin = opts?.crossOrigin || 'anonymous';
    image.src = url.startsWith('http') ? url : pathPrefix + url;
    await image.decode();
    return await createImageBitmap(image);
}
/**
 * Loads image asynchronously. Respects setPathPrefix.
 * image.crossOrigin can be set via opts.crossOrigin, default to 'anonymous'
 * @returns a promise tracking the load
 * @deprecated Use `loadImageBitmap()` unless you are supporting old versions of Safari.
 */
async function loadImage(url, opts) {
    return await new Promise((resolve, reject) => {
        try {
            const image = new Image();
            image.onload = () => resolve(image);
            image.onerror = () => reject(new Error(`Could not load image ${url}.`));
            image.crossOrigin = opts?.crossOrigin || 'anonymous';
            image.src = url.startsWith('http') ? url : pathPrefix + url;
        }
        catch (error) {
            reject(error);
        }
    });
}
/**
 * Load a script (identified by an url). When the url returns, the
 * content of this file is added into a new script element, attached to the DOM (body element)
 * @param scriptUrl defines the url of the script to laod
 * @param scriptId defines the id of the script element
 */
async function loadScript(scriptUrl, scriptId) {
    const head = document.getElementsByTagName('head')[0];
    if (!head) {
        throw new Error('loadScript');
    }
    const script = document.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', scriptUrl);
    if (scriptId) {
        script.id = scriptId;
    }
    return new Promise((resolve, reject) => {
        script.onload = resolve;
        script.onerror = error => reject(new Error(`Unable to load script '${scriptUrl}': ${error}`));
        head.appendChild(script);
    });
}


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  log: function() { return log; }
});
/* harmony import */var _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Global log instance */
const log = new _probe_gl_log__WEBPACK_IMPORTED_MODULE_0__.Log({ id: 'luma.gl' });


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/stats-manager.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  StatsManager: function() { return StatsManager; },
  lumaStats: function() { return lumaStats; }
});
/* harmony import */var _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/index.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Helper class managing a collection of probe.gl stats objects
 */
class StatsManager {
    stats = new Map();
    getStats(name) {
        return this.get(name);
    }
    get(name) {
        if (!this.stats.has(name)) {
            this.stats.set(name, new _probe_gl_stats__WEBPACK_IMPORTED_MODULE_0__.Stats({ id: name }));
        }
        return this.stats.get(name);
    }
}
/** Global stats for all luma.gl devices */
const lumaStats = new StatsManager();


}),
"../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/utils.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isObjectEmpty: function() { return isObjectEmpty; },
  uid: function() { return uid; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const uidCounters = {};
/**
 * Returns a UID.
 * @param id= - Identifier base name
 * @return uid
 **/
function uid(id = 'id') {
    uidCounters[id] = uidCounters[id] || 1;
    const count = uidCounters[id]++;
    return `${id}-${count}`;
}
/** Returns true if given object is empty, false otherwise. */
function isObjectEmpty(obj) {
    let isEmpty = true;
    // @ts-ignore key is unused
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    for (const key in obj) {
        isEmpty = false;
        break;
    }
    return isEmpty;
}


}),
"../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/debug/debug-framebuffer.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  debugFramebuffer: function() { return debugFramebuffer; }
});
// import {copyTextureToImage} from '../debug/copy-texture-to-image';
/** Only works with 1st device? */
let canvas = null;
let ctx = null;
// let targetImage: HTMLImageElement | null = null;
/** Debug utility to draw FBO contents onto screen */
// eslint-disable-next-line
function debugFramebuffer(fbo, { id, minimap, opaque, top = '0', left = '0', rgbaScale = 1 }) {
    if (!canvas) {
        canvas = document.createElement('canvas');
        canvas.id = id;
        canvas.title = id;
        canvas.style.zIndex = '100';
        canvas.style.position = 'absolute';
        canvas.style.top = top; // ⚠️
        canvas.style.left = left; // ⚠️
        canvas.style.border = 'blue 1px solid';
        canvas.style.transform = 'scaleY(-1)';
        document.body.appendChild(canvas);
        ctx = canvas.getContext('2d');
        // targetImage = new Image();
    }
    // const canvasHeight = (minimap ? 2 : 1) * fbo.height;
    if (canvas.width !== fbo.width || canvas.height !== fbo.height) {
        canvas.width = fbo.width / 2;
        canvas.height = fbo.height / 2;
        canvas.style.width = '400px';
        canvas.style.height = '400px';
    }
    // const image = copyTextureToImage(fbo, {targetMaxHeight: 100, targetImage});
    // ctx.drawImage(image, 0, 0);
    const color = fbo.device.readPixelsToArrayWebGL(fbo);
    const imageData = ctx.createImageData(fbo.width, fbo.height);
    // Full map
    const offset = 0;
    // if (color.some((v) => v > 0)) {
    //   console.error('THERE IS NON-ZERO DATA IN THE FBO!');
    // }
    for (let i = 0; i < color.length; i += 4) {
        imageData.data[offset + i + 0] = color[i + 0] * rgbaScale;
        imageData.data[offset + i + 1] = color[i + 1] * rgbaScale;
        imageData.data[offset + i + 2] = color[i + 2] * rgbaScale;
        imageData.data[offset + i + 3] = opaque ? 255 : color[i + 3] * rgbaScale;
    }
    ctx.putImageData(imageData, 0, 0);
}


}),
"../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/debug/debug-shader-layout.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getDebugTableForShaderLayout: function() { return getDebugTableForShaderLayout; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Extracts a table suitable for `console.table()` from a shader layout to assist in debugging.
 * @param layout shader layout
 * @param name app should provide the most meaningful name, usually the model or pipeline name / id.
 * @returns
 */
function getDebugTableForShaderLayout(layout, name) {
    const table = {};
    const header = 'Values'; // '`Shader Layout for ${name}`;
    if (layout.attributes.length === 0 && !layout.varyings?.length) {
        return { 'No attributes or varyings': { [header]: 'N/A' } };
    }
    for (const attributeDeclaration of layout.attributes) {
        if (attributeDeclaration) {
            const glslDeclaration = `${attributeDeclaration.location} ${attributeDeclaration.name}: ${attributeDeclaration.type}`;
            table[`in ${glslDeclaration}`] = { [header]: attributeDeclaration.stepMode || 'vertex' };
        }
    }
    for (const varyingDeclaration of layout.varyings || []) {
        const glslDeclaration = `${varyingDeclaration.location} ${varyingDeclaration.name}`;
        table[`out ${glslDeclaration}`] = { [header]: JSON.stringify(varyingDeclaration.accessor) };
    }
    return table;
}


}),
"../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/geometry/gpu-geometry.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  GPUGeometry: function() { return GPUGeometry; },
  getAttributeBuffersFromGeometry: function() { return getAttributeBuffersFromGeometry; },
  getIndexBufferFromGeometry: function() { return getIndexBufferFromGeometry; },
  makeGPUGeometry: function() { return makeGPUGeometry; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/vertex-format-from-attribute.js");

class GPUGeometry {
    id;
    userData = {};
    /** Determines how vertices are read from the 'vertex' attributes */
    topology;
    bufferLayout = [];
    vertexCount;
    indices;
    attributes;
    constructor(props) {
        this.id = props.id || (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.uid)('geometry');
        this.topology = props.topology;
        this.indices = props.indices || null;
        this.attributes = props.attributes;
        this.vertexCount = props.vertexCount;
        this.bufferLayout = props.bufferLayout || [];
        if (this.indices) {
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(this.indices.usage === _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.Buffer.INDEX);
        }
    }
    destroy() {
        this.indices?.destroy();
        for (const attribute of Object.values(this.attributes)) {
            attribute.destroy();
        }
    }
    getVertexCount() {
        return this.vertexCount;
    }
    getAttributes() {
        return this.attributes;
    }
    getIndexes() {
        return this.indices;
    }
    _calculateVertexCount(positions) {
        // Assume that positions is a fully packed float32x3 buffer
        const vertexCount = positions.byteLength / 12;
        return vertexCount;
    }
}
function makeGPUGeometry(device, geometry) {
    if (geometry instanceof GPUGeometry) {
        return geometry;
    }
    const indices = getIndexBufferFromGeometry(device, geometry);
    const { attributes, bufferLayout } = getAttributeBuffersFromGeometry(device, geometry);
    return new GPUGeometry({
        topology: geometry.topology || 'triangle-list',
        bufferLayout,
        vertexCount: geometry.vertexCount,
        indices,
        attributes
    });
}
function getIndexBufferFromGeometry(device, geometry) {
    if (!geometry.indices) {
        return undefined;
    }
    const data = geometry.indices.value;
    return device.createBuffer({ usage: _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.Buffer.INDEX, data });
}
function getAttributeBuffersFromGeometry(device, geometry) {
    const bufferLayout = [];
    const attributes = {};
    for (const [attributeName, attribute] of Object.entries(geometry.attributes)) {
        let name = attributeName;
        // TODO Map some GLTF attribute names (is this still needed?)
        switch (attributeName) {
            case 'POSITION':
                name = 'positions';
                break;
            case 'NORMAL':
                name = 'normals';
                break;
            case 'TEXCOORD_0':
                name = 'texCoords';
                break;
            case 'COLOR_0':
                name = 'colors';
                break;
        }
        attributes[name] = device.createBuffer({ data: attribute.value, id: `${attributeName}-buffer` });
        const { value, size, normalized } = attribute;
        bufferLayout.push({ name, format: (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.getVertexFormatFromAttribute)(value, size, normalized) });
    }
    const vertexCount = geometry._calculateVertexCount(geometry.attributes, geometry.indices);
    return { attributes, bufferLayout, vertexCount };
}


}),
"../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/lib/pipeline-factory.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  PipelineFactory: function() { return PipelineFactory; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/compute-pipeline.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Efficiently creates / caches pipelines
 */
class PipelineFactory {
    static defaultProps = { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPipeline.defaultProps };
    device;
    _hashCounter = 0;
    _hashes = {};
    _renderPipelineCache = {};
    _computePipelineCache = {};
    /** Get the singleton default pipeline factory for the specified device */
    static getDefaultPipelineFactory(device) {
        device._lumaData.defaultPipelineFactory =
            device._lumaData.defaultPipelineFactory || new PipelineFactory(device);
        return device._lumaData.defaultPipelineFactory;
    }
    constructor(device) {
        this.device = device;
    }
    /** Return a RenderPipeline matching props. Reuses a similar pipeline if already created. */
    createRenderPipeline(props) {
        const allProps = { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPipeline.defaultProps, ...props };
        const hash = this._hashRenderPipeline(allProps);
        if (!this._renderPipelineCache[hash]) {
            const pipeline = this.device.createRenderPipeline({
                ...allProps,
                id: allProps.id ? `${allProps.id}-cached` : undefined
            });
            pipeline.hash = hash;
            this._renderPipelineCache[hash] = { pipeline, useCount: 0 };
        }
        this._renderPipelineCache[hash].useCount++;
        return this._renderPipelineCache[hash].pipeline;
    }
    createComputePipeline(props) {
        const allProps = { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.ComputePipeline.defaultProps, ...props };
        const hash = this._hashComputePipeline(allProps);
        if (!this._computePipelineCache[hash]) {
            const pipeline = this.device.createComputePipeline({
                ...allProps,
                id: allProps.id ? `${allProps.id}-cached` : undefined
            });
            pipeline.hash = hash;
            this._computePipelineCache[hash] = { pipeline, useCount: 0 };
        }
        this._computePipelineCache[hash].useCount++;
        return this._computePipelineCache[hash].pipeline;
    }
    release(pipeline) {
        const hash = pipeline.hash;
        const cache = pipeline instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.ComputePipeline ? this._computePipelineCache : this._renderPipelineCache;
        cache[hash].useCount--;
        if (cache[hash].useCount === 0) {
            cache[hash].pipeline.destroy();
            delete cache[hash];
        }
    }
    // PRIVATE
    _hashComputePipeline(props) {
        const shaderHash = this._getHash(props.shader.source);
        return `${shaderHash}`;
    }
    /** Calculate a hash based on all the inputs for a render pipeline */
    _hashRenderPipeline(props) {
        const vsHash = this._getHash(props.vs.source);
        const fsHash = props.fs ? this._getHash(props.fs.source) : 0;
        // WebGL specific
        // const {varyings = [], bufferMode = {}} = props;
        // const varyingHashes = varyings.map((v) => this._getHash(v));
        const varyingHash = '-'; // `${varyingHashes.join('/')}B${bufferMode}`
        const bufferLayoutHash = this._getHash(JSON.stringify(props.bufferLayout));
        switch (this.device.type) {
            case 'webgl':
                // WebGL is more dynamic
                return `${vsHash}/${fsHash}V${varyingHash}BL${bufferLayoutHash}`;
            default:
                // On WebGPU we need to rebuild the pipeline if topology, parameters or bufferLayout change
                const parameterHash = this._getHash(JSON.stringify(props.parameters));
                // TODO - Can json.stringify() generate different strings for equivalent objects if order of params is different?
                // create a deepHash() to deduplicate?
                return `${vsHash}/${fsHash}V${varyingHash}T${props.topology}P${parameterHash}BL${bufferLayoutHash}`;
        }
    }
    _getHash(key) {
        if (this._hashes[key] === undefined) {
            this._hashes[key] = this._hashCounter++;
        }
        return this._hashes[key];
    }
}


}),
"../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/lib/shader-factory.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ShaderFactory: function() { return ShaderFactory; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/shader.js");

/** Manages a cached pool of Shaders for reuse. */
class ShaderFactory {
    static defaultProps = { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Shader.defaultProps };
    device;
    _cache = {};
    /** Returns the default ShaderFactory for the given {@link Device}, creating one if necessary. */
    static getDefaultShaderFactory(device) {
        device._lumaData.defaultShaderFactory ||= new ShaderFactory(device);
        return device._lumaData.defaultShaderFactory;
    }
    /** @internal */
    constructor(device) {
        this.device = device;
    }
    /** Requests a {@link Shader} from the cache, creating a new Shader only if necessary. */
    createShader(props) {
        const key = this._hashShader(props);
        let cacheEntry = this._cache[key];
        if (!cacheEntry) {
            const shader = this.device.createShader({
                ...props,
                id: props.id ? `${props.id}-cached` : undefined
            });
            this._cache[key] = cacheEntry = { shader, useCount: 0 };
        }
        cacheEntry.useCount++;
        return cacheEntry.shader;
    }
    /** Releases a previously-requested {@link Shader}, destroying it if no users remain. */
    release(shader) {
        const key = this._hashShader(shader);
        const cacheEntry = this._cache[key];
        if (cacheEntry) {
            cacheEntry.useCount--;
            if (cacheEntry.useCount === 0) {
                delete this._cache[key];
                cacheEntry.shader.destroy();
            }
        }
    }
    // PRIVATE
    _hashShader(value) {
        return `${value.stage}:${value.source}`;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/model/model.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Model: function() { return Model; },
  getPlatformInfo: function() { return getPlatformInfo; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/sampler.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform-store.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/deep-equal.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/attribute-utils/get-attribute-from-layouts.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/vertex-format-from-attribute.js");
/* harmony import */var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js");
/* harmony import */var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/wgsl/get-shader-layout-wgsl.js");
/* harmony import */var _geometry_gpu_geometry_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/geometry/gpu-geometry.js");
/* harmony import */var _shader_inputs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/shader-inputs.js");
/* harmony import */var _lib_pipeline_factory_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/lib/pipeline-factory.js");
/* harmony import */var _lib_shader_factory_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/lib/shader-factory.js");
/* harmony import */var _debug_debug_shader_layout_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/debug/debug-shader-layout.js");
/* harmony import */var _debug_debug_framebuffer_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/debug/debug-framebuffer.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors











const LOG_DRAW_PRIORITY = 2;
const LOG_DRAW_TIMEOUT = 10000;
/**
 * v9 Model API
 * A model
 * - automatically reuses pipelines (programs) when possible
 * - automatically rebuilds pipelines if necessary to accommodate changed settings
 * shadertools integration
 * - accepts modules and performs shader transpilation
 */
class Model {
    static defaultProps = {
        ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPipeline.defaultProps,
        source: null,
        vs: null,
        fs: null,
        id: 'unnamed',
        handle: undefined,
        userData: {},
        defines: {},
        modules: [],
        moduleSettings: undefined,
        geometry: null,
        indexBuffer: null,
        attributes: {},
        constantAttributes: {},
        varyings: [],
        isInstanced: undefined,
        instanceCount: 0,
        vertexCount: 0,
        shaderInputs: undefined,
        pipelineFactory: undefined,
        shaderFactory: undefined,
        transformFeedback: undefined,
        shaderAssembler: _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_1__.ShaderAssembler.getDefaultShaderAssembler(),
        debugShaders: undefined,
        disableWarnings: undefined
    };
    device;
    id;
    source;
    vs;
    fs;
    pipelineFactory;
    shaderFactory;
    userData = {};
    // Fixed properties (change can trigger pipeline rebuild)
    /** The render pipeline GPU parameters, depth testing etc */
    parameters;
    /** The primitive topology */
    topology;
    /** Buffer layout */
    bufferLayout;
    // Dynamic properties
    /** Use instanced rendering */
    isInstanced = undefined;
    /** instance count. `undefined` means not instanced */
    instanceCount = 0;
    /** Vertex count */
    vertexCount;
    /** Index buffer */
    indexBuffer = null;
    /** Buffer-valued attributes */
    bufferAttributes = {};
    /** Constant-valued attributes */
    constantAttributes = {};
    /** Bindings (textures, samplers, uniform buffers) */
    bindings = {};
    /** Sets uniforms @deprecated Use uniform buffers and setBindings() for portability*/
    uniforms = {};
    /**
     * VertexArray
     * @note not implemented: if bufferLayout is updated, vertex array has to be rebuilt!
     * @todo - allow application to define multiple vertex arrays?
     * */
    vertexArray;
    /** TransformFeedback, WebGL 2 only. */
    transformFeedback = null;
    /** The underlying GPU "program". @note May be recreated if parameters change */
    pipeline;
    /** ShaderInputs instance */
    shaderInputs;
    _uniformStore;
    _attributeInfos = {};
    _gpuGeometry = null;
    _getModuleUniforms;
    props;
    _pipelineNeedsUpdate = 'newly created';
    _needsRedraw = 'initializing';
    _destroyed = false;
    /** "Time" of last draw. Monotonically increasing timestamp */
    _lastDrawTimestamp = -1;
    constructor(device, props) {
        this.props = { ...Model.defaultProps, ...props };
        props = this.props;
        this.id = props.id || (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.uid)('model');
        this.device = device;
        Object.assign(this.userData, props.userData);
        // Setup shader module inputs
        const moduleMap = Object.fromEntries(this.props.modules?.map(module => [module.name, module]) || []);
        this.setShaderInputs(props.shaderInputs || new _shader_inputs_js__WEBPACK_IMPORTED_MODULE_3__.ShaderInputs(moduleMap));
        // Setup shader assembler
        const platformInfo = getPlatformInfo(device);
        // Extract modules from shader inputs if not supplied
        const modules = (this.props.modules?.length > 0 ? this.props.modules : this.shaderInputs?.getModules()) || [];
        const isWebGPU = this.device.type === 'webgpu';
        // WebGPU
        // TODO - hack to support unified WGSL shader
        // TODO - this is wrong, compile a single shader
        if (isWebGPU && this.props.source) {
            // WGSL
            this.props.shaderLayout ||= (0,_luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_4__.getShaderLayoutFromWGSL)(this.props.source);
            const { source, getUniforms } = this.props.shaderAssembler.assembleShader({
                platformInfo,
                ...this.props,
                modules
            });
            this.source = source;
            this._getModuleUniforms = getUniforms;
        }
        else {
            // GLSL
            const { vs, fs, getUniforms } = this.props.shaderAssembler.assembleShaderPair({
                platformInfo,
                ...this.props,
                modules
            });
            this.vs = vs;
            this.fs = fs;
            this._getModuleUniforms = getUniforms;
        }
        this.vertexCount = this.props.vertexCount;
        this.instanceCount = this.props.instanceCount;
        this.topology = this.props.topology;
        this.bufferLayout = this.props.bufferLayout;
        this.parameters = this.props.parameters;
        // Geometry, if provided, sets topology and vertex cound
        if (props.geometry) {
            this.setGeometry(props.geometry);
        }
        this.pipelineFactory =
            props.pipelineFactory || _lib_pipeline_factory_js__WEBPACK_IMPORTED_MODULE_5__.PipelineFactory.getDefaultPipelineFactory(this.device);
        this.shaderFactory = props.shaderFactory || _lib_shader_factory_js__WEBPACK_IMPORTED_MODULE_6__.ShaderFactory.getDefaultShaderFactory(this.device);
        // Create the pipeline
        // @note order is important
        this.pipeline = this._updatePipeline();
        this.vertexArray = device.createVertexArray({
            renderPipeline: this.pipeline
        });
        // Now we can apply geometry attributes
        if (this._gpuGeometry) {
            this._setGeometryAttributes(this._gpuGeometry);
        }
        // Apply any dynamic settings that will not trigger pipeline change
        if ('isInstanced' in props) {
            this.isInstanced = props.isInstanced;
        }
        if (props.instanceCount) {
            this.setInstanceCount(props.instanceCount);
        }
        if (props.vertexCount) {
            this.setVertexCount(props.vertexCount);
        }
        if (props.indexBuffer) {
            this.setIndexBuffer(props.indexBuffer);
        }
        if (props.attributes) {
            this.setAttributes(props.attributes);
        }
        if (props.constantAttributes) {
            this.setConstantAttributes(props.constantAttributes);
        }
        if (props.bindings) {
            this.setBindings(props.bindings);
        }
        if (props.uniforms) {
            this.setUniforms(props.uniforms);
        }
        if (props.moduleSettings) {
            // log.warn('Model.props.moduleSettings is deprecated. Use Model.shaderInputs.setProps()')();
            this.updateModuleSettings(props.moduleSettings);
        }
        if (props.transformFeedback) {
            this.transformFeedback = props.transformFeedback;
        }
        // Catch any access to non-standard props
        Object.seal(this);
    }
    destroy() {
        if (this._destroyed)
            return;
        this.pipelineFactory.release(this.pipeline);
        this.shaderFactory.release(this.pipeline.vs);
        if (this.pipeline.fs) {
            this.shaderFactory.release(this.pipeline.fs);
        }
        this._uniformStore.destroy();
        // TODO - mark resource as managed and destroyIfManaged() ?
        this._gpuGeometry?.destroy();
        this._destroyed = true;
    }
    // Draw call
    /** Query redraw status. Clears the status. */
    needsRedraw() {
        // Catch any writes to already bound resources
        if (this._getBindingsUpdateTimestamp() > this._lastDrawTimestamp) {
            this.setNeedsRedraw('contents of bound textures or buffers updated');
        }
        const needsRedraw = this._needsRedraw;
        this._needsRedraw = false;
        return needsRedraw;
    }
    /** Mark the model as needing a redraw */
    setNeedsRedraw(reason) {
        this._needsRedraw ||= reason;
    }
    predraw() {
        // Update uniform buffers if needed
        this.updateShaderInputs();
        // Check if the pipeline is invalidated
        this.pipeline = this._updatePipeline();
    }
    draw(renderPass) {
        this.predraw();
        let drawSuccess;
        try {
            this._logDrawCallStart();
            // Update the pipeline if invalidated
            // TODO - inside RenderPass is likely the worst place to do this from performance perspective.
            // Application can call Model.predraw() to avoid this.
            this.pipeline = this._updatePipeline();
            // Set pipeline state, we may be sharing a pipeline so we need to set all state on every draw
            // Any caching needs to be done inside the pipeline functions
            this.pipeline.setBindings(this.bindings, { disableWarnings: this.props.disableWarnings });
            if (!(0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.isObjectEmpty)(this.uniforms)) {
                this.pipeline.setUniformsWebGL(this.uniforms);
            }
            const { indexBuffer } = this.vertexArray;
            const indexCount = indexBuffer
                ? indexBuffer.byteLength / (indexBuffer.indexType === 'uint32' ? 4 : 2)
                : undefined;
            drawSuccess = this.pipeline.draw({
                renderPass,
                vertexArray: this.vertexArray,
                isInstanced: this.isInstanced,
                vertexCount: this.vertexCount,
                instanceCount: this.instanceCount,
                indexCount,
                transformFeedback: this.transformFeedback || undefined,
                // WebGL shares underlying cached pipelines even for models that have different parameters and topology,
                // so we must provide our unique parameters to each draw
                // (In WebGPU most parameters are encoded in the pipeline and cannot be changed per draw call)
                parameters: this.parameters,
                topology: this.topology
            });
        }
        finally {
            this._logDrawCallEnd();
        }
        this._logFramebuffer(renderPass);
        // Update needsRedraw flag
        if (drawSuccess) {
            this._lastDrawTimestamp = this.device.timestamp;
            this._needsRedraw = false;
        }
        else {
            this._needsRedraw = 'waiting for resource initialization';
        }
        return drawSuccess;
    }
    // Update fixed fields (can trigger pipeline rebuild)
    /**
     * Updates the optional geometry
     * Geometry, set topology and bufferLayout
     * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
     */
    setGeometry(geometry) {
        this._gpuGeometry?.destroy();
        const gpuGeometry = geometry && (0,_geometry_gpu_geometry_js__WEBPACK_IMPORTED_MODULE_7__.makeGPUGeometry)(this.device, geometry);
        if (gpuGeometry) {
            this.setTopology(gpuGeometry.topology || 'triangle-list');
            this.bufferLayout = mergeBufferLayouts(gpuGeometry.bufferLayout, this.bufferLayout);
            if (this.vertexArray) {
                this._setGeometryAttributes(gpuGeometry);
            }
        }
        this._gpuGeometry = gpuGeometry;
    }
    /**
     * Updates the primitive topology ('triangle-list', 'triangle-strip' etc).
     * @note Triggers a pipeline rebuild / pipeline cache fetch on WebGPU
     */
    setTopology(topology) {
        if (topology !== this.topology) {
            this.topology = topology;
            this._setPipelineNeedsUpdate('topology');
        }
    }
    /**
     * Updates the buffer layout.
     * @note Triggers a pipeline rebuild / pipeline cache fetch
     */
    setBufferLayout(bufferLayout) {
        this.bufferLayout = this._gpuGeometry
            ? mergeBufferLayouts(bufferLayout, this._gpuGeometry.bufferLayout)
            : bufferLayout;
        this._setPipelineNeedsUpdate('bufferLayout');
        // Recreate the pipeline
        this.pipeline = this._updatePipeline();
        // vertex array needs to be updated if we update buffer layout,
        // but not if we update parameters
        this.vertexArray = this.device.createVertexArray({
            renderPipeline: this.pipeline
        });
        // Reapply geometry attributes to the new vertex array
        if (this._gpuGeometry) {
            this._setGeometryAttributes(this._gpuGeometry);
        }
    }
    /**
     * Set GPU parameters.
     * @note Can trigger a pipeline rebuild / pipeline cache fetch.
     * @param parameters
     */
    setParameters(parameters) {
        if (!(0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_8__.deepEqual)(parameters, this.parameters, 2)) {
            this.parameters = parameters;
            this._setPipelineNeedsUpdate('parameters');
        }
    }
    // Update dynamic fields
    /**
     * Updates the instance count (used in draw calls)
     * @note Any attributes with stepMode=instance need to be at least this big
     */
    setInstanceCount(instanceCount) {
        this.instanceCount = instanceCount;
        // luma.gl examples don't set props.isInstanced and rely on auto-detection
        // but deck.gl sets instanceCount even for models that are not instanced.
        if (this.isInstanced === undefined && instanceCount > 0) {
            this.isInstanced = true;
        }
        this.setNeedsRedraw('instanceCount');
    }
    /**
     * Updates the vertex count (used in draw calls)
     * @note Any attributes with stepMode=vertex need to be at least this big
     */
    setVertexCount(vertexCount) {
        this.vertexCount = vertexCount;
        this.setNeedsRedraw('vertexCount');
    }
    /** Set the shader inputs */
    setShaderInputs(shaderInputs) {
        this.shaderInputs = shaderInputs;
        this._uniformStore = new _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__.UniformStore(this.shaderInputs.modules);
        // Create uniform buffer bindings for all modules
        for (const moduleName of Object.keys(this.shaderInputs.modules)) {
            const uniformBuffer = this._uniformStore.getManagedUniformBuffer(this.device, moduleName);
            this.bindings[`${moduleName}Uniforms`] = uniformBuffer;
        }
        this.setNeedsRedraw('shaderInputs');
    }
    /** Update uniform buffers from the model's shader inputs */
    updateShaderInputs() {
        this._uniformStore.setUniforms(this.shaderInputs.getUniformValues());
        this.setBindings(this.shaderInputs.getBindings());
        // TODO - this is already tracked through buffer/texture update times?
        this.setNeedsRedraw('shaderInputs');
    }
    /**
     * Sets bindings (textures, samplers, uniform buffers)
     */
    setBindings(bindings) {
        Object.assign(this.bindings, bindings);
        this.setNeedsRedraw('bindings');
    }
    /**
     * Updates optional transform feedback. WebGL only.
     */
    setTransformFeedback(transformFeedback) {
        this.transformFeedback = transformFeedback;
        this.setNeedsRedraw('transformFeedback');
    }
    /**
     * Sets the index buffer
     * @todo - how to unset it if we change geometry?
     */
    setIndexBuffer(indexBuffer) {
        this.vertexArray.setIndexBuffer(indexBuffer);
        this.setNeedsRedraw('indexBuffer');
    }
    /**
     * Sets attributes (buffers)
     * @note Overrides any attributes previously set with the same name
     */
    setAttributes(buffers, options) {
        if (buffers.indices) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.warn(`Model:${this.id} setAttributes() - indexBuffer should be set using setIndexBuffer()`)();
        }
        for (const [bufferName, buffer] of Object.entries(buffers)) {
            const bufferLayout = this.bufferLayout.find(layout => getAttributeNames(layout).includes(bufferName));
            if (!bufferLayout) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.warn(`Model(${this.id}): Missing layout for buffer "${bufferName}".`)();
                continue; // eslint-disable-line no-continue
            }
            // For an interleaved attribute we may need to set multiple attributes
            const attributeNames = getAttributeNames(bufferLayout);
            let set = false;
            for (const attributeName of attributeNames) {
                const attributeInfo = this._attributeInfos[attributeName];
                if (attributeInfo) {
                    this.vertexArray.setBuffer(attributeInfo.location, buffer);
                    set = true;
                }
            }
            if (!set && !(options?.disableWarnings ?? this.props.disableWarnings)) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.warn(`Model(${this.id}): Ignoring buffer "${buffer.id}" for unknown attribute "${bufferName}"`)();
            }
        }
        this.setNeedsRedraw('attributes');
    }
    /**
     * Sets constant attributes
     * @note Overrides any attributes previously set with the same name
     * Constant attributes are only supported in WebGL, not in WebGPU
     * Any attribute that is disabled in the current vertex array object
     * is read from the context's global constant value for that attribute location.
     * @param constantAttributes
     */
    setConstantAttributes(attributes, options) {
        for (const [attributeName, value] of Object.entries(attributes)) {
            const attributeInfo = this._attributeInfos[attributeName];
            if (attributeInfo) {
                this.vertexArray.setConstantWebGL(attributeInfo.location, value);
            }
            else if (!(options?.disableWarnings ?? this.props.disableWarnings)) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.warn(`Model "${this.id}: Ignoring constant supplied for unknown attribute "${attributeName}"`)();
            }
        }
        this.setNeedsRedraw('constants');
    }
    // DEPRECATED METHODS
    /**
     * Sets individual uniforms
     * @deprecated WebGL only, use uniform buffers for portability
     * @param uniforms
     */
    setUniforms(uniforms) {
        if (!(0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.isObjectEmpty)(uniforms)) {
            this.pipeline.setUniformsWebGL(uniforms);
            Object.assign(this.uniforms, uniforms);
        }
        this.setNeedsRedraw('uniforms');
    }
    /**
     * @deprecated Updates shader module settings (which results in uniforms being set)
     */
    updateModuleSettings(props) {
        // log.warn('Model.updateModuleSettings is deprecated. Use Model.shaderInputs.setProps()')();
        const { bindings, uniforms } = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_11__.splitUniformsAndBindings)(this._getModuleUniforms(props));
        Object.assign(this.bindings, bindings);
        Object.assign(this.uniforms, uniforms);
        this.setNeedsRedraw('moduleSettings');
    }
    // Internal methods
    /** Get the timestamp of the latest updated bound GPU memory resource (buffer/texture). */
    _getBindingsUpdateTimestamp() {
        let timestamp = 0;
        for (const binding of Object.values(this.bindings)) {
            if (binding instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_12__.TextureView) {
                timestamp = Math.max(timestamp, binding.texture.updateTimestamp);
            }
            else if (binding instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_13__.Buffer || binding instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_14__.Texture) {
                timestamp = Math.max(timestamp, binding.updateTimestamp);
            }
            else if (!(binding instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_15__.Sampler)) {
                timestamp = Math.max(timestamp, binding.buffer.updateTimestamp);
            }
        }
        return timestamp;
    }
    /**
     * Updates the optional geometry attributes
     * Geometry, sets several attributes, indexBuffer, and also vertex count
     * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
     */
    _setGeometryAttributes(gpuGeometry) {
        // Filter geometry attribute so that we don't issue warnings for unused attributes
        const attributes = { ...gpuGeometry.attributes };
        for (const [attributeName] of Object.entries(attributes)) {
            if (!this.pipeline.shaderLayout.attributes.find(layout => layout.name === attributeName) &&
                attributeName !== 'positions') {
                delete attributes[attributeName];
            }
        }
        // TODO - delete previous geometry?
        this.vertexCount = gpuGeometry.vertexCount;
        this.setIndexBuffer(gpuGeometry.indices || null);
        this.setAttributes(gpuGeometry.attributes, { disableWarnings: true });
        this.setAttributes(attributes, { disableWarnings: this.props.disableWarnings });
        this.setNeedsRedraw('geometry attributes');
    }
    /** Mark pipeline as needing update */
    _setPipelineNeedsUpdate(reason) {
        this._pipelineNeedsUpdate ||= reason;
        this.setNeedsRedraw(reason);
    }
    /** Update pipeline if needed */
    _updatePipeline() {
        if (this._pipelineNeedsUpdate) {
            let prevShaderVs = null;
            let prevShaderFs = null;
            if (this.pipeline) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.log(1, `Model ${this.id}: Recreating pipeline because "${this._pipelineNeedsUpdate}".`)();
                prevShaderVs = this.pipeline.vs;
                prevShaderFs = this.pipeline.fs;
            }
            this._pipelineNeedsUpdate = false;
            const vs = this.shaderFactory.createShader({
                id: `${this.id}-vertex`,
                stage: 'vertex',
                source: this.source || this.vs,
                debug: this.props.debugShaders
            });
            let fs = null;
            if (this.source) {
                fs = vs;
            }
            else if (this.fs) {
                fs = this.shaderFactory.createShader({
                    id: `${this.id}-fragment`,
                    stage: 'fragment',
                    source: this.source || this.fs,
                    debug: this.props.debugShaders
                });
            }
            this.pipeline = this.pipelineFactory.createRenderPipeline({
                ...this.props,
                bufferLayout: this.bufferLayout,
                topology: this.topology,
                parameters: this.parameters,
                vs,
                fs
            });
            this._attributeInfos = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_16__.getAttributeInfosFromLayouts)(this.pipeline.shaderLayout, this.bufferLayout);
            if (prevShaderVs)
                this.shaderFactory.release(prevShaderVs);
            if (prevShaderFs)
                this.shaderFactory.release(prevShaderFs);
        }
        return this.pipeline;
    }
    /** Throttle draw call logging */
    _lastLogTime = 0;
    _logOpen = false;
    _logDrawCallStart() {
        // IF level is 4 or higher, log every frame.
        const logDrawTimeout = _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.level > 3 ? 0 : LOG_DRAW_TIMEOUT;
        if (_luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.level < 2 || Date.now() - this._lastLogTime < logDrawTimeout) {
            return;
        }
        this._lastLogTime = Date.now();
        this._logOpen = true;
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, { collapsed: _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.level <= 2 })();
    }
    _logDrawCallEnd() {
        if (this._logOpen) {
            const shaderLayoutTable = (0,_debug_debug_shader_layout_js__WEBPACK_IMPORTED_MODULE_17__.getDebugTableForShaderLayout)(this.pipeline.shaderLayout, this.id);
            // log.table(logLevel, attributeTable)();
            // log.table(logLevel, uniformTable)();
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.table(LOG_DRAW_PRIORITY, shaderLayoutTable)();
            const uniformTable = this.shaderInputs.getDebugTable();
            // Add any global uniforms
            for (const [name, value] of Object.entries(this.uniforms)) {
                uniformTable[name] = { value };
            }
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.table(LOG_DRAW_PRIORITY, uniformTable)();
            const attributeTable = this._getAttributeDebugTable();
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.table(LOG_DRAW_PRIORITY, this._attributeInfos)();
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.table(LOG_DRAW_PRIORITY, attributeTable)();
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.groupEnd(LOG_DRAW_PRIORITY)();
            this._logOpen = false;
        }
    }
    _drawCount = 0;
    _logFramebuffer(renderPass) {
        const debugFramebuffers = _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.log.get('framebuffer');
        this._drawCount++;
        // Update first 3 frames and then every 60 frames
        if (!debugFramebuffers || (this._drawCount++ > 3 && this._drawCount % 60)) {
            return;
        }
        // TODO - display framebuffer output in debug window
        const framebuffer = renderPass.props.framebuffer;
        if (framebuffer) {
            (0,_debug_debug_framebuffer_js__WEBPACK_IMPORTED_MODULE_18__.debugFramebuffer)(framebuffer, { id: framebuffer.id, minimap: true });
            // log.image({logLevel: LOG_DRAW_PRIORITY, message: `${framebuffer.id} %c sup?`, image})();
        }
    }
    _getAttributeDebugTable() {
        const table = {};
        for (const [name, attributeInfo] of Object.entries(this._attributeInfos)) {
            table[attributeInfo.location] = {
                name,
                type: attributeInfo.shaderType,
                values: this._getBufferOrConstantValues(this.vertexArray.attributes[attributeInfo.location], attributeInfo.bufferDataType)
            };
        }
        if (this.vertexArray.indexBuffer) {
            const { indexBuffer } = this.vertexArray;
            const values = indexBuffer.indexType === 'uint32'
                ? new Uint32Array(indexBuffer.debugData)
                : new Uint16Array(indexBuffer.debugData);
            table.indices = {
                name: 'indices',
                type: indexBuffer.indexType,
                values: values.toString()
            };
        }
        return table;
    }
    // TODO - fix typing of luma data types
    _getBufferOrConstantValues(attribute, dataType) {
        const TypedArrayConstructor = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_19__.getTypedArrayFromDataType)(dataType);
        const typedArray = attribute instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_13__.Buffer ? new TypedArrayConstructor(attribute.debugData) : attribute;
        return typedArray.toString();
    }
}
// HELPERS
/** TODO - move to core, document add tests */
function mergeBufferLayouts(layouts1, layouts2) {
    const layouts = [...layouts1];
    for (const attribute of layouts2) {
        const index = layouts.findIndex(attribute2 => attribute2.name === attribute.name);
        if (index < 0) {
            layouts.push(attribute);
        }
        else {
            layouts[index] = attribute;
        }
    }
    return layouts;
}
/** Create a shadertools platform info from the Device */
function getPlatformInfo(device) {
    return {
        type: device.type,
        shaderLanguage: device.info.shadingLanguage,
        shaderLanguageVersion: device.info.shadingLanguageVersion,
        gpu: device.info.gpu,
        // HACK - we pretend that the DeviceFeatures is a Set, it has a similar API
        features: device.features
    };
}
/** Get attribute names from a BufferLayout */
function getAttributeNames(bufferLayout) {
    return bufferLayout.attributes
        ? bufferLayout.attributes?.map(layout => layout.attribute)
        : [bufferLayout.name];
}


}),
"../node_modules/.pnpm/@luma.gl+engine@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/engine/dist/shader-inputs.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ShaderInputs: function() { return ShaderInputs; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform.js");
/* harmony import */var _luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/resolve-modules.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// import type {ShaderUniformType, UniformValue, UniformFormat, UniformInfoDevice, Texture, Sampler} from '@luma.gl/core';

/**
 * ShaderInputs holds uniform and binding values for one or more shader modules,
 * - It can generate binary data for any uniform buffer
 * - It can manage a uniform buffer for each block
 * - It can update managed uniform buffers with a single call
 * - It performs some book keeping on what has changed to minimize unnecessary writes to uniform buffers.
 */
class ShaderInputs {
    /**
     * The map of modules
     * @todo should should this include the resolved dependencies?
     */
    modules;
    /** Stores the uniform values for each module */
    moduleUniforms;
    /** Stores the uniform bindings for each module  */
    moduleBindings;
    /** Tracks if uniforms have changed */
    moduleUniformsChanged;
    /**
     * Create a new UniformStore instance
     * @param modules
     */
    constructor(modules) {
        // Extract modules with dependencies
        const resolvedModules = (0,_luma_gl_shadertools__WEBPACK_IMPORTED_MODULE_0__.resolveModules)(Object.values(modules).filter(module => module.dependencies));
        for (const resolvedModule of resolvedModules) {
            // @ts-ignore
            modules[resolvedModule.name] = resolvedModule;
        }
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.log(1, 'Creating ShaderInputs with modules', Object.keys(modules))();
        // Store the module definitions and create storage for uniform values and binding values, per module
        this.modules = modules;
        this.moduleUniforms = {};
        this.moduleBindings = {};
        // Initialize the modules
        for (const [name, module] of Object.entries(modules)) {
            const moduleName = name;
            // Get default uniforms from module
            this.moduleUniforms[moduleName] = module.defaultUniforms || {};
            this.moduleBindings[moduleName] = {};
        }
    }
    /** Destroy */
    destroy() { }
    /**
     * Set module props
     */
    setProps(props) {
        for (const name of Object.keys(props)) {
            const moduleName = name;
            const moduleProps = props[moduleName];
            const module = this.modules[moduleName];
            if (!module) {
                // Ignore props for unregistered modules
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.warn(`Module ${name} not found`)();
                continue; // eslint-disable-line no-continue
            }
            const oldUniforms = this.moduleUniforms[moduleName];
            const oldBindings = this.moduleBindings[moduleName];
            const uniformsAndBindings = module.getUniforms?.(moduleProps, oldUniforms) || moduleProps;
            const { uniforms, bindings } = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.splitUniformsAndBindings)(uniformsAndBindings);
            this.moduleUniforms[moduleName] = { ...oldUniforms, ...uniforms };
            this.moduleBindings[moduleName] = { ...oldBindings, ...bindings };
            // this.moduleUniformsChanged ||= moduleName;
            // console.log(`setProps(${String(moduleName)}`, moduleName, this.moduleUniforms[moduleName])
        }
    }
    /** Merges all bindings for the shader (from the various modules) */
    // getUniformBlocks(): Record<string, Texture | Sampler> {
    //   return this.moduleUniforms;
    // }
    /**
     * Return the map of modules
     * @todo should should this include the resolved dependencies?
     */
    getModules() {
        return Object.values(this.modules);
    }
    /** Get all uniform values for all modules */
    getUniformValues() {
        return this.moduleUniforms;
    }
    /** Merges all bindings for the shader (from the various modules) */
    getBindings() {
        const bindings = {};
        for (const moduleBindings of Object.values(this.moduleBindings)) {
            Object.assign(bindings, moduleBindings);
        }
        return bindings;
    }
    getDebugTable() {
        const table = {};
        for (const [moduleName, module] of Object.entries(this.moduleUniforms)) {
            for (const [key, value] of Object.entries(module)) {
                table[`${moduleName}.${key}`] = {
                    type: this.modules[moduleName].uniformTypes?.[key],
                    value: String(value)
                };
            }
        }
        return table;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/filters/prop-types.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getValidatedProperties: function() { return getValidatedProperties; },
  makePropValidators: function() { return makePropValidators; }
});
/* harmony import */var _utils_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Minimal validators for number and array types */
const DEFAULT_PROP_VALIDATORS = {
    number: {
        type: 'number',
        validate(value, propType) {
            return (Number.isFinite(value) &&
                typeof propType === 'object' &&
                (propType.max === undefined || value <= propType.max) &&
                (propType.min === undefined || value >= propType.min));
        }
    },
    array: {
        type: 'array',
        validate(value, propType) {
            return Array.isArray(value) || ArrayBuffer.isView(value);
        }
    }
};
/**
 * Parse a list of property types into property definitions that can be used to validate
 * values passed in by applications.
 * @param propTypes
 * @returns
 */
function makePropValidators(propTypes) {
    const propValidators = {};
    for (const [name, propType] of Object.entries(propTypes)) {
        propValidators[name] = makePropValidator(propType);
    }
    return propValidators;
}
/**
 * Validate a map of user supplied properties against a map of validators
 * Inject default values when user doesn't supply a property
 * @param properties
 * @param propValidators
 * @returns
 */
function getValidatedProperties(properties, propValidators, errorMessage) {
    const validated = {};
    for (const [key, propsValidator] of Object.entries(propValidators)) {
        if (properties && key in properties && !propsValidator.private) {
            if (propsValidator.validate) {
                (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(propsValidator.validate(properties[key], propsValidator), `${errorMessage}: invalid ${key}`);
            }
            validated[key] = properties[key];
        }
        else {
            // property not supplied - use default value
            validated[key] = propsValidator.value;
        }
    }
    // TODO - warn for unused properties that don't match a validator?
    return validated;
}
/**
 * Creates a property validator for a prop type. Either contains:
 * - a valid prop type object ({type, ...})
 * - or just a default value, in which case type and name inference is used
 */
function makePropValidator(propType) {
    let type = getTypeOf(propType);
    if (type !== 'object') {
        return { value: propType, ...DEFAULT_PROP_VALIDATORS[type], type };
    }
    // Special handling for objects
    if (typeof propType === 'object') {
        if (!propType) {
            return { type: 'object', value: null };
        }
        if (propType.type !== undefined) {
            return { ...propType, ...DEFAULT_PROP_VALIDATORS[propType.type], type: propType.type };
        }
        // If no type and value this object is likely the value
        if (propType.value === undefined) {
            return { type: 'object', value: propType };
        }
        type = getTypeOf(propType.value);
        return { ...propType, ...DEFAULT_PROP_VALIDATORS[type], type };
    }
    throw new Error('props');
}
/**
 * "improved" version of javascript typeof that can distinguish arrays and null values
 */
function getTypeOf(value) {
    if (Array.isArray(value) || ArrayBuffer.isView(value)) {
        return 'array';
    }
    return typeof value;
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/get-shader-info.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getShaderInfo: function() { return getShaderInfo; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Extracts information from shader source code */
function getShaderInfo(source, defaultName) {
    return {
        name: getShaderName(source, defaultName),
        language: 'glsl',
        version: getShaderVersion(source)
    };
}
/** Extracts GLSLIFY style naming of shaders: `#define SHADER_NAME ...` */
function getShaderName(shader, defaultName = 'unnamed') {
    const SHADER_NAME_REGEXP = /#define[^\S\r\n]*SHADER_NAME[^\S\r\n]*([A-Za-z0-9_-]+)\s*/;
    const match = SHADER_NAME_REGEXP.exec(shader);
    return match ? match[1] : defaultName;
}
/** returns GLSL shader version of given shader string */
function getShaderVersion(source) {
    let version = 100;
    const words = source.match(/[^\s]+/g);
    if (words && words.length >= 2 && words[0] === '#version') {
        const parsedVersion = parseInt(words[1], 10);
        if (Number.isFinite(parsedVersion)) {
            version = parsedVersion;
        }
    }
    if (version !== 100 && version !== 300) {
        throw new Error(`Invalid GLSL version ${version}`);
    }
    return version;
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ShaderAssembler: function() { return ShaderAssembler; }
});
/* harmony import */var _shader_module_shader_module_instance_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-instance.js");
/* harmony import */var _shader_assembly_select_shaders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/select-shaders.js");
/* harmony import */var _shader_assembly_assemble_shaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/assemble-shaders.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * A stateful version of `assembleShaders` that can be used to assemble shaders.
 * Supports setting of default modules and hooks.
 */
class ShaderAssembler {
    /** Default ShaderAssembler instance */
    static defaultShaderAssembler;
    /** Hook functions */
    _hookFunctions = [];
    /** Shader modules */
    _defaultModules = [];
    /**
     * A default shader assembler instance - the natural place to register default modules and hooks
     * @returns
     */
    static getDefaultShaderAssembler() {
        ShaderAssembler.defaultShaderAssembler =
            ShaderAssembler.defaultShaderAssembler || new ShaderAssembler();
        return ShaderAssembler.defaultShaderAssembler;
    }
    /**
     * Add a default module that does not have to be provided with every call to assembleShaders()
     */
    addDefaultModule(module) {
        if (!this._defaultModules.find(m => m.name === (typeof module === 'string' ? module : module.name))) {
            this._defaultModules.push(module);
        }
    }
    /**
     * Remove a default module
     */
    removeDefaultModule(module) {
        const moduleName = typeof module === 'string' ? module : module.name;
        this._defaultModules = this._defaultModules.filter(m => m.name !== moduleName);
    }
    /**
     * Register a shader hook
     * @param hook
     * @param opts
     */
    addShaderHook(hook, opts) {
        if (opts) {
            hook = Object.assign(opts, { hook });
        }
        this._hookFunctions.push(hook);
    }
    /**
     * Assemble a pair of shaders into a single shader program
     * @param platformInfo
     * @param props
     * @returns
     */
    assembleShader(props) {
        const modules = this._getModuleList(props.modules); // Combine with default modules
        const hookFunctions = this._hookFunctions; // TODO - combine with default hook functions
        const options = (0,_shader_assembly_select_shaders_js__WEBPACK_IMPORTED_MODULE_0__.selectShaders)(props);
        const assembled = (0,_shader_assembly_assemble_shaders_js__WEBPACK_IMPORTED_MODULE_1__.assembleShaderWGSL)({
            platformInfo: props.platformInfo,
            ...options,
            modules,
            hookFunctions
        });
        return { ...assembled, modules };
    }
    /**
     * Assemble a pair of shaders into a single shader program
     * @param platformInfo
     * @param props
     * @returns
     */
    assembleShaderPair(props) {
        const options = (0,_shader_assembly_select_shaders_js__WEBPACK_IMPORTED_MODULE_0__.selectShaders)(props);
        const modules = this._getModuleList(props.modules); // Combine with default modules
        const hookFunctions = this._hookFunctions; // TODO - combine with default hook functions
        const { platformInfo } = props;
        const isWGSL = props.platformInfo.shaderLanguage === 'wgsl';
        const assembled = isWGSL
            ? (0,_shader_assembly_assemble_shaders_js__WEBPACK_IMPORTED_MODULE_1__.assembleShaderPairWGSL)({ platformInfo, ...options, modules, hookFunctions })
            : (0,_shader_assembly_assemble_shaders_js__WEBPACK_IMPORTED_MODULE_1__.assembleShaderPairGLSL)({ platformInfo, ...options, modules, hookFunctions });
        return { ...assembled, modules };
    }
    /**
     * Dedupe and combine with default modules
     */
    _getModuleList(appModules = []) {
        const modules = new Array(this._defaultModules.length + appModules.length);
        const seen = {};
        let count = 0;
        for (let i = 0, len = this._defaultModules.length; i < len; ++i) {
            const module = this._defaultModules[i];
            const name = module.name;
            modules[count++] = module;
            seen[name] = true;
        }
        for (let i = 0, len = appModules.length; i < len; ++i) {
            const module = appModules[i];
            const name = module.name;
            if (!seen[name]) {
                modules[count++] = module;
                seen[name] = true;
            }
        }
        modules.length = count;
        return _shader_module_shader_module_instance_js__WEBPACK_IMPORTED_MODULE_2__.ShaderModuleInstance.instantiateModules(modules);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/assemble-shaders.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  assembleGetUniforms: function() { return assembleGetUniforms; },
  assembleShaderPairGLSL: function() { return assembleShaderPairGLSL; },
  assembleShaderPairWGSL: function() { return assembleShaderPairWGSL; },
  assembleShaderWGSL: function() { return assembleShaderWGSL; },
  assembleWGSLShader: function() { return assembleWGSLShader; }
});
/* harmony import */var _resolve_modules_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/resolve-modules.js");
/* harmony import */var _platform_defines_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/platform-defines.js");
/* harmony import */var _shader_injections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js");
/* harmony import */var _shader_transpiler_transpile_glsl_shader_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-transpiler/transpile-glsl-shader.js");
/* harmony import */var _shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-hooks.js");
/* harmony import */var _utils_assert_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js");
/* harmony import */var _glsl_utils_get_shader_info_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/get-shader-info.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors








const INJECT_SHADER_DECLARATIONS = `\n\n${_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.DECLARATION_INJECT_MARKER}\n`;
/**
 * Precision prologue to inject before functions are injected in shader
 * TODO - extract any existing prologue in the fragment source and move it up...
 */
const FRAGMENT_SHADER_PROLOGUE = `\
precision highp float;
`;
/**
 * Inject a list of shader modules into a single shader source for WGSL
 */
function assembleShaderWGSL(options) {
    const modules = (0,_resolve_modules_js__WEBPACK_IMPORTED_MODULE_1__.resolveModules)(options.modules || []);
    return {
        source: assembleWGSLShader(options.platformInfo, {
            ...options,
            source: options.source,
            stage: 'vertex',
            modules
        }),
        getUniforms: assembleGetUniforms(modules)
    };
}
/**
 * Injects dependent shader module sources into pair of main vertex/fragment shader sources for WGSL
 */
function assembleShaderPairWGSL(options) {
    const modules = (0,_resolve_modules_js__WEBPACK_IMPORTED_MODULE_1__.resolveModules)(options.modules || []);
    return {
        vs: assembleWGSLShader(options.platformInfo, {
            ...options,
            source: options.vs,
            stage: 'vertex',
            modules
        }),
        fs: assembleWGSLShader(options.platformInfo, {
            ...options,
            source: options.fs,
            stage: 'fragment',
            modules
        }),
        getUniforms: assembleGetUniforms(modules)
    };
}
/**
 * Injects dependent shader module sources into pair of main vertex/fragment shader sources for GLSL
 */
function assembleShaderPairGLSL(options) {
    const { vs, fs } = options;
    const modules = (0,_resolve_modules_js__WEBPACK_IMPORTED_MODULE_1__.resolveModules)(options.modules || []);
    return {
        vs: assembleGLSLShader(options.platformInfo, {
            ...options,
            source: vs,
            stage: 'vertex',
            modules
        }),
        fs: assembleGLSLShader(options.platformInfo, {
            ...options,
            source: fs,
            stage: 'fragment',
            modules
        }),
        getUniforms: assembleGetUniforms(modules)
    };
}
/**
 * Pulls together complete source code for either a vertex or a fragment shader
 * adding prologues, requested module chunks, and any final injections.
 * @param gl
 * @param options
 * @returns
 */
function assembleWGSLShader(platformInfo, options) {
    const { 
    // id,
    source, stage, modules, 
    // defines = {},
    hookFunctions = [], inject = {}, log } = options;
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__.assert)(typeof source === 'string', 'shader source must be a string');
    // const isVertex = type === 'vs';
    // const sourceLines = source.split('\n');
    const coreSource = source;
    // Combine Module and Application Defines
    // const allDefines = {};
    // modules.forEach(module => {
    //   Object.assign(allDefines, module.getDefines());
    // });
    // Object.assign(allDefines, defines);
    // Add platform defines (use these to work around platform-specific bugs and limitations)
    // Add common defines (GLSL version compatibility, feature detection)
    // Add precision declaration for fragment shaders
    let assembledSource = '';
    //   prologue
    //     ? `\
    // ${getShaderNameDefine({id, source, type})}
    // ${getShaderType(type)}
    // ${getPlatformShaderDefines(platformInfo)}
    // ${getApplicationDefines(allDefines)}
    // ${isVertex ? '' : FRAGMENT_SHADER_PROLOGUE}
    // `
    // `;
    const hookFunctionMap = (0,_shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__.normalizeShaderHooks)(hookFunctions);
    // Add source of dependent modules in resolved order
    const hookInjections = {};
    const declInjections = {};
    const mainInjections = {};
    for (const key in inject) {
        const injection = typeof inject[key] === 'string' ? { injection: inject[key], order: 0 } : inject[key];
        const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
        if (match) {
            const hash = match[2];
            const name = match[3];
            if (hash) {
                if (name === 'decl') {
                    declInjections[key] = [injection];
                }
                else {
                    mainInjections[key] = [injection];
                }
            }
            else {
                hookInjections[key] = [injection];
            }
        }
        else {
            // Regex injection
            mainInjections[key] = [injection];
        }
    }
    // TODO - hack until shadertool modules support WebGPU
    const modulesToInject = platformInfo.type !== 'webgpu' ? modules : [];
    for (const module of modulesToInject) {
        if (log) {
            module.checkDeprecations(coreSource, log);
        }
        const moduleSource = module.getModuleSource(stage, 'wgsl');
        // Add the module source, and a #define that declares it presence
        assembledSource += moduleSource;
        const injections = module.injections[stage];
        for (const key in injections) {
            const match = /^(v|f)s:#([\w-]+)$/.exec(key);
            if (match) {
                const name = match[2];
                const injectionType = name === 'decl' ? declInjections : mainInjections;
                injectionType[key] = injectionType[key] || [];
                injectionType[key].push(injections[key]);
            }
            else {
                hookInjections[key] = hookInjections[key] || [];
                hookInjections[key].push(injections[key]);
            }
        }
    }
    // For injectShader
    assembledSource += INJECT_SHADER_DECLARATIONS;
    assembledSource = (0,_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.injectShader)(assembledSource, stage, declInjections);
    assembledSource += (0,_shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__.getShaderHooks)(hookFunctionMap[stage], hookInjections);
    // Add the version directive and actual source of this shader
    assembledSource += coreSource;
    // Apply any requested shader injections
    assembledSource = (0,_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.injectShader)(assembledSource, stage, mainInjections);
    return assembledSource;
}
/**
 * Pulls together complete source code for either a vertex or a fragment shader
 * adding prologues, requested module chunks, and any final injections.
 * @param gl
 * @param options
 * @returns
 */
function assembleGLSLShader(platformInfo, options) {
    const { id, source, stage, language = 'glsl', modules, defines = {}, hookFunctions = [], inject = {}, prologue = true, log } = options;
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_2__.assert)(typeof source === 'string', 'shader source must be a string');
    const sourceVersion = language === 'glsl' ? (0,_glsl_utils_get_shader_info_js__WEBPACK_IMPORTED_MODULE_4__.getShaderInfo)(source).version : -1;
    const targetVersion = platformInfo.shaderLanguageVersion;
    const sourceVersionDirective = sourceVersion === 100 ? '#version 100' : '#version 300 es';
    const sourceLines = source.split('\n');
    // TODO : keep all pre-processor statements at the beginning of the shader.
    const coreSource = sourceLines.slice(1).join('\n');
    // Combine Module and Application Defines
    const allDefines = {};
    modules.forEach(module => {
        Object.assign(allDefines, module.getDefines());
    });
    Object.assign(allDefines, defines);
    // Add platform defines (use these to work around platform-specific bugs and limitations)
    // Add common defines (GLSL version compatibility, feature detection)
    // Add precision declaration for fragment shaders
    let assembledSource = '';
    switch (language) {
        case 'wgsl':
            break;
        case 'glsl':
            assembledSource = prologue
                ? `\
${sourceVersionDirective}

// ----- PROLOGUE -------------------------
${getShaderNameDefine({ id, source, stage })}
${`#define SHADER_TYPE_${stage.toUpperCase()}`}
${(0,_platform_defines_js__WEBPACK_IMPORTED_MODULE_5__.getPlatformShaderDefines)(platformInfo)}
${stage === 'fragment' ? FRAGMENT_SHADER_PROLOGUE : ''}

// ----- APPLICATION DEFINES -------------------------

${getApplicationDefines(allDefines)}

`
                : `${sourceVersionDirective}
`;
            break;
    }
    const hookFunctionMap = (0,_shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__.normalizeShaderHooks)(hookFunctions);
    // Add source of dependent modules in resolved order
    const hookInjections = {};
    const declInjections = {};
    const mainInjections = {};
    for (const key in inject) {
        // @ts-expect-error
        const injection = typeof inject[key] === 'string' ? { injection: inject[key], order: 0 } : inject[key];
        const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
        if (match) {
            const hash = match[2];
            const name = match[3];
            if (hash) {
                if (name === 'decl') {
                    declInjections[key] = [injection];
                }
                else {
                    mainInjections[key] = [injection];
                }
            }
            else {
                hookInjections[key] = [injection];
            }
        }
        else {
            // Regex injection
            mainInjections[key] = [injection];
        }
    }
    for (const module of modules) {
        if (log) {
            module.checkDeprecations(coreSource, log);
        }
        const moduleSource = module.getModuleSource(stage);
        // Add the module source, and a #define that declares it presence
        assembledSource += moduleSource;
        const injections = module.injections[stage];
        for (const key in injections) {
            const match = /^(v|f)s:#([\w-]+)$/.exec(key);
            if (match) {
                const name = match[2];
                const injectionType = name === 'decl' ? declInjections : mainInjections;
                injectionType[key] = injectionType[key] || [];
                injectionType[key].push(injections[key]);
            }
            else {
                hookInjections[key] = hookInjections[key] || [];
                hookInjections[key].push(injections[key]);
            }
        }
    }
    assembledSource += '// ----- MAIN SHADER SOURCE -------------------------';
    // For injectShader
    assembledSource += INJECT_SHADER_DECLARATIONS;
    assembledSource = (0,_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.injectShader)(assembledSource, stage, declInjections);
    assembledSource += (0,_shader_hooks_js__WEBPACK_IMPORTED_MODULE_3__.getShaderHooks)(hookFunctionMap[stage], hookInjections);
    // Add the version directive and actual source of this shader
    assembledSource += coreSource;
    // Apply any requested shader injections
    assembledSource = (0,_shader_injections_js__WEBPACK_IMPORTED_MODULE_0__.injectShader)(assembledSource, stage, mainInjections);
    if (language === 'glsl' && sourceVersion !== targetVersion) {
        assembledSource = (0,_shader_transpiler_transpile_glsl_shader_js__WEBPACK_IMPORTED_MODULE_6__.transpileGLSLShader)(assembledSource, stage);
    }
    return assembledSource.trim();
}
/**
 * Returns a combined `getUniforms` covering the options for all the modules,
 * the created function will pass on options to the inidividual `getUniforms`
 * function of each shader module and combine the results into one object that
 * can be passed to setUniforms.
 * @param modules
 * @returns
 */
function assembleGetUniforms(modules) {
    return function getUniforms(opts) {
        const uniforms = {};
        for (const module of modules) {
            // `modules` is already sorted by dependency level. This guarantees that
            // modules have access to the uniforms that are generated by their dependencies.
            const moduleUniforms = module.getUniforms(opts, uniforms);
            Object.assign(uniforms, moduleUniforms);
        }
        return uniforms;
    };
}
/**
 * Generate "glslify-compatible" SHADER_NAME defines
 * These are understood by the GLSL error parsing function
 * If id is provided and no SHADER_NAME constant is present in source, create one
 */
function getShaderNameDefine(options) {
    const { id, source, stage } = options;
    const injectShaderName = id && source.indexOf('SHADER_NAME') === -1;
    return injectShaderName
        ? `
#define SHADER_NAME ${id}_${stage}

`
        : '';
}
/** Generates application defines from an object of key value pairs */
function getApplicationDefines(defines = {}) {
    let sourceText = '';
    for (const define in defines) {
        const value = defines[define];
        if (value || Number.isFinite(value)) {
            sourceText += `#define ${define.toUpperCase()} ${defines[define]}\n`;
        }
    }
    return sourceText;
}
/*
function getHookFunctions(
  hookFunctions: Record<string, HookFunction>,
  hookInjections: Record<string, Injection[]>
): string {
  let result = '';
  for (const hookName in hookFunctions) {
    const hookFunction = hookFunctions[hookName];
    result += `void ${hookFunction.signature} {\n`;
    if (hookFunction.header) {
      result += `  ${hookFunction.header}`;
    }
    if (hookInjections[hookName]) {
      const injections = hookInjections[hookName];
      injections.sort((a: {order: number}, b: {order: number}): number => a.order - b.order);
      for (const injection of injections) {
        result += `  ${injection.injection}\n`;
      }
    }
    if (hookFunction.footer) {
      result += `  ${hookFunction.footer}`;
    }
    result += '}\n';
  }

  return result;
}

function normalizeHookFunctions(hookFunctions: (string | HookFunction)[]): {
  vs: Record<string, HookFunction>;
  fs: Record<string, HookFunction>;
} {
  const result: {vs: Record<string, any>; fs: Record<string, any>} = {
    vs: {},
    fs: {}
  };

  hookFunctions.forEach((hookFunction: string | HookFunction) => {
    let opts: HookFunction;
    let hook: string;
    if (typeof hookFunction !== 'string') {
      opts = hookFunction;
      hook = opts.hook;
    } else {
      opts = {} as HookFunction;
      hook = hookFunction;
    }
    hook = hook.trim();
    const [stage, signature] = hook.split(':');
    const name = hook.replace(/\(.+/, '');
    if (stage !== 'vs' && stage !== 'fs') {
      throw new Error(stage);
    }
    result[stage][name] = Object.assign(opts, {signature});
  });

  return result;
}
*/


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/platform-defines.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getPlatformShaderDefines: function() { return getPlatformShaderDefines; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Adds defines to help identify GPU architecture / platform */
function getPlatformShaderDefines(platformInfo) {
    switch (platformInfo?.gpu.toLowerCase()) {
        case 'apple':
            return `\
#define APPLE_GPU
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`;
        case 'nvidia':
            return `\
#define NVIDIA_GPU
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
`;
        case 'intel':
            return `\
#define INTEL_GPU
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`;
        case 'amd':
            // AMD Does not eliminate fp64 code
            return `\
#define AMD_GPU
`;
        default:
            // We don't know what GPU it is, could be that the GPU driver or
            // browser is not implementing UNMASKED_RENDERER constant and not
            // reporting a correct name
            return `\
#define DEFAULT_GPU
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/resolve-modules.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  TEST_EXPORTS: function() { return TEST_EXPORTS; },
  getDependencyGraph: function() { return getDependencyGraph; },
  resolveModules: function() { return resolveModules; }
});
/* harmony import */var _shader_module_shader_module_instance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-instance.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Instantiate shader modules and esolve any dependencies
 */
function resolveModules(modules) {
    const instances = _shader_module_shader_module_instance_js__WEBPACK_IMPORTED_MODULE_0__.ShaderModuleInstance.instantiateModules(modules);
    return getShaderDependencies(instances);
}
/**
 * Takes a list of shader module names and returns a new list of
 * shader module names that includes all dependencies, sorted so
 * that modules that are dependencies of other modules come first.
 *
 * If the shader glsl code from the returned modules is concatenated
 * in the reverse order, it is guaranteed that all functions be resolved and
 * that all function and variable definitions come before use.
 *
 * @param modules - Array of modules (inline modules or module names)
 * @return - Array of modules
 */
function getShaderDependencies(modules) {
    const moduleMap = {};
    const moduleDepth = {};
    getDependencyGraph({ modules, level: 0, moduleMap, moduleDepth });
    // Return a reverse sort so that dependencies come before the modules that use them
    return Object.keys(moduleDepth)
        .sort((a, b) => moduleDepth[b] - moduleDepth[a])
        .map(name => moduleMap[name]);
}
/**
 * Recursively checks module dependencies to calculate dependency level of each module.
 *
 * @param options.modules - Array of modules
 * @param options.level - Current level
 * @param options.moduleMap -
 * @param options.moduleDepth - Current level
 * @return - Map of module name to its level
 */
// Adds another level of dependencies to the result map
function getDependencyGraph(options) {
    const { modules, level, moduleMap, moduleDepth } = options;
    if (level >= 5) {
        throw new Error('Possible loop in shader dependency graph');
    }
    // Update level on all current modules
    for (const module of modules) {
        moduleMap[module.name] = module;
        if (moduleDepth[module.name] === undefined || moduleDepth[module.name] < level) {
            moduleDepth[module.name] = level;
        }
    }
    // Recurse
    for (const module of modules) {
        if (module.dependencies) {
            getDependencyGraph({ modules: module.dependencies, level: level + 1, moduleMap, moduleDepth });
        }
    }
}
const TEST_EXPORTS = {
    getShaderDependencies,
    getDependencyGraph
};


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/select-shaders.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  selectShaders: function() { return selectShaders; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Shader selection
 * @param device
 * @param props
 * @returns
 */
function selectShaders(props) {
    // If we have a source field, we have a single unified shader source
    if (props.source && props.platformInfo.type === 'webgpu') {
        const propsCopy = { ...props, vs: undefined, fs: undefined };
        return propsCopy;
    }
    if (!props.vs) {
        throw new Error('no vertex shader');
    }
    // Resolve WGSL vs GLSL
    const vs = getShaderSource(props.platformInfo, props.vs);
    let fs;
    if (props.fs) {
        fs = getShaderSource(props.platformInfo, props.fs);
    }
    return { ...props, vs, fs };
}
/** Create a shader from the different overloads */
function getShaderSource(platformInfo, shader) {
    // TODO - detect WGSL/GLSL and throw an error if not supported
    if (typeof shader === 'string') {
        return shader;
    }
    switch (platformInfo.type) {
        case 'webgpu':
            if (shader?.wgsl) {
                return shader.wgsl;
            }
            throw new Error('WebGPU does not support GLSL shaders');
        default:
            if (shader?.glsl) {
                return shader.glsl;
            }
            throw new Error('WebGL does not support WGSL shaders');
    }
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-hooks.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getShaderHooks: function() { return getShaderHooks; },
  normalizeShaderHooks: function() { return normalizeShaderHooks; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Generate hook source code */
function getShaderHooks(hookFunctions, hookInjections) {
    let result = '';
    for (const hookName in hookFunctions) {
        const hookFunction = hookFunctions[hookName];
        result += `void ${hookFunction.signature} {\n`;
        if (hookFunction.header) {
            result += `  ${hookFunction.header}`;
        }
        if (hookInjections[hookName]) {
            const injections = hookInjections[hookName];
            injections.sort((a, b) => a.order - b.order);
            for (const injection of injections) {
                result += `  ${injection.injection}\n`;
            }
        }
        if (hookFunction.footer) {
            result += `  ${hookFunction.footer}`;
        }
        result += '}\n';
    }
    return result;
}
/**
 * Parse string based hook functions
 * And split per shader
 */
function normalizeShaderHooks(hookFunctions) {
    const result = { vertex: {}, fragment: {} };
    for (const hookFunction of hookFunctions) {
        let opts;
        let hook;
        if (typeof hookFunction !== 'string') {
            opts = hookFunction;
            hook = opts.hook;
        }
        else {
            opts = {};
            hook = hookFunction;
        }
        hook = hook.trim();
        const [shaderStage, signature] = hook.split(':');
        const name = hook.replace(/\(.+/, '');
        const normalizedHook = Object.assign(opts, { signature });
        switch (shaderStage) {
            case 'vs':
                result.vertex[name] = normalizedHook;
                break;
            case 'fs':
                result.fragment[name] = normalizedHook;
                break;
            default:
                throw new Error(shaderStage);
        }
    }
    return result;
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DECLARATION_INJECT_MARKER: function() { return DECLARATION_INJECT_MARKER; },
  combineInjects: function() { return combineInjects; },
  injectShader: function() { return injectShader; },
  normalizeInjections: function() { return normalizeInjections; }
});
/* harmony import */var _module_injectors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/module-injectors.js");
/* harmony import */var _utils_assert_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// TODO - experimental
const MODULE_INJECTORS = {
    vertex: _module_injectors_js__WEBPACK_IMPORTED_MODULE_0__.MODULE_INJECTORS_VS,
    fragment: _module_injectors_js__WEBPACK_IMPORTED_MODULE_0__.MODULE_INJECTORS_FS
};
const REGEX_START_OF_MAIN = /void\s+main\s*\([^)]*\)\s*\{\n?/; // Beginning of main
const REGEX_END_OF_MAIN = /}\n?[^{}]*$/; // End of main, assumes main is last function
const fragments = [];
const DECLARATION_INJECT_MARKER = '__LUMA_INJECT_DECLARATIONS__';
/**
 *
 */
function normalizeInjections(injections) {
    const result = { vertex: {}, fragment: {} };
    for (const hook in injections) {
        let injection = injections[hook];
        const stage = getHookStage(hook);
        if (typeof injection === 'string') {
            injection = {
                order: 0,
                injection
            };
        }
        result[stage][hook] = injection;
    }
    return result;
}
function getHookStage(hook) {
    const type = hook.slice(0, 2);
    switch (type) {
        case 'vs':
            return 'vertex';
        case 'fs':
            return 'fragment';
        default:
            throw new Error(type);
    }
}
/**
// A minimal shader injection/templating system.
// RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/shader-injection-rfc.md
 * @param source
 * @param type
 * @param inject
 * @param injectStandardStubs
 * @returns
 */
// eslint-disable-next-line complexity
function injectShader(source, stage, inject, injectStandardStubs = false) {
    const isVertex = stage === 'vertex';
    for (const key in inject) {
        const fragmentData = inject[key];
        fragmentData.sort((a, b) => a.order - b.order);
        fragments.length = fragmentData.length;
        for (let i = 0, len = fragmentData.length; i < len; ++i) {
            fragments[i] = fragmentData[i].injection;
        }
        const fragmentString = `${fragments.join('\n')}\n`;
        switch (key) {
            // declarations are injected before the main function
            case 'vs:#decl':
                if (isVertex) {
                    source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);
                }
                break;
            // inject code at the beginning of the main function
            case 'vs:#main-start':
                if (isVertex) {
                    source = source.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
                }
                break;
            // inject code at the end of main function
            case 'vs:#main-end':
                if (isVertex) {
                    source = source.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
                }
                break;
            // declarations are injected before the main function
            case 'fs:#decl':
                if (!isVertex) {
                    source = source.replace(DECLARATION_INJECT_MARKER, fragmentString);
                }
                break;
            // inject code at the beginning of the main function
            case 'fs:#main-start':
                if (!isVertex) {
                    source = source.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
                }
                break;
            // inject code at the end of main function
            case 'fs:#main-end':
                if (!isVertex) {
                    source = source.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
                }
                break;
            default:
                // TODO(Tarek): I think this usage should be deprecated.
                // inject code after key, leaving key in place
                source = source.replace(key, (match) => match + fragmentString);
        }
    }
    // Remove if it hasn't already been replaced
    source = source.replace(DECLARATION_INJECT_MARKER, '');
    // Finally, if requested, insert an automatic module injector chunk
    if (injectStandardStubs) {
        source = source.replace(/\}\s*$/, (match) => match + MODULE_INJECTORS[stage]);
    }
    return source;
}
// Takes an array of inject objects and combines them into one
function combineInjects(injects) {
    const result = {};
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_1__.assert)(Array.isArray(injects) && injects.length > 1);
    injects.forEach(inject => {
        for (const key in inject) {
            result[key] = result[key] ? `${result[key]}\n${inject[key]}` : inject[key];
        }
    });
    return result;
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-instance.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ShaderModuleInstance: function() { return ShaderModuleInstance; }
});
/* harmony import */var _utils_assert_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js");
/* harmony import */var _filters_prop_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/filters/prop-types.js");
/* harmony import */var _shader_assembly_shader_injections_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



let index = 1;
/** An initialized ShaderModule, ready to use with `assembleShaders()` */
class ShaderModuleInstance {
    name;
    vs;
    fs;
    getModuleUniforms;
    dependencies;
    deprecations;
    defines;
    injections;
    uniforms = {};
    uniformTypes = {};
    static instantiateModules(modules) {
        return modules.map((module) => {
            if (module instanceof ShaderModuleInstance) {
                return module;
            }
            (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(typeof module !== 'string', `Shader module use by name is deprecated. Import shader module '${JSON.stringify(module)}' and use it directly.`);
            if (!module.name) {
                // eslint-disable-next-line no-console
                console.warn('shader module has no name');
                module.name = `shader-module-${index++}`;
            }
            const moduleObject = new ShaderModuleInstance(module);
            moduleObject.dependencies = ShaderModuleInstance.instantiateModules(module.dependencies || []);
            return moduleObject;
        });
    }
    constructor(props) {
        const { name, vs, fs, dependencies = [], uniformTypes = {}, uniformPropTypes = {}, getUniforms, deprecations = [], defines = {}, inject = {} } = props;
        (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(typeof name === 'string');
        this.name = name;
        this.vs = vs;
        this.fs = fs;
        this.getModuleUniforms = getUniforms;
        this.dependencies = ShaderModuleInstance.instantiateModules(dependencies);
        this.deprecations = this._parseDeprecationDefinitions(deprecations);
        this.defines = defines;
        this.injections = (0,_shader_assembly_shader_injections_js__WEBPACK_IMPORTED_MODULE_1__.normalizeInjections)(inject);
        this.uniformTypes = uniformTypes;
        if (uniformPropTypes) {
            this.uniforms = (0,_filters_prop_types_js__WEBPACK_IMPORTED_MODULE_2__.makePropValidators)(uniformPropTypes);
        }
    }
    // Extracts the source code chunk for the specified shader type from the named shader module
    getModuleSource(stage) {
        let moduleSource;
        switch (stage) {
            case 'vertex':
                moduleSource = this.vs || '';
                break;
            case 'fragment':
                moduleSource = this.fs || '';
                break;
            default:
                (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
        }
        const moduleName = this.name.toUpperCase().replace(/[^0-9a-z]/gi, '_');
        return `\
// ----- MODULE ${this.name} ---------------

#define MODULE_${moduleName}
${moduleSource}\


`;
    }
    getUniforms(userProps, uniforms) {
        if (this.getModuleUniforms) {
            return this.getModuleUniforms(userProps, uniforms);
        }
        // Build uniforms from the uniforms array
        return (0,_filters_prop_types_js__WEBPACK_IMPORTED_MODULE_2__.getValidatedProperties)(userProps, this.uniforms, this.name);
    }
    getDefines() {
        return this.defines;
    }
    // Warn about deprecated uniforms or functions
    checkDeprecations(shaderSource, log) {
        this.deprecations.forEach(def => {
            if (def.regex?.test(shaderSource)) {
                if (def.deprecated) {
                    log.deprecated(def.old, def.new)();
                }
                else {
                    log.removed(def.old, def.new)();
                }
            }
        });
    }
    _parseDeprecationDefinitions(deprecations) {
        deprecations.forEach(def => {
            switch (def.type) {
                case 'function':
                    def.regex = new RegExp(`\\b${def.old}\\(`);
                    break;
                default:
                    def.regex = new RegExp(`${def.type} ${def.old};`);
            }
        });
        return deprecations;
    }
    _defaultGetUniforms(opts = {}) {
        const uniforms = {};
        const propTypes = this.uniforms;
        for (const key in propTypes) {
            const propDef = propTypes[key];
            if (key in opts && !propDef.private) {
                if (propDef.validate) {
                    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_0__.assert)(propDef.validate(opts[key], propDef), `${this.name}: invalid ${key}`);
                }
                uniforms[key] = opts[key];
            }
            else {
                uniforms[key] = propDef.value;
            }
        }
        return uniforms;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/shader-transpiler/transpile-glsl-shader.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  transpileGLSLShader: function() { return transpileGLSLShader; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// TRANSPILATION TABLES
/**
 * Transpiles GLSL 3.00 shader source code to target GLSL version (3.00 or 1.00)
 *
 * @note We always run transpiler even if same version e.g. 3.00 => 3.00
 * @note For texture sampling transpilation, apps need to use non-standard texture* calls in GLSL 3.00 source
 * RFC: https://github.com/visgl/luma.gl/blob/7.0-release/dev-docs/RFCs/v6.0/portable-glsl-300-rfc.md
 */
function transpileGLSLShader(source, stage) {
    const sourceGLSLVersion = Number(source.match(/^#version[ \t]+(\d+)/m)?.[1] || 100);
    if (sourceGLSLVersion !== 300) {
        // TODO - we splurge on a longer error message to help deck.gl custom layer developers
        throw new Error('luma.gl v9 only supports GLSL 3.00 shader sources');
    }
    switch (stage) {
        case 'vertex':
            source = convertShader(source, ES300_VERTEX_REPLACEMENTS);
            return source;
        case 'fragment':
            source = convertShader(source, ES300_FRAGMENT_REPLACEMENTS);
            return source;
        default:
            // Unknown shader stage
            throw new Error(stage);
    }
}
/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */
const ES300_REPLACEMENTS = [
    // Fix poorly formatted version directive
    [/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/, '#version 300 es\n'],
    // The individual `texture...()` functions were replaced with `texture()` overloads
    [/\btexture(2D|2DProj|Cube)Lod(EXT)?\(/g, 'textureLod('],
    [/\btexture(2D|2DProj|Cube)(EXT)?\(/g, 'texture(']
];
const ES300_VERTEX_REPLACEMENTS = [
    ...ES300_REPLACEMENTS,
    // `attribute` keyword replaced with `in`
    [makeVariableTextRegExp('attribute'), 'in $1'],
    // `varying` keyword replaced with `out`
    [makeVariableTextRegExp('varying'), 'out $1']
];
/** Simple regex replacements for GLSL ES 1.00 syntax that has changed in GLSL ES 3.00 */
const ES300_FRAGMENT_REPLACEMENTS = [
    ...ES300_REPLACEMENTS,
    // `varying` keyword replaced with `in`
    [makeVariableTextRegExp('varying'), 'in $1']
];
function convertShader(source, replacements) {
    for (const [pattern, replacement] of replacements) {
        source = source.replace(pattern, replacement);
    }
    return source;
}
/**
 * Creates a regexp that tests for a specific variable type
 * @example
 *   should match:
 *     in float weight;
 *     out vec4 positions[2];
 *   should not match:
 *     void f(out float a, in float b) {}
 */
function makeVariableTextRegExp(qualifier) {
    return new RegExp(`\\b${qualifier}[ \\t]+(\\w+[ \\t]+\\w+(\\[\\w+\\])?;)`, 'g');
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  assert: function() { return assert; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Recommendation is to ignore message but current test suite checks agains the
// message so keep it for now.
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'shadertools: assertion failed.');
    }
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/lib/wgsl/get-shader-layout-wgsl.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getShaderLayoutFromWGSL: function() { return getShaderLayoutFromWGSL; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var wgsl_reflect__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/wgsl_reflect@1.0.8/node_modules/wgsl_reflect/wgsl_reflect.module.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Parse a ShaderLayout from WGSL shader source code.
 * @param source WGSL source code (can contain both @vertex and @fragment entry points)
 * @returns
 */
function getShaderLayoutFromWGSL(source) {
    const shaderLayout = { attributes: [], bindings: [] };
    let parsedWGSL;
    try {
        parsedWGSL = parseWGSL(source);
    }
    catch (error) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.error(error.message)();
        return shaderLayout;
    }
    for (const uniform of parsedWGSL.uniforms) {
        const members = [];
        for (const attribute of uniform.type?.members || []) {
            members.push({
                name: attribute.name,
                type: getType(attribute.type)
            });
        }
        shaderLayout.bindings.push({
            type: 'uniform',
            name: uniform.name,
            location: uniform.binding,
            // @ts-expect-error
            group: uniform.group,
            members
        });
    }
    const vertex = parsedWGSL.entry.vertex[0]; // "main"
    // Vertex shader inputs
    const attributeCount = vertex?.inputs.length || 0; // inputs to "main"
    for (let i = 0; i < attributeCount; i++) {
        const wgslAttribute = vertex.inputs[i];
        // locationType can be "builtin"
        if (wgslAttribute.locationType === 'location') {
            const type = getType(wgslAttribute.type);
            shaderLayout.attributes.push({
                name: wgslAttribute.name,
                location: Number(wgslAttribute.location),
                type
            });
        }
    }
    return shaderLayout;
}
/** Get a valid shader attribute type string from a wgsl-reflect type */
function getType(type) {
    return type.format ? `${type.name}<${type.format.name}>` : type.name;
}
function parseWGSL(source) {
    try {
        return new wgsl_reflect__WEBPACK_IMPORTED_MODULE_1__.WgslReflect(source);
    }
    catch (error) {
        if (error instanceof Error) {
            throw error;
        }
        let message = 'WGSL parse error';
        if (typeof error === 'object' && error?.message) {
            message += `: ${error.message} `;
        }
        if (typeof error === 'object' && error?.token) {
            message += error.token.line || '';
        }
        throw new Error(message, { cause: error });
    }
}


}),
"../node_modules/.pnpm/@luma.gl+shadertools@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/shadertools/dist/module-injectors.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  MODULE_INJECTORS_FS: function() { return MODULE_INJECTORS_FS; },
  MODULE_INJECTORS_VS: function() { return MODULE_INJECTORS_VS; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const MODULE_INJECTORS_VS = `\
#ifdef MODULE_LOGDEPTH
logdepth_adjustPosition(gl_Position);
#endif
`;
const MODULE_INJECTORS_FS = `\
#ifdef MODULE_MATERIAL
gl_FragColor = material_filterColor(gl_FragColor);
#endif
#ifdef MODULE_LIGHTING
gl_FragColor = lighting_filterColor(gl_FragColor);
#endif
#ifdef MODULE_FOG
gl_FragColor = fog_filterColor(gl_FragColor);
#endif
#ifdef MODULE_PICKING
gl_FragColor = picking_filterHighlightColor(gl_FragColor);
gl_FragColor = picking_filterPickingColor(gl_FragColor);
#endif
#ifdef MODULE_LOGDEPTH
logdepth_setFragDepth();
#endif
`;


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  convertCompareFunction: function() { return convertCompareFunction; },
  convertToCompareFunction: function() { return convertToCompareFunction; },
  setDeviceParameters: function() { return setDeviceParameters; },
  withDeviceAndGLParameters: function() { return withDeviceAndGLParameters; },
  withDeviceParameters: function() { return withDeviceParameters; },
  withGLParameters: function() { return withGLParameters; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js");
/* harmony import */var _context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/* eslint-disable no-unused-expressions */ // For expression ? gl.enable() : gl.disable()
/**
 * Execute a function with a set of temporary WebGL parameter overrides
 * - Saves current "global" WebGL context settings
 * - Sets the supplies WebGL context parameters,
 * - Executes supplied function
 * - Restores parameters
 * - Returns the return value of the supplied function
 */
function withDeviceAndGLParameters(device, parameters, glParameters, func) {
    if ((0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.isObjectEmpty)(parameters)) {
        // Avoid setting state if no parameters provided. Just call and return
        return func(device);
    }
    // Wrap in a try-catch to ensure that parameters are restored on exceptions
    const webglDevice = device;
    (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.pushContextState)(webglDevice.gl);
    try {
        setDeviceParameters(device, parameters);
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__.setGLParameters)(webglDevice.gl, glParameters);
        return func(device);
    }
    finally {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.popContextState)(webglDevice.gl);
    }
}
/**
 * Execute a function with a set of temporary WebGL parameter overrides
 * - Saves current "global" WebGL context settings
 * - Sets the supplies WebGL context parameters,
 * - Executes supplied function
 * - Restores parameters
 * - Returns the return value of the supplied function
 * @deprecated use withDeviceParameters instead
 */
function withGLParameters(device, parameters, func) {
    if ((0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.isObjectEmpty)(parameters)) {
        // Avoid setting state if no parameters provided. Just call and return
        return func(device);
    }
    // Wrap in a try-catch to ensure that parameters are restored on exceptions
    const webglDevice = device;
    (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.pushContextState)(webglDevice.gl);
    try {
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__.setGLParameters)(webglDevice.gl, parameters);
        return func(device);
    }
    finally {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.popContextState)(webglDevice.gl);
    }
}
/**
 * Execute a function with a set of temporary WebGL parameter overrides
 * - Saves current "global" WebGL context settings
 * - Sets the supplies WebGL context parameters,
 * - Executes supplied function
 * - Restores parameters
 * - Returns the return value of the supplied function
 */
function withDeviceParameters(device, parameters, func) {
    if ((0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.isObjectEmpty)(parameters)) {
        // Avoid setting state if no parameters provided. Just call and return
        return func(device);
    }
    // Wrap in a try-catch to ensure that parameters are restored on exceptions
    // @ts-expect-error
    (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.pushContextState)(device.gl);
    try {
        setDeviceParameters(device, parameters);
        return func(device);
    }
    finally {
        // @ts-expect-error
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.popContextState)(device.gl);
    }
}
/** Set WebGPU Style Parameters */
function setDeviceParameters(device, parameters) {
    const webglDevice = device;
    const { gl } = webglDevice;
    // RASTERIZATION SETTINGS
    if (parameters.cullMode) {
        switch (parameters.cullMode) {
            case 'none':
                gl.disable(2884);
                break;
            case 'front':
                gl.enable(2884);
                gl.cullFace(1028);
                break;
            case 'back':
                gl.enable(2884);
                gl.cullFace(1029);
                break;
        }
    }
    if (parameters.frontFace) {
        gl.frontFace(map('frontFace', parameters.frontFace, {
            ccw: 2305,
            cw: 2304
        }));
    }
    if (parameters.unclippedDepth) {
        if (device.features.has('depth-clip-control')) {
            // EXT_depth_clamp
            gl.enable(34383);
        }
    }
    if (parameters.depthBias !== undefined) {
        gl.enable(32823);
        gl.polygonOffset(parameters.depthBias, parameters.depthBiasSlopeScale || 0);
    }
    // depthBiasSlopeScale: {
    //   // Handled by depthBias
    // },
    // WEBGL EXTENSIONS
    if (parameters.provokingVertex) {
        if (device.features.has('provoking-vertex-webgl')) {
            const extensions = webglDevice.getExtension('WEBGL_provoking_vertex');
            const ext = extensions.WEBGL_provoking_vertex;
            const vertex = map('provokingVertex', parameters.provokingVertex, {
                first: 36429,
                last: 36430
            });
            ext?.provokingVertexWEBGL(vertex);
        }
    }
    if (parameters.polygonMode || parameters.polygonOffsetLine) {
        if (device.features.has('polygon-mode-webgl')) {
            if (parameters.polygonMode) {
                const extensions = webglDevice.getExtension('WEBGL_polygon_mode');
                const ext = extensions.WEBGL_polygon_mode;
                const mode = map('polygonMode', parameters.polygonMode, {
                    fill: 6914,
                    line: 6913
                });
                ext?.polygonModeWEBGL(1028, mode);
                ext?.polygonModeWEBGL(1029, mode);
            }
            if (parameters.polygonOffsetLine) {
                gl.enable(10754);
            }
        }
    }
    if (device.features.has('shader-clip-cull-distance-webgl')) {
        if (parameters.clipDistance0) {
            gl.enable(12288);
        }
        if (parameters.clipDistance1) {
            gl.enable(12289);
        }
        if (parameters.clipDistance2) {
            gl.enable(12290);
        }
        if (parameters.clipDistance3) {
            gl.enable(12291);
        }
        if (parameters.clipDistance4) {
            gl.enable(12292);
        }
        if (parameters.clipDistance5) {
            gl.enable(12293);
        }
        if (parameters.clipDistance6) {
            gl.enable(12294);
        }
        if (parameters.clipDistance7) {
            gl.enable(12295);
        }
    }
    // DEPTH STENCIL
    if (parameters.depthWriteEnabled !== undefined) {
        gl.depthMask(mapBoolean('depthWriteEnabled', parameters.depthWriteEnabled));
    }
    if (parameters.depthCompare) {
        parameters.depthCompare !== 'always' ? gl.enable(2929) : gl.disable(2929);
        gl.depthFunc(convertCompareFunction('depthCompare', parameters.depthCompare));
    }
    if (parameters.stencilWriteMask) {
        const mask = parameters.stencilWriteMask;
        gl.stencilMaskSeparate(1028, mask);
        gl.stencilMaskSeparate(1029, mask);
    }
    if (parameters.stencilReadMask) {
        // stencilReadMask is handle inside stencil***Compare.
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.log.warn('stencilReadMask not supported under WebGL');
    }
    if (parameters.stencilCompare) {
        const mask = parameters.stencilReadMask || 0xffffffff;
        const glValue = convertCompareFunction('depthCompare', parameters.stencilCompare);
        // TODO - ensure back doesn't overwrite
        parameters.stencilCompare !== 'always'
            ? gl.enable(2960)
            : gl.disable(2960);
        gl.stencilFuncSeparate(1028, glValue, 0, mask);
        gl.stencilFuncSeparate(1029, glValue, 0, mask);
    }
    if (parameters.stencilPassOperation &&
        parameters.stencilFailOperation &&
        parameters.stencilDepthFailOperation) {
        const dppass = convertStencilOperation('stencilPassOperation', parameters.stencilPassOperation);
        const sfail = convertStencilOperation('stencilFailOperation', parameters.stencilFailOperation);
        const dpfail = convertStencilOperation('stencilDepthFailOperation', parameters.stencilDepthFailOperation);
        gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
        gl.stencilOpSeparate(1029, sfail, dpfail, dppass);
    }
    // stencilDepthFailOperation() {
    //   // handled by stencilPassOperation
    // },
    // stencilFailOperation() {
    //   // handled by stencilPassOperation
    // },
    // COLOR STATE
    if (parameters.blendColorOperation || parameters.blendAlphaOperation) {
        gl.enable(3042);
        const colorEquation = convertBlendOperationToEquation('blendColorOperation', parameters.blendColorOperation || 'add');
        const alphaEquation = convertBlendOperationToEquation('blendAlphaOperation', parameters.blendAlphaOperation || 'add');
        gl.blendEquationSeparate(colorEquation, alphaEquation);
        const colorSrcFactor = convertBlendFactorToFunction('blendColorSrcFactor', parameters.blendColorSrcFactor || 'one');
        const colorDstFactor = convertBlendFactorToFunction('blendColorDstFactor', parameters.blendColorDstFactor || 'zero');
        const alphaSrcFactor = convertBlendFactorToFunction('blendAlphaSrcFactor', parameters.blendAlphaSrcFactor || 'one');
        const alphaDstFactor = convertBlendFactorToFunction('blendAlphaDstFactor', parameters.blendAlphaDstFactor || 'zero');
        gl.blendFuncSeparate(colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor);
    }
}
/*
      rasterizationState: {
        cullMode: "back",
      },

      depthStencilState: {
        depthWriteEnabled: true,
        depthCompare: "less",
        format: "depth24plus-stencil8",
      },

      colorStates: [
        {
          format: "bgra8unorm",
          // colorBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;
          // colorBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;
          // alphaBlend.srcFactor = wgpu::BlendFactor::SrcAlpha;
          // alphaBlend.dstFactor = wgpu::BlendFactor::OneMinusSrcAlpha;
        },
      ],
    });
*/
function convertCompareFunction(parameter, value) {
    return map(parameter, value, {
        never: 512,
        less: 513,
        equal: 514,
        'less-equal': 515,
        greater: 516,
        'not-equal': 517,
        'greater-equal': 518,
        always: 519
    });
}
function convertToCompareFunction(parameter, value) {
    return map(parameter, value, {
        [512]: 'never',
        [513]: 'less',
        [514]: 'equal',
        [515]: 'less-equal',
        [516]: 'greater',
        [517]: 'not-equal',
        [518]: 'greater-equal',
        [519]: 'always'
    });
}
function convertStencilOperation(parameter, value) {
    return map(parameter, value, {
        keep: 7680,
        zero: 0,
        replace: 7681,
        invert: 5386,
        'increment-clamp': 7682,
        'decrement-clamp': 7683,
        'increment-wrap': 34055,
        'decrement-wrap': 34056
    });
}
function convertBlendOperationToEquation(parameter, value) {
    return map(parameter, value, {
        add: 32774,
        subtract: 32778,
        'reverse-subtract': 32779,
        min: 32775,
        max: 32776
    });
}
function convertBlendFactorToFunction(parameter, value) {
    return map(parameter, value, {
        one: 1,
        zero: 0,
        'src-color': 768,
        'one-minus-src-color': 769,
        'dst-color': 774,
        'one-minus-dst-color': 775,
        'src-alpha': 770,
        'one-minus-src-alpha': 771,
        'dst-alpha': 772,
        'one-minus-dst-alpha': 773,
        'src-alpha-saturated': 776,
        'constant-color': 32769,
        'one-minus-constant-color': 32770,
        'constant-alpha': 32771,
        'one-minus-constant-alpha': 32772
    });
}
function message(parameter, value) {
    return `Illegal parameter ${value} for ${parameter}`;
}
function map(parameter, value, valueMap) {
    if (!(value in valueMap)) {
        throw new Error(message(parameter, value));
    }
    return valueMap[value];
}
function mapBoolean(parameter, value) {
    return value;
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  convertSamplerParametersToWebGL: function() { return convertSamplerParametersToWebGL; }
});
/* harmony import */var _device_parameters_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Convert WebGPU-style sampler props to WebGL
 * @param props
 * @returns
 */
function convertSamplerParametersToWebGL(props) {
    const params = {};
    if (props.addressModeU) {
        params[10242] = convertAddressMode(props.addressModeU);
    }
    if (props.addressModeV) {
        params[10243] = convertAddressMode(props.addressModeV);
    }
    if (props.addressModeW) {
        params[32882] = convertAddressMode(props.addressModeW);
    }
    if (props.magFilter) {
        params[10240] = convertMaxFilterMode(props.magFilter);
    }
    if (props.minFilter || props.mipmapFilter) {
        // TODO - arbitrary choice of linear?
        params[10241] = convertMinFilterMode(props.minFilter || 'linear', props.mipmapFilter);
    }
    if (props.lodMinClamp !== undefined) {
        params[33082] = props.lodMinClamp;
    }
    if (props.lodMaxClamp !== undefined) {
        params[33083] = props.lodMaxClamp;
    }
    if (props.type === 'comparison-sampler') {
        // Setting prop.compare turns this into a comparison sampler
        params[34892] = 34894;
    }
    if (props.compare) {
        params[34893] = (0,_device_parameters_js__WEBPACK_IMPORTED_MODULE_0__.convertCompareFunction)('compare', props.compare);
    }
    // Note depends on WebGL extension
    if (props.maxAnisotropy) {
        params[34046] = props.maxAnisotropy;
    }
    return params;
}
// HELPERS
/** Convert address more */
function convertAddressMode(addressMode) {
    switch (addressMode) {
        case 'clamp-to-edge':
            return 33071;
        case 'repeat':
            return 10497;
        case 'mirror-repeat':
            return 33648;
    }
}
function convertMaxFilterMode(maxFilter) {
    switch (maxFilter) {
        case 'nearest':
            return 9728;
        case 'linear':
            return 9729;
    }
}
/**
 * WebGPU has separate min filter and mipmap filter,
 * WebGL is combined and effectively offers 6 options
 */
function convertMinFilterMode(minFilter, mipmapFilter) {
    if (!mipmapFilter) {
        return convertMaxFilterMode(minFilter);
    }
    switch (minFilter) {
        case 'nearest':
            return mipmapFilter === 'nearest' ? 9984 : 9986;
        case 'linear':
            return mipmapFilter === 'nearest' ? 9985 : 9987;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  TEXTURE_FEATURES: function() { return TEXTURE_FEATURES; },
  TEXTURE_FORMATS: function() { return TEXTURE_FORMATS; },
  checkTextureFeature: function() { return checkTextureFeature; },
  convertGLToTextureFormat: function() { return convertGLToTextureFormat; },
  convertTextureFormatToGL: function() { return convertTextureFormatToGL; },
  getDepthStencilAttachmentWebGL: function() { return getDepthStencilAttachmentWebGL; },
  getTextureFormatBytesPerPixel: function() { return getTextureFormatBytesPerPixel; },
  getTextureFormatSupport: function() { return getTextureFormatSupport; },
  getWebGLTextureParameters: function() { return getWebGLTextureParameters; },
  isRenderbufferFormatSupported: function() { return isRenderbufferFormatSupported; },
  isTextureFeature: function() { return isTextureFeature; },
  isTextureFormatFilterable: function() { return isTextureFormatFilterable; },
  isTextureFormatRenderable: function() { return isTextureFormatRenderable; },
  isTextureFormatSupported: function() { return isTextureFormatSupported; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/type-utils/decode-texture-format.js");
/* harmony import */var _context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js");
/* harmony import */var _vertex_formats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/vertex-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/* eslint-disable camelcase */
// TEXTURE FEATURES
// Define local device feature strings to optimize minification
const texture_compression_bc = 'texture-compression-bc';
const texture_compression_astc = 'texture-compression-astc';
const texture_compression_etc2 = 'texture-compression-etc2';
const texture_compression_etc1_webgl = 'texture-compression-etc1-webgl';
const texture_compression_pvrtc_webgl = 'texture-compression-pvrtc-webgl';
const texture_compression_atc_webgl = 'texture-compression-atc-webgl';
const float32_renderable = 'float32-renderable-webgl';
const float16_renderable = 'float16-renderable-webgl';
const rgb9e5ufloat_renderable = 'rgb9e5ufloat_renderable-webgl';
const snorm8_renderable = 'snorm8-renderable-webgl';
const norm16_renderable = 'norm16-renderable-webgl';
const snorm16_renderable = 'snorm16-renderable-webgl';
const float32_filterable = 'float32-filterable';
const float16_filterable = 'float16-filterable-webgl';
// Define local webgl extension strings to optimize minification
const X_S3TC = 'WEBGL_compressed_texture_s3tc'; // BC1, BC2, BC3
const X_S3TC_SRGB = 'WEBGL_compressed_texture_s3tc_srgb'; // BC1, BC2, BC3
const X_RGTC = 'EXT_texture_compression_rgtc'; // BC4, BC5
const X_BPTC = 'EXT_texture_compression_bptc'; // BC6, BC7
const X_ETC2 = 'WEBGL_compressed_texture_etc'; // Renamed from 'WEBGL_compressed_texture_es3'
const X_ASTC = 'WEBGL_compressed_texture_astc';
const X_ETC1 = 'WEBGL_compressed_texture_etc1';
const X_PVRTC = 'WEBGL_compressed_texture_pvrtc';
const X_ATC = 'WEBGL_compressed_texture_atc';
// Define local webgl extension strings to optimize minification
const EXT_texture_norm16 = 'EXT_texture_norm16';
const EXT_render_snorm = 'EXT_render_snorm';
const EXT_color_buffer_float = 'EXT_color_buffer_float';
// prettier-ignore
const TEXTURE_FEATURES = {
    'float32-renderable-webgl': ['EXT_color_buffer_float'],
    'float16-renderable-webgl': ['EXT_color_buffer_half_float'],
    'rgb9e5ufloat_renderable-webgl': ['WEBGL_render_shared_exponent'],
    'snorm8-renderable-webgl': [EXT_render_snorm],
    'norm16-renderable-webgl': [EXT_texture_norm16],
    'snorm16-renderable-webgl': [EXT_texture_norm16, EXT_render_snorm],
    'float32-filterable': ['OES_texture_float_linear'],
    'float16-filterable-webgl': ['OES_texture_half_float_linear'],
    'texture-filterable-anisotropic-webgl': ['EXT_texture_filter_anisotropic'],
    'texture-blend-float-webgl': ['EXT_float_blend'],
    'texture-compression-bc': [X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC],
    // 'texture-compression-bc3-srgb-webgl': [X_S3TC_SRGB],
    // 'texture-compression-bc3-webgl': [X_S3TC],
    'texture-compression-bc5-webgl': [X_RGTC],
    'texture-compression-bc7-webgl': [X_BPTC],
    'texture-compression-etc2': [X_ETC2],
    'texture-compression-astc': [X_ASTC],
    'texture-compression-etc1-webgl': [X_ETC1],
    'texture-compression-pvrtc-webgl': [X_PVRTC],
    'texture-compression-atc-webgl': [X_ATC]
};
/** Return a list of texture feature strings (for Device.features). Mainly compressed texture support */
// export function getTextureFeatures(
//   gl: WebGL2RenderingContext,
//   extensions: GLExtensions
// ): DeviceFeature[] {
//   const textureFeatures = Object.keys(TEXTURE_FEATURES) as DeviceFeature[];
//   return textureFeatures.filter(feature => checkTextureFeature(gl, feature, extensions));
// }
function isTextureFeature(feature) {
    return feature in TEXTURE_FEATURES;
}
/** Checks a texture feature (for Device.features). Mainly compressed texture support */
function checkTextureFeature(gl, feature, extensions) {
    const textureExtensions = TEXTURE_FEATURES[feature] || [];
    return textureExtensions.every(extension => (0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, extension, extensions));
}
// TABLES
/**
 * Texture format data -
 * Exported but can change without notice
 */
// prettier-ignore
const TEXTURE_FORMATS = {
    // Unsized formats that leave the precision up to the driver. TODO - Fix bpp constants
    'rgb8unorm-unsized': { gl: 6407, b: 4, c: 2, bpp: 4,
        dataFormat: 6407, types: [5121, 33635] },
    'rgba8unorm-unsized': { gl: 6408, b: 4, c: 2, bpp: 4,
        dataFormat: 6408, types: [5121, 32819, 32820] },
    // 'r8unorm-unsized': {gl: GL.LUMINANCE, b: 4, c: 2, bpp: 4},
    // 'rgb8unorm-srgb-unsized': {gl: GL.SRGB_EXT, b: 4, c: 2, bpp: 4, gl1Ext: SRGB},
    // 'rgba8unorm-srgb-unsized': {gl: GL.SRGB_ALPHA_EXT, b: 4, c: 2, bpp: 4, gl1Ext: SRGB},
    // 8-bit formats
    'r8unorm': { gl: 33321, b: 1, c: 1, rb: true },
    'r8snorm': { gl: 36756, b: 1, c: 1, render: snorm8_renderable },
    'r8uint': { gl: 33330, b: 1, c: 1, rb: true },
    'r8sint': { gl: 33329, b: 1, c: 1, rb: true },
    // 16-bit formats
    'rg8unorm': { gl: 33323, b: 2, c: 2, rb: true },
    'rg8snorm': { gl: 36757, b: 2, c: 2, render: snorm8_renderable },
    'rg8uint': { gl: 33336, b: 2, c: 2, rb: true },
    'rg8sint': { gl: 33335, b: 2, c: 2, rb: true },
    'r16uint': { gl: 33332, b: 2, c: 1, rb: true },
    'r16sint': { gl: 33331, b: 2, c: 1, rb: true },
    'r16float': { gl: 33325, b: 2, c: 1, render: float16_renderable, filter: 'float16-filterable-webgl', rb: true },
    'r16unorm-webgl': { gl: 33322, b: 2, c: 1, f: norm16_renderable, rb: true },
    'r16snorm-webgl': { gl: 36760, b: 2, c: 1, f: snorm16_renderable },
    // Packed 16-bit formats
    'rgba4unorm-webgl': { gl: 32854, b: 2, c: 4, wgpu: false, rb: true },
    'rgb565unorm-webgl': { gl: 36194, b: 2, c: 4, wgpu: false, rb: true },
    'rgb5a1unorm-webgl': { gl: 32855, b: 2, c: 4, wgpu: false, rb: true },
    // 24-bit formats
    'rgb8unorm-webgl': { gl: 32849, b: 3, c: 3, wgpu: false },
    'rgb8snorm-webgl': { gl: 36758, b: 3, c: 3, wgpu: false },
    // 32-bit formats  
    'rgba8unorm': { gl: 32856, b: 4, c: 2, bpp: 4 },
    'rgba8unorm-srgb': { gl: 35907, b: 4, c: 4, bpp: 4 },
    'rgba8snorm': { gl: 36759, b: 4, c: 4, render: snorm8_renderable },
    'rgba8uint': { gl: 36220, b: 4, c: 4, bpp: 4 },
    'rgba8sint': { gl: 36238, b: 4, c: 4, bpp: 4 },
    // reverse colors, webgpu only
    'bgra8unorm': { b: 4, c: 4 },
    'bgra8unorm-srgb': { b: 4, c: 4 },
    'rg16uint': { gl: 33338, b: 4, c: 1, bpp: 4 },
    'rg16sint': { gl: 33337, b: 4, c: 2, bpp: 4 },
    // When using a WebGL 2 context and the EXT_color_buffer_float WebGL2 extension
    'rg16float': { gl: 33327, bpp: 4, b: 4, c: 2, render: float16_renderable, filter: float16_filterable, rb: true },
    'rg16unorm-webgl': { gl: 33324, b: 2, c: 2, render: norm16_renderable },
    'rg16snorm-webgl': { gl: 36761, b: 2, c: 2, render: snorm16_renderable },
    'r32uint': { gl: 33334, b: 4, c: 1, bpp: 4, rb: true },
    'r32sint': { gl: 33333, b: 4, c: 1, bpp: 4, rb: true },
    'r32float': { gl: 33326, bpp: 4, b: 4, c: 1, render: float32_renderable, filter: float32_filterable },
    // Packed 32-bit formats
    'rgb9e5ufloat': { gl: 35901, b: 4, c: 3, p: 1, render: rgb9e5ufloat_renderable }, // , filter: true},
    'rg11b10ufloat': { gl: 35898, b: 4, c: 3, p: 1, render: float32_renderable, rb: true },
    'rgb10a2unorm': { gl: 32857, b: 4, c: 4, p: 1, rb: true },
    'rgb10a2uint-webgl': { b: 4, c: 4, gl: 36975, p: 1, wgpu: false, bpp: 4, rb: true },
    // 48-bit formats
    'rgb16unorm-webgl': { gl: 32852, b: 2, c: 3, f: norm16_renderable }, // rgb not renderable
    'rgb16snorm-webgl': { gl: 36762, b: 2, c: 3, f: norm16_renderable }, // rgb not renderable
    // 64-bit formats
    'rg32uint': { gl: 33340, b: 8, c: 2, rb: true },
    'rg32sint': { gl: 33339, b: 8, c: 2, rb: true },
    'rg32float': { gl: 33328, b: 8, c: 2, render: float32_renderable, filter: float32_filterable, rb: true },
    'rgba16uint': { gl: 36214, b: 8, c: 4, rb: true },
    'rgba16sint': { gl: 36232, b: 8, c: 4, rb: true },
    'rgba16float': { gl: 34842, b: 8, c: 4, render: float16_renderable, filter: float16_filterable },
    'rgba16unorm-webgl': { gl: 32859, b: 2, c: 4, render: norm16_renderable, rb: true },
    'rgba16snorm-webgl': { gl: 36763, b: 2, c: 4, render: snorm16_renderable },
    // 96-bit formats (deprecated!)
    'rgb32float-webgl': { gl: 34837, render: float32_renderable, filter: float32_filterable,
        gl2ext: EXT_color_buffer_float, dataFormat: 6407, types: [5126] },
    // 128-bit formats
    'rgba32uint': { gl: 36208, b: 16, c: 4, rb: true },
    'rgba32sint': { gl: 36226, b: 16, c: 4, rb: true },
    'rgba32float': { gl: 34836, b: 16, c: 4, render: float32_renderable, filter: float32_filterable, rb: true },
    // Depth and stencil formats
    'stencil8': { gl: 36168, b: 1, c: 1, attachment: 36128, rb: true }, // 8 stencil bits
    'depth16unorm': { gl: 33189, b: 2, c: 1, attachment: 36096,
        dataFormat: 6402, types: [5123], rb: true }, // 16 depth bits
    'depth24plus': { gl: 33190, b: 3, c: 1, attachment: 36096,
        dataFormat: 6402, types: [5125] },
    'depth32float': { gl: 36012, b: 4, c: 1, attachment: 36096,
        dataFormat: 6402, types: [5126], rb: true },
    // The depth component of the "depth24plus" and "depth24plus-stencil8" formats may be implemented as either a 24-bit depth value or a "depth32float" value.
    'depth24plus-stencil8': { gl: 35056, b: 4, c: 2, p: 1, attachment: 33306, rb: true, depthTexture: true,
        dataFormat: 34041, types: [34042] },
    // "depth24unorm-stencil8" feature
    'depth24unorm-stencil8': { gl: 35056, b: 4, c: 2, p: 1, attachment: 33306,
        dataFormat: 34041, types: [34042], rb: true },
    // "depth32float-stencil8" feature - TODO below is render buffer only?
    'depth32float-stencil8': { gl: 36013, b: 5, c: 2, p: 1, attachment: 33306,
        dataFormat: 34041, types: [36269], rb: true },
    // BC compressed formats: check device.features.has("texture-compression-bc");
    'bc1-rgb-unorm-webgl': { gl: 33776, x: X_S3TC, f: texture_compression_bc },
    'bc1-rgb-unorm-srgb-webgl': { gl: 35916, x: X_S3TC_SRGB, f: texture_compression_bc },
    'bc1-rgba-unorm': { gl: 33777, x: X_S3TC, f: texture_compression_bc },
    'bc1-rgba-unorm-srgb': { gl: 35916, x: X_S3TC_SRGB, f: texture_compression_bc },
    'bc2-rgba-unorm': { gl: 33778, x: X_S3TC, f: texture_compression_bc },
    'bc2-rgba-unorm-srgb': { gl: 35918, x: X_S3TC_SRGB, f: texture_compression_bc },
    'bc3-rgba-unorm': { gl: 33779, x: X_S3TC, f: texture_compression_bc },
    'bc3-rgba-unorm-srgb': { gl: 35919, x: X_S3TC_SRGB, f: texture_compression_bc },
    'bc4-r-unorm': { gl: 36283, x: X_RGTC, f: texture_compression_bc },
    'bc4-r-snorm': { gl: 36284, x: X_RGTC, f: texture_compression_bc },
    'bc5-rg-unorm': { gl: 36285, x: X_RGTC, f: texture_compression_bc },
    'bc5-rg-snorm': { gl: 36286, x: X_RGTC, f: texture_compression_bc },
    'bc6h-rgb-ufloat': { gl: 36495, x: X_BPTC, f: texture_compression_bc },
    'bc6h-rgb-float': { gl: 36494, x: X_BPTC, f: texture_compression_bc },
    'bc7-rgba-unorm': { gl: 36492, x: X_BPTC, f: texture_compression_bc },
    'bc7-rgba-unorm-srgb': { gl: 36493, x: X_BPTC, f: texture_compression_bc },
    // WEBGL_compressed_texture_etc: device.features.has("texture-compression-etc2")
    // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression
    'etc2-rgb8unorm': { gl: 37492, f: texture_compression_etc2 },
    'etc2-rgb8unorm-srgb': { gl: 37494, f: texture_compression_etc2 },
    'etc2-rgb8a1unorm': { gl: 37496, f: texture_compression_etc2 },
    'etc2-rgb8a1unorm-srgb': { gl: 37497, f: texture_compression_etc2 },
    'etc2-rgba8unorm': { gl: 37493, f: texture_compression_etc2 },
    'etc2-rgba8unorm-srgb': { gl: 37495, f: texture_compression_etc2 },
    'eac-r11unorm': { gl: 37488, f: texture_compression_etc2 },
    'eac-r11snorm': { gl: 37489, f: texture_compression_etc2 },
    'eac-rg11unorm': { gl: 37490, f: texture_compression_etc2 },
    'eac-rg11snorm': { gl: 37491, f: texture_compression_etc2 },
    // X_ASTC compressed formats: device.features.has("texture-compression-astc")
    'astc-4x4-unorm': { gl: 37808, f: texture_compression_astc },
    'astc-4x4-unorm-srgb': { gl: 37840, f: texture_compression_astc },
    'astc-5x4-unorm': { gl: 37809, f: texture_compression_astc },
    'astc-5x4-unorm-srgb': { gl: 37841, f: texture_compression_astc },
    'astc-5x5-unorm': { gl: 37810, f: texture_compression_astc },
    'astc-5x5-unorm-srgb': { gl: 37842, f: texture_compression_astc },
    'astc-6x5-unorm': { gl: 37811, f: texture_compression_astc },
    'astc-6x5-unorm-srgb': { gl: 37843, f: texture_compression_astc },
    'astc-6x6-unorm': { gl: 37812, f: texture_compression_astc },
    'astc-6x6-unorm-srgb': { gl: 37844, f: texture_compression_astc },
    'astc-8x5-unorm': { gl: 37813, f: texture_compression_astc },
    'astc-8x5-unorm-srgb': { gl: 37845, f: texture_compression_astc },
    'astc-8x6-unorm': { gl: 37814, f: texture_compression_astc },
    'astc-8x6-unorm-srgb': { gl: 37846, f: texture_compression_astc },
    'astc-8x8-unorm': { gl: 37815, f: texture_compression_astc },
    'astc-8x8-unorm-srgb': { gl: 37847, f: texture_compression_astc },
    'astc-10x5-unorm': { gl: 37819, f: texture_compression_astc },
    'astc-10x5-unorm-srgb': { gl: 37851, f: texture_compression_astc },
    'astc-10x6-unorm': { gl: 37817, f: texture_compression_astc },
    'astc-10x6-unorm-srgb': { gl: 37849, f: texture_compression_astc },
    'astc-10x8-unorm': { gl: 37818, f: texture_compression_astc },
    'astc-10x8-unorm-srgb': { gl: 37850, f: texture_compression_astc },
    'astc-10x10-unorm': { gl: 37819, f: texture_compression_astc },
    'astc-10x10-unorm-srgb': { gl: 37851, f: texture_compression_astc },
    'astc-12x10-unorm': { gl: 37820, f: texture_compression_astc },
    'astc-12x10-unorm-srgb': { gl: 37852, f: texture_compression_astc },
    'astc-12x12-unorm': { gl: 37821, f: texture_compression_astc },
    'astc-12x12-unorm-srgb': { gl: 37853, f: texture_compression_astc },
    // WEBGL_compressed_texture_pvrtc
    'pvrtc-rgb4unorm-webgl': { gl: 35840, f: texture_compression_pvrtc_webgl },
    'pvrtc-rgba4unorm-webgl': { gl: 35842, f: texture_compression_pvrtc_webgl },
    'pvrtc-rbg2unorm-webgl': { gl: 35841, f: texture_compression_pvrtc_webgl },
    'pvrtc-rgba2unorm-webgl': { gl: 35843, f: texture_compression_pvrtc_webgl },
    // WEBGL_compressed_texture_etc1
    'etc1-rbg-unorm-webgl': { gl: 36196, f: texture_compression_etc1_webgl },
    // WEBGL_compressed_texture_atc
    'atc-rgb-unorm-webgl': { gl: 35986, f: texture_compression_atc_webgl },
    'atc-rgba-unorm-webgl': { gl: 35986, f: texture_compression_atc_webgl },
    'atc-rgbai-unorm-webgl': { gl: 34798, f: texture_compression_atc_webgl }
};
/** Legal combinations for internalFormat, format and type *
// [GL.DEPTH_COMPONENT]: {types: [GL.UNSIGNED_SHORT, GL.UNSIGNED_INT, GL.UNSIGNED_INT_24_8]},
// [GL.DEPTH_STENCIL]: ,
// Sized texture format
// R
[GL.R8]: {dataFormat: GL.RED, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.R16F]: {dataFormat: GL.RED, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.R8UI]: {dataFormat: GL.RED_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
// // RG
[GL.RG8]: {dataFormat: GL.RG, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.RG16F]: {dataFormat: GL.RG, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RG8UI]: {dataFormat: GL.RG_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
// // RGB
[GL.RGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.SRGB8]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.RGB16F]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RGB8UI]: {dataFormat: GL.RGB_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true},
// // RGBA

[GL.RGB565]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_6_5], gl2: true},
[GL.R11F_G11F_B10F]: {dataFormat: GL.RGB, types: [GL.UNSIGNED_INT_10F_11F_11F_REV, GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RGB9_E5]: {dataFormat: GL.RGB, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RGBA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true},
[GL.SRGB8_ALPHA8]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE], gl2: true, gl1ext: EXT_SRGB},
[GL.RGB5_A1]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_5_5_5_1], gl2: true},
[GL.RGBA4]: {dataFormat: GL.RGBA, types: [GL.UNSIGNED_BYTE, GL.UNSIGNED_SHORT_4_4_4_4], gl2: true},
[GL.RGBA16F]: {dataFormat: GL.RGBA, types: [GL.HALF_FLOAT, GL.FLOAT], gl2: true},
[GL.RGBA8UI]: {dataFormat: GL.RGBA_INTEGER, types: [GL.UNSIGNED_BYTE], gl2: true}
*/
/* This table is now baked into the above table
type RenderbufferFormat = {
  bpp: number;
  gl2?: boolean;
  ext?: string;
};

export const RENDERBUFFER_FORMATS: Record<string, RenderbufferFormat> = {
  [GL.DEPTH_COMPONENT16]: {bpp: 2}, // 16 depth bits.
  // TODO - Not clear which webgpu value to map this to.
  // [GL.DEPTH_COMPONENT24]: {gl2: true, bpp: 3},
  [GL.DEPTH_COMPONENT32F]: {gl2: true, bpp: 4},

  [GL.STENCIL_INDEX8]: {bpp: 1}, // 8 stencil bits.

  [GL.DEPTH_STENCIL]: {bpp: 4},
  [GL.DEPTH24_STENCIL8]: {gl2: true, bpp: 4},
  [GL.DEPTH32F_STENCIL8]: {gl2: true, bpp: 5},

  // When using a WebGL 1 context, color renderbuffer formats are limited
  [GL.RGBA4]: {gl2: true, bpp: 2},
  [GL.RGB565]: {gl2: true, bpp: 2},
  [GL.RGB5_A1]: {gl2: true, bpp: 2},

  // When using a WebGL 2 context, the following values are available additionally:
  [GL.R8]: {gl2: true, bpp: 1},
  [GL.R8UI]: {gl2: true, bpp: 1},
  [GL.R8I]: {gl2: true, bpp: 1},
  [GL.R16UI]: {gl2: true, bpp: 2},
  [GL.R16I]: {gl2: true, bpp: 2},
  [GL.R32UI]: {gl2: true, bpp: 4},
  [GL.R32I]: {gl2: true, bpp: 4},
  [GL.RG8]: {gl2: true, bpp: 2},
  [GL.RG8UI]: {gl2: true, bpp: 2},
  [GL.RG8I]: {gl2: true, bpp: 2},
  [GL.RG16UI]: {gl2: true, bpp: 4},
  [GL.RG16I]: {gl2: true, bpp: 4},
  [GL.RG32UI]: {gl2: true, bpp: 8},
  [GL.RG32I]: {gl2: true, bpp: 8},
  [GL.RGB8]: {gl2: true, bpp: 3},
  [GL.RGBA8]: {gl2: true, bpp: 4},
  // [GL.SRGB8_ALPHA8]: {gl2: true, gl1: SRGB}, // When using the EXT_sRGB WebGL1 extension
  [GL.RGB10_A2]: {gl2: true, bpp: 4},
  [GL.RGBA8UI]: {gl2: true, bpp: 4},
  [GL.RGBA8I]: {gl2: true, bpp: 4},
  [GL.RGB10_A2UI]: {gl2: true, bpp: 4},
  [GL.RGBA16UI]: {gl2: true, bpp: 8},
  [GL.RGBA16I]: {gl2: true, bpp: 8},
  [GL.RGBA32I]: {gl2: true, bpp: 16},
  [GL.RGBA32UI]: {gl2: true, bpp: 16},

  // When using a WebGL 2 context and the EXT_color_buffer_float WebGL2 extension
  [GL.R16F]: {ext: EXT_FLOAT_WEBGL2, bpp: 2},
  [GL.RG16F]: {ext: EXT_FLOAT_WEBGL2, bpp: 4},
  [GL.RGBA16F]: {ext: EXT_FLOAT_WEBGL2, bpp: 8},
  [GL.R32F]: {ext: EXT_FLOAT_WEBGL2, bpp: 4},
  [GL.RG32F]: {ext: EXT_FLOAT_WEBGL2, bpp: 8},
  // TODO - can't get WEBGL_color_buffer_float to work on renderbuffers
  [GL.RGBA32F]: {ext: EXT_FLOAT_WEBGL2, bpp: 16},
  // [GL.RGBA32F]: {ext: EXT_FLOAT_WEBGL2},
  [GL.R11F_G11F_B10F]: {ext: EXT_FLOAT_WEBGL2, bpp: 4}
};
*/
/** @deprecated should be removed */
const DATA_FORMAT_CHANNELS = {
    [6403]: 1,
    [36244]: 1,
    [33319]: 2,
    [33320]: 2,
    [6407]: 3,
    [36248]: 3,
    [6408]: 4,
    [36249]: 4,
    [6402]: 1,
    [34041]: 1,
    [6406]: 1,
    [6409]: 1,
    [6410]: 2
};
/** @deprecated should be removed */
const TYPE_SIZES = {
    [5126]: 4,
    [5125]: 4,
    [5124]: 4,
    [5123]: 2,
    [5122]: 2,
    [5131]: 2,
    [5120]: 1,
    [5121]: 1
};
// FUNCTIONS
/** Checks if a texture format is supported */
function isTextureFormatSupported(gl, format, extensions) {
    const info = TEXTURE_FORMATS[format];
    if (!info) {
        return false;
    }
    // Check that we have a GL constant
    if (info.gl === undefined) {
        return false;
    }
    // Check extensions
    const extension = info.x || info.gl2ext;
    if (extension) {
        return Boolean((0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, extension, extensions));
    }
    return true;
}
function isRenderbufferFormatSupported(gl, format, extensions) {
    // Note: Order is important since the function call initializes extensions.
    return isTextureFormatSupported(gl, format, extensions) && TEXTURE_FORMATS[format]?.rb;
}
/**
 * Map WebGL texture formats (GL constants) to WebGPU-style TextureFormat strings
 */
function convertGLToTextureFormat(format) {
    if (typeof format === 'string') {
        return format;
    }
    const entry = Object.entries(TEXTURE_FORMATS).find(([, entry]) => entry.gl === format);
    if (!entry) {
        throw new Error(`Unknown texture format ${format}`);
    }
    return entry[0];
}
/**
 * Map WebGPU style texture format strings to GL constants
 */
function convertTextureFormatToGL(format) {
    const formatInfo = TEXTURE_FORMATS[format];
    const webglFormat = formatInfo?.gl;
    if (webglFormat === undefined) {
        throw new Error(`Unsupported texture format ${format}`);
    }
    return webglFormat;
}
/** Checks if a texture format is supported */
function getTextureFormatSupport(gl, format, extensions) {
    const info = TEXTURE_FORMATS[format];
    if (!info) {
        return { supported: false };
    }
    // let decoded;
    // try {
    //   decoded = decodeTextureFormat(format);
    // } catch {}
    // Support Check that we have a GL constant
    let supported = info.gl === undefined;
    supported = supported && checkTextureFeature(gl, info.f, extensions);
    // Filtering
    // const filterable = info.filter
    //   ? checkTextureFeature(gl, infofilter])
    //   : decoded && !decoded.signed;
    // const renderable = info.filter
    //   ? checkTextureFeature(gl, inforender])
    //   : decoded && !decoded.signed;
    return {
        supported,
        renderable: supported && checkTextureFeature(gl, info.render, extensions),
        filterable: supported && checkTextureFeature(gl, info.filter, extensions),
        blendable: false, // tod,
        storable: false
    };
}
/** Checks whether linear filtering (interpolated sampling) is available for floating point textures */
function isTextureFormatFilterable(gl, format, extensions) {
    if (!isTextureFormatSupported(gl, format, extensions)) {
        return false;
    }
    if (format.startsWith('depth') || format.startsWith('stencil')) {
        return false;
    }
    try {
        const decoded = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.decodeTextureFormat)(format);
        if (decoded.signed) {
            return false;
        }
    }
    catch {
        return false;
    }
    if (format.endsWith('32float')) {
        return Boolean((0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, 'OES_texture_float_linear, extensions', extensions));
    }
    if (format.endsWith('16float')) {
        return Boolean((0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, 'OES_texture_half_float_linear, extensions', extensions));
    }
    return true;
}
function isTextureFormatRenderable(gl, format, extensions) {
    if (!isTextureFormatSupported(gl, format, extensions)) {
        return false;
    }
    if (typeof format === 'number') {
        return false; // isTextureFormatFilterableWebGL(gl, format);
    }
    // TODO depends on device...
    return true;
}
/** Get parameters necessary to work with format in WebGL: internalFormat, dataFormat, type, compressed, */
function getWebGLTextureParameters(format) {
    const formatData = TEXTURE_FORMATS[format];
    const webglFormat = convertTextureFormatToGL(format);
    const decoded = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.decodeTextureFormat)(format);
    return {
        format: webglFormat,
        dataFormat: formatData?.dataFormat ||
            getWebGLPixelDataFormat(decoded.format, decoded.integer, decoded.normalized, webglFormat),
        // depth formats don't have a type
        type: decoded.dataType
            ? (0,_vertex_formats_js__WEBPACK_IMPORTED_MODULE_2__.getGLFromVertexType)(decoded.dataType)
            : formatData?.types?.[0] || 5121,
        // @ts-expect-error
        compressed: decoded.compressed
    };
}
function getDepthStencilAttachmentWebGL(format) {
    const info = TEXTURE_FORMATS[format];
    if (!info?.attachment) {
        throw new Error(`${format} is not a depth stencil format`);
    }
    return info.attachment;
}
/** TODO - VERY roundabout legacy way of calculating bytes per pixel */
function getTextureFormatBytesPerPixel(format) {
    // TODO remove webgl1 support
    const params = getWebGLTextureParameters(format);
    // NOTE(Tarek): Default to RGBA bytes
    const channels = DATA_FORMAT_CHANNELS[params.dataFormat] || 4;
    const channelSize = TYPE_SIZES[params.type] || 1;
    return channels * channelSize;
}
// DATA TYPE HELPERS
function getWebGLPixelDataFormat(dataFormat, integer, normalized, format) {
    // WebGL1 formats use same internalFormat
    if (format === 6408 || format === 6407) {
        return format;
    }
    // prettier-ignore
    switch (dataFormat) {
        case 'r': return integer && !normalized ? 36244 : 6403;
        case 'rg': return integer && !normalized ? 33320 : 33319;
        case 'rgb': return integer && !normalized ? 36248 : 6407;
        case 'rgba': return integer && !normalized ? 36249 : 6408;
        default: return 6408;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/vertex-formats.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getGLFromVertexType: function() { return getGLFromVertexType; },
  getVertexFormatFromGL: function() { return getVertexFormatFromGL; },
  getVertexTypeFromGL: function() { return getVertexTypeFromGL; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Get vertex format from GL constants */
function getVertexFormatFromGL(type, components) {
    const base = getVertexTypeFromGL(type);
    // prettier-ignore
    switch (components) {
        // @ts-expect-error TODO deal with lack of formats
        case 1: return base;
        case 2: return `${base}x2`;
        // @ts-expect-error TODO deal with lack of formats
        case 3: return `${base}x3`;
        case 4: return `${base}x4`;
    }
    // @ts-ignore unreachable
    throw new Error(String(components));
}
/** Get data type from GL constants */
function getVertexTypeFromGL(type, normalized = false) {
    // prettier-ignore
    switch (type) {
        // WebGPU does not support normalized 32 bit integer attributes
        case 5124: return normalized ? 'sint32' : 'sint32';
        case 5125: return normalized ? 'uint32' : 'uint32';
        case 5122: return normalized ? 'sint16' : 'unorm16';
        case 5123: return normalized ? 'uint16' : 'unorm16';
        case 5120: return normalized ? 'sint8' : 'snorm16';
        case 5121: return normalized ? 'uint8' : 'unorm8';
        case 5126: return 'float32';
        case 5131: return 'float16';
    }
    // @ts-ignore unreachable
    throw new Error(String(type));
}
function getGLFromVertexType(dataType) {
    // prettier-ignore
    switch (dataType) {
        case 'uint8': return 5121;
        case 'sint8': return 5120;
        case 'unorm8': return 5121;
        case 'snorm8': return 5120;
        case 'uint16': return 5123;
        case 'sint16': return 5122;
        case 'unorm16': return 5123;
        case 'snorm16': return 5122;
        case 'uint32': return 5125;
        case 'sint32': return 5124;
        // WebGPU does not support normalized 32 bit integer attributes
        // case 'unorm32': return GL.UNSIGNED_INT;
        // case 'snorm32': return GL.INT;
        case 'float16': return 5131;
        case 'float32': return 5126;
    }
    // @ts-ignore unreachable
    throw new Error(String(dataType));
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-features.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WebGLDeviceFeatures: function() { return WebGLDeviceFeatures; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/device.js");
/* harmony import */var _context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js");
/* harmony import */var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Feature detection for WebGL
// Provides a function that enables simple checking of which WebGL features are




/**
 * Defines luma.gl "feature" names and semantics
 * when value is 'string' it is the name of the extension that enables this feature
 */
const WEBGL_FEATURES = {
    // optional WebGPU features
    'depth-clip-control': 'EXT_depth_clamp', // TODO these seem subtly different
    // 'timestamp-query' // GPUQueryType "timestamp-query"
    // "indirect-first-instance"
    // Textures are handled by getTextureFeatures()
    // 'depth24unorm-stencil8' // GPUTextureFormat 'depth24unorm-stencil8'
    // 'depth32float-stencil8' // GPUTextureFormat 'depth32float-stencil8'
    // optional WebGL features
    'timer-query-webgl': 'EXT_disjoint_timer_query_webgl2',
    'compilation-status-async-webgl': 'KHR_parallel_shader_compile',
    'polygon-mode-webgl': 'WEBGL_polygon_mode',
    'provoking-vertex-webgl': 'WEBGL_provoking_vertex',
    'shader-clip-cull-distance-webgl': 'WEBGL_clip_cull_distance',
    'shader-noperspective-interpolation-webgl': 'NV_shader_noperspective_interpolation',
    'shader-conservative-depth-webgl': 'EXT_conservative_depth'
    // Textures are handled by getTextureFeatures()
};
/**
 * WebGL extensions exposed as luma.gl features
 * To minimize GL log noise and improve performance, this class ensures that
 * - WebGL extensions are not queried until the corresponding feature is checked.
 * - WebGL extensions are only queried once.
 */
class WebGLDeviceFeatures extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.DeviceFeatures {
    gl;
    extensions;
    testedFeatures = new Set();
    constructor(gl, extensions, disabledFeatures) {
        super([], disabledFeatures);
        this.gl = gl;
        this.extensions = extensions;
        // TODO - is this really needed?
        // Enable EXT_float_blend first: https://developer.mozilla.org/en-US/docs/Web/API/EXT_float_blend
        (0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_1__.getWebGLExtension)(gl, 'EXT_color_buffer_float', extensions);
    }
    *[Symbol.iterator]() {
        const features = this.getFeatures();
        for (const feature of features) {
            if (this.has(feature)) {
                yield feature;
            }
        }
        return [];
    }
    has(feature) {
        if (this.disabledFeatures[feature]) {
            return false;
        }
        // We have already tested this feature
        if (!this.testedFeatures.has(feature)) {
            this.testedFeatures.add(feature);
            // Check the feature once
            if ((0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_2__.isTextureFeature)(feature) && (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_2__.checkTextureFeature)(this.gl, feature, this.extensions)) {
                this.features.add(feature);
            }
            if (this.getWebGLFeature(feature)) {
                this.features.add(feature);
            }
        }
        return this.features.has(feature);
    }
    // FOR DEVICE
    initializeFeatures() {
        // Initialize all features by checking them.
        // Except WEBGL_polygon_mode since Chrome logs ugly console warnings
        const features = this.getFeatures().filter(feature => feature !== 'polygon-mode-webgl');
        for (const feature of features) {
            this.has(feature);
        }
    }
    // IMPLEMENTATION
    getFeatures() {
        return [...Object.keys(WEBGL_FEATURES), ...Object.keys(_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_2__.TEXTURE_FEATURES)];
    }
    /** Extract all WebGL features */
    getWebGLFeature(feature) {
        const featureInfo = WEBGL_FEATURES[feature];
        // string value requires checking the corresponding WebGL extension
        const isSupported = typeof featureInfo === 'string'
            ? Boolean((0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_1__.getWebGLExtension)(this.gl, featureInfo, this.extensions))
            : Boolean(featureInfo);
        return isSupported;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-info.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getDeviceInfo: function() { return getDeviceInfo; }
});
/* harmony import */var _context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/** @returns strings identifying the GPU vendor and driver. */
function getDeviceInfo(gl, extensions) {
    // "Masked" info is always available, but don't contain much useful information
    const vendorMasked = gl.getParameter(7936);
    const rendererMasked = gl.getParameter(7937);
    // If we are lucky, unmasked info is available
    // https://www.khronos.org/registry/webgl/extensions/WEBGL_debug_renderer_info/
    (0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_0__.getWebGLExtension)(gl, 'WEBGL_debug_renderer_info', extensions);
    const ext = extensions.WEBGL_debug_renderer_info;
    const vendorUnmasked = gl.getParameter(ext ? ext.UNMASKED_VENDOR_WEBGL : 7936);
    const rendererUnmasked = gl.getParameter(ext ? ext.UNMASKED_RENDERER_WEBGL : 7937);
    const vendor = vendorUnmasked || vendorMasked;
    const renderer = rendererUnmasked || rendererMasked;
    // Driver version
    const version = gl.getParameter(7938);
    // "Sniff" the GPU type and backend from the info. This works best if unmasked info is available.
    const gpu = identifyGPUVendor(vendor, renderer);
    const gpuBackend = identifyGPUBackend(vendor, renderer);
    const gpuType = identifyGPUType(vendor, renderer);
    // Determine GLSL version
    // For now, skip parsing of the long version string, just use context type below to deduce version
    // const version = gl.getParameter(GL.SHADING_LANGUAGE_VERSION) as string;
    // const shadingLanguageVersion = parseGLSLVersion(version);
    const shadingLanguage = 'glsl';
    const shadingLanguageVersion = 300;
    return {
        type: 'webgl',
        gpu,
        gpuType,
        gpuBackend,
        vendor,
        renderer,
        version,
        shadingLanguage,
        shadingLanguageVersion
    };
}
/** "Sniff" the GPU type from the info. This works best if unmasked info is available. */
function identifyGPUVendor(vendor, renderer) {
    if (/NVIDIA/i.exec(vendor) || /NVIDIA/i.exec(renderer)) {
        return 'nvidia';
    }
    if (/INTEL/i.exec(vendor) || /INTEL/i.exec(renderer)) {
        return 'intel';
    }
    if (/Apple/i.exec(vendor) || /Apple/i.exec(renderer)) {
        return 'apple';
    }
    if (/AMD/i.exec(vendor) ||
        /AMD/i.exec(renderer) ||
        /ATI/i.exec(vendor) ||
        /ATI/i.exec(renderer)) {
        return 'amd';
    }
    if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {
        return 'software';
    }
    return 'unknown';
}
/** "Sniff" the GPU backend from the info. This works best if unmasked info is available. */
function identifyGPUBackend(vendor, renderer) {
    if (/Metal/i.exec(vendor) || /Metal/i.exec(renderer)) {
        return 'metal';
    }
    if (/ANGLE/i.exec(vendor) || /ANGLE/i.exec(renderer)) {
        return 'opengl';
    }
    return 'unknown';
}
function identifyGPUType(vendor, renderer) {
    if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {
        return 'cpu';
    }
    const gpuVendor = identifyGPUVendor(vendor, renderer);
    switch (gpuVendor) {
        case 'intel':
            return 'integrated';
        case 'software':
            return 'cpu';
        case 'unknown':
            return 'unknown';
        default:
            return 'discrete';
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-limits.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WebGLDeviceLimits: function() { return WebGLDeviceLimits; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/device.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// prettier-ignore
class WebGLDeviceLimits extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.DeviceLimits {
    get maxTextureDimension1D() { return 0; } // WebGL does not support 1D textures
    get maxTextureDimension2D() { return this.getParameter(3379); }
    get maxTextureDimension3D() { return this.getParameter(32883); }
    get maxTextureArrayLayers() { return this.getParameter(35071); }
    get maxBindGroups() { return 0; }
    get maxDynamicUniformBuffersPerPipelineLayout() { return 0; } // TBD
    get maxDynamicStorageBuffersPerPipelineLayout() { return 0; } // TBD
    get maxSampledTexturesPerShaderStage() { return this.getParameter(35660); } // ) TBD
    get maxSamplersPerShaderStage() { return this.getParameter(35661); }
    get maxStorageBuffersPerShaderStage() { return 0; } // TBD
    get maxStorageTexturesPerShaderStage() { return 0; } // TBD
    get maxUniformBuffersPerShaderStage() { return this.getParameter(35375); }
    get maxUniformBufferBindingSize() { return this.getParameter(35376); }
    get maxStorageBufferBindingSize() { return 0; }
    get minUniformBufferOffsetAlignment() { return this.getParameter(35380); }
    get minStorageBufferOffsetAlignment() { return 0; }
    get maxVertexBuffers() { return 16; } // WebGL 2 supports 16 buffers, see https://github.com/gpuweb/gpuweb/issues/4284
    get maxVertexAttributes() { return this.getParameter(34921); }
    get maxVertexBufferArrayStride() { return 2048; } // TBD, this is just the default value from WebGPU
    get maxInterStageShaderComponents() { return this.getParameter(35659); }
    get maxComputeWorkgroupStorageSize() { return 0; } // WebGL does not support compute shaders
    get maxComputeInvocationsPerWorkgroup() { return 0; } // WebGL does not support compute shaders
    get maxComputeWorkgroupSizeX() { return 0; } // WebGL does not support compute shaders
    get maxComputeWorkgroupSizeY() { return 0; } // WebGL does not support compute shaders
    get maxComputeWorkgroupSizeZ() { return 0; } // WebGL does not support compute shaders
    get maxComputeWorkgroupsPerDimension() { return 0; } // WebGL does not support compute shaders
    // PRIVATE
    gl;
    limits = {};
    constructor(gl) {
        super();
        this.gl = gl;
    }
    getParameter(parameter) {
        if (this.limits[parameter] === undefined) {
            this.limits[parameter] = this.gl.getParameter(parameter);
        }
        return this.limits[parameter];
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/decode-webgl-types.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  decodeGLAttributeType: function() { return decodeGLAttributeType; },
  decodeGLUniformType: function() { return decodeGLUniformType; },
  decomposeCompositeGLDataType: function() { return decomposeCompositeGLDataType; },
  getCompositeGLDataType: function() { return getCompositeGLDataType; },
  isSamplerUniform: function() { return isSamplerUniform; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Check is uniform is of sampler type */
function isSamplerUniform(type) {
    return SAMPLER_TYPES.includes(type);
}
const SAMPLER_TYPES = [
    35678,
    35680,
    35679,
    35682,
    36289,
    36292,
    36293,
    36298,
    36299,
    36300,
    36303,
    36306,
    36307,
    36308,
    36311
];
// Composite types table
const COMPOSITE_GL_TYPES = {
    [5126]: [5126, 1, 'float', 'f32', 'float32'],
    [35664]: [5126, 2, 'vec2', 'vec2<f32>', 'float32x2'],
    [35665]: [5126, 3, 'vec3', 'vec3<f32>', 'float32x3'],
    [35666]: [5126, 4, 'vec4', 'vec4<f32>', 'float32x4'],
    [5124]: [5124, 1, 'int', 'i32', 'sint32'],
    [35667]: [5124, 2, 'ivec2', 'vec2<i32>', 'sint32x2'],
    [35668]: [5124, 3, 'ivec3', 'vec3<i32>', 'sint32x3'],
    [35669]: [5124, 4, 'ivec4', 'vec4<i32>', 'sint32x4'],
    [5125]: [5125, 1, 'uint', 'u32', 'uint32'],
    [36294]: [5125, 2, 'uvec2', 'vec2<u32>', 'uint32x2'],
    [36295]: [5125, 3, 'uvec3', 'vec3<u32>', 'uint32x3'],
    [36296]: [5125, 4, 'uvec4', 'vec4<u32>', 'uint32x4'],
    [35670]: [5126, 1, 'bool', 'f32', 'float32'],
    [35671]: [5126, 2, 'bvec2', 'vec2<f32>', 'float32x2'],
    [35672]: [5126, 3, 'bvec3', 'vec3<f32>', 'float32x3'],
    [35673]: [5126, 4, 'bvec4', 'vec4<f32>', 'float32x4'],
    // TODO - are sizes/components below correct?
    [35674]: [5126, 8, 'mat2', 'mat2x2<f32>'], // 4
    [35685]: [5126, 8, 'mat2x3', 'mat2x3<f32>'], // 6
    [35686]: [5126, 8, 'mat2x4', 'mat2x4<f32>'], // 8
    [35687]: [5126, 12, 'mat3x2', 'mat3x2<f32>'], // 6
    [35675]: [5126, 12, 'mat3', 'mat3x3<f32>'], // 9
    [35688]: [5126, 12, 'mat3x4', 'mat3x4<f32>'], // 12
    [35689]: [5126, 16, 'mat4x2', 'mat4x2<f32>'], // 8
    [35690]: [5126, 16, 'mat4x3', 'mat4x3<f32>'], // 12
    [35676]: [5126, 16, 'mat4', 'mat4x4<f32>'] // 16
};
/** Decomposes a composite type (GL.VEC3) into a basic type (GL.FLOAT) and components (3) */
function decodeGLUniformType(glUniformType) {
    const typeAndSize = COMPOSITE_GL_TYPES[glUniformType];
    if (!typeAndSize) {
        throw new Error('uniform');
    }
    const [glType, components, , format] = typeAndSize;
    return { format, components, glType };
}
/** Decomposes a composite type (GL.VEC3) into a basic type (GL.FLOAT) and components (3) */
function decodeGLAttributeType(glAttributeType) {
    const typeAndSize = COMPOSITE_GL_TYPES[glAttributeType];
    if (!typeAndSize) {
        throw new Error('attribute');
    }
    const [, components, , shaderType, vertexFormat] = typeAndSize;
    // TODO sanity - if (shaderType.startsWith('mat' ...))
    const attributeType = shaderType;
    return { attributeType, vertexFormat, components }; // , glType};
}
/** Decomposes a composite type GL.VEC3 into a basic type (GL.FLOAT) and components (3) */
function decomposeCompositeGLDataType(compositeGLDataType) {
    const typeAndSize = COMPOSITE_GL_TYPES[compositeGLDataType];
    if (!typeAndSize) {
        return null;
    }
    const [type, components] = typeAndSize;
    return { type, components };
}
function getCompositeGLDataType(type, components) {
    switch (type) {
        case 5120:
        case 5121:
        case 5122:
        case 5123:
            type = 5126;
            break;
        default:
    }
    for (const glType in COMPOSITE_GL_TYPES) {
        const [compType, compComponents, name] = COMPOSITE_GL_TYPES[glType];
        if (compType === type && compComponents === components) {
            return { glType: Number(glType), name };
        }
    }
    return null;
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/get-shader-layout.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getShaderLayout: function() { return getShaderLayout; }
});
/* harmony import */var _classic_accessor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/accessor.js");
/* harmony import */var _decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/decode-webgl-types.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

 // TODO - should NOT depend on classic API

/**
 * Extract metadata describing binding information for a program's shaders
 * Note: `linkProgram()` needs to have been called
 * (although linking does not need to have been successful).
 */
function getShaderLayout(gl, program) {
    const shaderLayout = {
        attributes: [],
        bindings: []
    };
    shaderLayout.attributes = readAttributeDeclarations(gl, program);
    // Uniform blocks
    const uniformBlocks = readUniformBlocks(gl, program);
    for (const uniformBlock of uniformBlocks) {
        const uniforms = uniformBlock.uniforms.map(uniform => ({
            name: uniform.name,
            format: uniform.format,
            byteOffset: uniform.byteOffset,
            byteStride: uniform.byteStride,
            arrayLength: uniform.arrayLength
        }));
        shaderLayout.bindings.push({
            type: 'uniform',
            name: uniformBlock.name,
            location: uniformBlock.location,
            visibility: (uniformBlock.vertex ? 0x1 : 0) & (uniformBlock.fragment ? 0x2 : 0),
            minBindingSize: uniformBlock.byteLength,
            uniforms
        });
    }
    const uniforms = readUniformBindings(gl, program);
    let textureUnit = 0;
    for (const uniform of uniforms) {
        if ((0,_decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__.isSamplerUniform)(uniform.type)) {
            const { viewDimension, sampleType } = getSamplerInfo(uniform.type);
            shaderLayout.bindings.push({
                type: 'texture',
                name: uniform.name,
                location: textureUnit,
                viewDimension,
                sampleType
            });
            // @ts-expect-error
            uniform.textureUnit = textureUnit;
            textureUnit += 1;
        }
    }
    if (uniforms.length) {
        shaderLayout.uniforms = uniforms;
    }
    // Varyings
    const varyings = readVaryings(gl, program);
    // Note - samplers are always in unform bindings, even if uniform blocks are used
    if (varyings?.length) {
        shaderLayout.varyings = varyings;
    }
    return shaderLayout;
}
// HELPERS
/**
 * Extract info about all transform feedback varyings
 *
 * linkProgram needs to have been called, although linking does not need to have been successful
 */
function readAttributeDeclarations(gl, program) {
    const attributes = [];
    const count = gl.getProgramParameter(program, 35721);
    for (let index = 0; index < count; index++) {
        const activeInfo = gl.getActiveAttrib(program, index);
        if (!activeInfo) {
            throw new Error('activeInfo');
        }
        const { name, type: compositeType /* , size*/ } = activeInfo;
        const location = gl.getAttribLocation(program, name);
        // Add only user provided attributes, for built-in attributes like `gl_InstanceID` location will be < 0
        if (location >= 0) {
            const { attributeType } = (0,_decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__.decodeGLAttributeType)(compositeType);
            // Whether an attribute is instanced is essentially fixed by the structure of the shader code,
            // so it is arguably a static property of the shader.
            // There is no hint in the shader declarations
            // Heuristic: Any attribute name containing the word "instance" will be assumed to be instanced
            const stepMode = /instance/i.test(name) ? 'instance' : 'vertex';
            attributes.push({
                name,
                location,
                stepMode,
                type: attributeType
                // size - for arrays, size is the number of elements in the array
            });
        }
    }
    // Sort by declaration order
    attributes.sort((a, b) => a.location - b.location);
    return attributes;
}
/**
 * Extract info about all transform feedback varyings
 *
 * linkProgram needs to have been called, although linking does not need to have been successful
 */
function readVaryings(gl, program) {
    const varyings = [];
    const count = gl.getProgramParameter(program, 35971);
    for (let location = 0; location < count; location++) {
        const activeInfo = gl.getTransformFeedbackVarying(program, location);
        if (!activeInfo) {
            throw new Error('activeInfo');
        }
        const { name, type: compositeType, size } = activeInfo;
        const { glType, components } = (0,_decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__.decodeGLUniformType)(compositeType);
        const accessor = new _classic_accessor_js__WEBPACK_IMPORTED_MODULE_1__.Accessor({ type: glType, size: size * components });
        const varying = { location, name, accessor }; // Base values
        varyings.push(varying);
    }
    varyings.sort((a, b) => a.location - b.location);
    return varyings;
}
/**
 * Extract info about all uniforms
 *
 * Query uniform locations and build name to setter map.
 */
function readUniformBindings(gl, program) {
    const uniforms = [];
    const uniformCount = gl.getProgramParameter(program, 35718);
    for (let i = 0; i < uniformCount; i++) {
        const activeInfo = gl.getActiveUniform(program, i);
        if (!activeInfo) {
            throw new Error('activeInfo');
        }
        const { name: rawName, size, type } = activeInfo;
        const { name, isArray } = parseUniformName(rawName);
        let webglLocation = gl.getUniformLocation(program, name);
        const uniformInfo = {
            // WebGL locations are uniquely typed but just numbers
            location: webglLocation,
            name,
            size,
            type,
            isArray
        };
        uniforms.push(uniformInfo);
        // Array (e.g. matrix) uniforms can occupy several 4x4 byte banks
        if (uniformInfo.size > 1) {
            for (let j = 0; j < uniformInfo.size; j++) {
                const elementName = `${name}[${j}]`;
                webglLocation = gl.getUniformLocation(program, elementName);
                const arrayElementUniformInfo = {
                    ...uniformInfo,
                    name: elementName,
                    location: webglLocation
                };
                uniforms.push(arrayElementUniformInfo);
            }
        }
    }
    return uniforms;
}
/**
 * Extract info about all "active" uniform blocks
 * @note In WebGL, "active" just means that unused (inactive) blocks may have been optimized away during linking)
 */
function readUniformBlocks(gl, program) {
    const getBlockParameter = (blockIndex, pname) => gl.getActiveUniformBlockParameter(program, blockIndex, pname);
    const uniformBlocks = [];
    const blockCount = gl.getProgramParameter(program, 35382);
    for (let blockIndex = 0; blockIndex < blockCount; blockIndex++) {
        const blockInfo = {
            name: gl.getActiveUniformBlockName(program, blockIndex) || '',
            location: getBlockParameter(blockIndex, 35391),
            byteLength: getBlockParameter(blockIndex, 35392),
            vertex: getBlockParameter(blockIndex, 35396),
            fragment: getBlockParameter(blockIndex, 35398),
            uniformCount: getBlockParameter(blockIndex, 35394),
            uniforms: []
        };
        const uniformIndices = getBlockParameter(blockIndex, 35395) || [];
        const uniformType = gl.getActiveUniforms(program, uniformIndices, 35383); // Array of GLenum indicating the types of the uniforms.
        const uniformArrayLength = gl.getActiveUniforms(program, uniformIndices, 35384); // Array of GLuint indicating the sizes of the uniforms.
        // const uniformBlockIndex = gl.getActiveUniforms(
        //   program,
        //   uniformIndices,
        //   GL.UNIFORM_BLOCK_INDEX
        // ); // Array of GLint indicating the block indices of the uniforms.
        const uniformOffset = gl.getActiveUniforms(program, uniformIndices, 35387); // Array of GLint indicating the uniform buffer offsets.
        const uniformStride = gl.getActiveUniforms(program, uniformIndices, 35388); // Array of GLint indicating the strides between the elements.
        // const uniformMatrixStride = gl.getActiveUniforms(
        //   program,
        //   uniformIndices,
        //   GL.UNIFORM_MATRIX_STRIDE
        // ); // Array of GLint indicating the strides between columns of a column-major matrix or a row-major matrix.
        // const uniformRowMajor = gl.getActiveUniforms(program, uniformIndices, GL.UNIFORM_IS_ROW_MAJOR);
        for (let i = 0; i < blockInfo.uniformCount; ++i) {
            const activeInfo = gl.getActiveUniform(program, uniformIndices[i]);
            if (!activeInfo) {
                throw new Error('activeInfo');
            }
            blockInfo.uniforms.push({
                name: activeInfo.name,
                format: (0,_decode_webgl_types_js__WEBPACK_IMPORTED_MODULE_0__.decodeGLUniformType)(uniformType[i]).format,
                type: uniformType[i],
                arrayLength: uniformArrayLength[i],
                byteOffset: uniformOffset[i],
                byteStride: uniformStride[i]
                // matrixStride: uniformStride[i],
                // rowMajor: uniformRowMajor[i]
            });
        }
        uniformBlocks.push(blockInfo);
    }
    uniformBlocks.sort((a, b) => a.location - b.location);
    return uniformBlocks;
}
/**
 * TOOD - compare with a above, confirm copy, then delete
  const bindings: Binding[] = [];
  const count = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);
  for (let blockIndex = 0; blockIndex < count; blockIndex++) {
    const vertex = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),
    const fragment = gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),
    const visibility = (vertex) + (fragment);
    const binding: BufferBinding = {
      location: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_BINDING),
      // name: gl.getActiveUniformBlockName(program, blockIndex),
      type: 'uniform',
      visibility,
      minBindingSize: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_DATA_SIZE),
      // uniformCount: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORMS),
      // uniformIndices: gl.getActiveUniformBlockParameter(program, blockIndex, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES),
    }
    bindings.push(binding);
  }
*/
const SAMPLER_UNIFORMS_GL_TO_GPU = {
    [35678]: ['2d', 'float'],
    [35680]: ['cube', 'float'],
    [35679]: ['3d', 'float'],
    [35682]: ['3d', 'depth'],
    [36289]: ['2d-array', 'float'],
    [36292]: ['2d-array', 'depth'],
    [36293]: ['cube', 'float'],
    [36298]: ['2d', 'sint'],
    [36299]: ['3d', 'sint'],
    [36300]: ['cube', 'sint'],
    [36303]: ['2d-array', 'uint'],
    [36306]: ['2d', 'uint'],
    [36307]: ['3d', 'uint'],
    [36308]: ['cube', 'uint'],
    [36311]: ['2d-array', 'uint']
};
function getSamplerInfo(type) {
    const sampler = SAMPLER_UNIFORMS_GL_TO_GPU[type];
    if (!sampler) {
        throw new Error('sampler');
    }
    const [viewDimension, sampleType] = sampler;
    return { viewDimension, sampleType };
}
// HELPERS
function parseUniformName(name) {
    // Shortcut to avoid redundant or bad matches
    if (name[name.length - 1] !== ']') {
        return {
            name,
            length: 1,
            isArray: false
        };
    }
    // if array name then clean the array brackets
    const UNIFORM_NAME_REGEXP = /([^[]*)(\[[0-9]+\])?/;
    const matches = UNIFORM_NAME_REGEXP.exec(name);
    if (!matches || matches.length < 2) {
        throw new Error(`Failed to parse GLSL uniform name ${name}`);
    }
    return {
        name: matches[1],
        length: matches[2] ? 1 : 0,
        isArray: Boolean(matches[2])
    };
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/parse-shader-compiler-log.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  parseShaderCompilerLog: function() { return parseShaderCompilerLog; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/**
 * Parse a WebGL-format GLSL compilation log into an array of WebGPU style message records.
 * This follows documented WebGL conventions for compilation logs.
 * Based on https://github.com/wwwtyro/gl-format-compiler-error (public domain)
 */
function parseShaderCompilerLog(errLog) {
    // Parse the error - note: browser and driver dependent
    const lines = errLog.split(/\r?\n/);
    const messages = [];
    for (const line of lines) {
        if (line.length <= 1) {
            continue; // eslint-disable-line no-continue
        }
        const segments = line.split(':');
        // Check for messages with no line information `ERROR: unsupported shader version`
        if (segments.length === 2) {
            const [messageType, message] = segments;
            messages.push({
                message: message.trim(),
                type: getMessageType(messageType),
                lineNum: 0,
                linePos: 0
            });
            continue; // eslint-disable-line no-continue
        }
        const [messageType, linePosition, lineNumber, ...rest] = segments;
        let lineNum = parseInt(lineNumber, 10);
        if (isNaN(lineNum)) {
            lineNum = 0;
        }
        let linePos = parseInt(linePosition, 10);
        if (isNaN(linePos)) {
            linePos = 0;
        }
        messages.push({
            message: rest.join(':').trim(),
            type: getMessageType(messageType),
            lineNum,
            linePos // TODO
        });
    }
    return messages;
}
/** Ensure supported type */
function getMessageType(messageType) {
    const MESSAGE_TYPES = ['warning', 'error', 'info'];
    const lowerCaseType = messageType.toLowerCase();
    return (MESSAGE_TYPES.includes(lowerCaseType) ? lowerCaseType : 'info');
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/set-uniform.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  setUniform: function() { return setUniform; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/** Set a raw uniform (without type conversion and caching) */
/* eslint-disable max-len */
function setUniform(gl, location, type, value) {
    const gl2 = gl;
    // Prepare the value for WebGL setters
    let uniformValue = value;
    if (uniformValue === true) {
        uniformValue = 1;
    }
    if (uniformValue === false) {
        uniformValue = 0;
    }
    const arrayValue = typeof uniformValue === 'number' ? [uniformValue] : uniformValue;
    // prettier-ignore
    switch (type) {
        case 35678:
        case 35680:
        case 35679:
        case 35682:
        case 36289:
        case 36292:
        case 36293:
        case 36298:
        case 36299:
        case 36300:
        case 36303:
        case 36306:
        case 36307:
        case 36308:
        case 36311:
            if (typeof value !== 'number') {
                throw new Error('samplers must be set to integers');
            }
            return gl.uniform1i(location, value);
        case 5126: return gl.uniform1fv(location, arrayValue);
        case 35664: return gl.uniform2fv(location, arrayValue);
        case 35665: return gl.uniform3fv(location, arrayValue);
        case 35666: return gl.uniform4fv(location, arrayValue);
        case 5124: return gl.uniform1iv(location, arrayValue);
        case 35667: return gl.uniform2iv(location, arrayValue);
        case 35668: return gl.uniform3iv(location, arrayValue);
        case 35669: return gl.uniform4iv(location, arrayValue);
        case 35670: return gl.uniform1iv(location, arrayValue);
        case 35671: return gl.uniform2iv(location, arrayValue);
        case 35672: return gl.uniform3iv(location, arrayValue);
        case 35673: return gl.uniform4iv(location, arrayValue);
        // WEBGL2 - unsigned integers
        case 5125: return gl2.uniform1uiv(location, arrayValue, 1);
        case 36294: return gl2.uniform2uiv(location, arrayValue, 2);
        case 36295: return gl2.uniform3uiv(location, arrayValue, 3);
        case 36296: return gl2.uniform4uiv(location, arrayValue, 4);
        // WebGL2 - quadratic matrices
        // false: don't transpose the matrix
        case 35674: return gl.uniformMatrix2fv(location, false, arrayValue);
        case 35675: return gl.uniformMatrix3fv(location, false, arrayValue);
        case 35676: return gl.uniformMatrix4fv(location, false, arrayValue);
        // WebGL2 - rectangular matrices
        case 35685: return gl2.uniformMatrix2x3fv(location, false, arrayValue);
        case 35686: return gl2.uniformMatrix2x4fv(location, false, arrayValue);
        case 35687: return gl2.uniformMatrix3x2fv(location, false, arrayValue);
        case 35688: return gl2.uniformMatrix3x4fv(location, false, arrayValue);
        case 35689: return gl2.uniformMatrix4x2fv(location, false, arrayValue);
        case 35690: return gl2.uniformMatrix4x3fv(location, false, arrayValue);
    }
    throw new Error('Illegal uniform');
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getGLDrawMode: function() { return getGLDrawMode; },
  getGLPrimitive: function() { return getGLPrimitive; },
  getPrimitiveCount: function() { return getPrimitiveCount; },
  getPrimitiveDrawMode: function() { return getPrimitiveDrawMode; },
  getVertexCount: function() { return getVertexCount; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// Counts the number of complete primitives given a number of vertices and a drawMode
function getPrimitiveDrawMode(drawMode) {
    switch (drawMode) {
        case 0:
            return 0;
        case 1:
            return 1;
        case 3:
            return 1;
        case 2:
            return 1;
        case 4:
            return 4;
        case 5:
            return 4;
        case 6:
            return 4;
        default:
            throw new Error('drawMode');
    }
}
// Counts the number of complete "primitives" given a number of vertices and a drawMode
function getPrimitiveCount(options) {
    const { drawMode, vertexCount } = options;
    switch (drawMode) {
        case 0:
        case 2:
            return vertexCount;
        case 1:
            return vertexCount / 2;
        case 3:
            return vertexCount - 1;
        case 4:
            return vertexCount / 3;
        case 5:
        case 6:
            return vertexCount - 2;
        default:
            throw new Error('drawMode');
    }
}
// Counts the number of vertices after splitting the vertex stream into separate "primitives"
function getVertexCount(options) {
    const { drawMode, vertexCount } = options;
    const primitiveCount = getPrimitiveCount({ drawMode, vertexCount });
    switch (getPrimitiveDrawMode(drawMode)) {
        case 0:
            return primitiveCount;
        case 1:
            return primitiveCount * 2;
        case 4:
            return primitiveCount * 3;
        default:
            throw new Error('drawMode');
    }
}
/** Get the primitive type for draw */
function getGLDrawMode(topology) {
    // prettier-ignore
    switch (topology) {
        case 'point-list': return 0;
        case 'line-list': return 1;
        case 'line-strip': return 3;
        case 'line-loop-webgl': return 2;
        case 'triangle-list': return 4;
        case 'triangle-strip': return 5;
        case 'triangle-fan-webgl': return 6;
        default: throw new Error(topology);
    }
}
/** Get the primitive type for transform feedback */
function getGLPrimitive(topology) {
    // prettier-ignore
    switch (topology) {
        case 'point-list': return 0;
        case 'line-list': return 1;
        case 'line-strip': return 1;
        case 'line-loop-webgl': return 1;
        case 'triangle-list': return 4;
        case 'triangle-strip': return 4;
        case 'triangle-fan-webgl': return 4;
        default: throw new Error(topology);
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLBuffer: function() { return WEBGLBuffer; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/** WebGL Buffer interface */
class WEBGLBuffer extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer {
    device;
    gl;
    handle;
    /** Target in OpenGL defines the type of buffer */
    glTarget;
    /** Usage is a hint on how frequently the buffer will be updates */
    glUsage;
    /** Index type is needed when issuing draw calls, so we pre-compute it */
    glIndexType = 5123;
    /** Number of bytes allocated on the GPU for this buffer */
    byteLength;
    /** Number of bytes used */
    bytesUsed;
    constructor(device, props = {}) {
        super(device, props);
        this.device = device;
        this.gl = this.device.gl;
        const handle = typeof props === 'object' ? props.handle : undefined;
        this.handle = handle || this.gl.createBuffer();
        device.setSpectorMetadata(this.handle, { ...this.props, data: typeof this.props.data });
        // - In WebGL1, need to make sure we use GL.ELEMENT_ARRAY_BUFFER when initializing element buffers
        //   otherwise buffer type will lock to generic (non-element) buffer
        // - In WebGL2, we can use GL.COPY_READ_BUFFER which avoids locking the type here
        this.glTarget = getWebGLTarget(this.props.usage);
        this.glUsage = getWebGLUsage(this.props.usage);
        this.glIndexType = this.props.indexType === 'uint32' ? 5125 : 5123;
        // Set data: (re)initializes the buffer
        if (props.data) {
            this._initWithData(props.data, props.byteOffset, props.byteLength);
        }
        else {
            this._initWithByteLength(props.byteLength || 0);
        }
    }
    // PRIVATE METHODS
    /** Allocate a new buffer and initialize to contents of typed array */
    _initWithData(data, byteOffset = 0, byteLength = data.byteLength + byteOffset) {
        // const glTarget = this.device.isWebGL2 ? GL.COPY_WRITE_BUFFER : this.glTarget;
        const glTarget = this.glTarget;
        this.gl.bindBuffer(glTarget, this.handle);
        this.gl.bufferData(glTarget, byteLength, this.glUsage);
        this.gl.bufferSubData(glTarget, byteOffset, data);
        this.gl.bindBuffer(glTarget, null);
        this.bytesUsed = byteLength;
        this.byteLength = byteLength;
        this._setDebugData(data, byteOffset, byteLength);
        this.trackAllocatedMemory(byteLength);
    }
    // Allocate a GPU buffer of specified size.
    _initWithByteLength(byteLength) {
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(byteLength >= 0);
        // Workaround needed for Safari (#291):
        // gl.bufferData with size equal to 0 crashes. Instead create zero sized array.
        let data = byteLength;
        if (byteLength === 0) {
            // @ts-expect-error
            data = new Float32Array(0);
        }
        // const glTarget = this.device.isWebGL2 ? GL.COPY_WRITE_BUFFER : this.glTarget;
        const glTarget = this.glTarget;
        this.gl.bindBuffer(glTarget, this.handle);
        this.gl.bufferData(glTarget, data, this.glUsage);
        this.gl.bindBuffer(glTarget, null);
        this.bytesUsed = byteLength;
        this.byteLength = byteLength;
        this._setDebugData(null, 0, byteLength);
        this.trackAllocatedMemory(byteLength);
        return this;
    }
    destroy() {
        if (!this.destroyed && this.handle) {
            this.removeStats();
            this.trackDeallocatedMemory();
            this.gl.deleteBuffer(this.handle);
            this.destroyed = true;
            // @ts-expect-error
            this.handle = null;
        }
    }
    write(data, byteOffset = 0) {
        const srcOffset = 0;
        const byteLength = undefined; // data.byteLength;
        // Create the buffer - binding it here for the first time locks the type
        // In WebGL2, use GL.COPY_WRITE_BUFFER to avoid locking the type
        const glTarget = 36663;
        this.gl.bindBuffer(glTarget, this.handle);
        // WebGL2: subData supports additional srcOffset and length parameters
        if (srcOffset !== 0 || byteLength !== undefined) {
            this.gl.bufferSubData(glTarget, byteOffset, data, srcOffset, byteLength);
        }
        else {
            this.gl.bufferSubData(glTarget, byteOffset, data);
        }
        this.gl.bindBuffer(glTarget, null);
        this._setDebugData(data, byteOffset, data.byteLength);
    }
    /** Asynchronously read data from the buffer */
    async readAsync(byteOffset = 0, byteLength) {
        return this.readSyncWebGL(byteOffset, byteLength);
    }
    /** Synchronously read data from the buffer. WebGL only. */
    readSyncWebGL(byteOffset = 0, byteLength) {
        byteLength = byteLength ?? this.byteLength - byteOffset;
        const data = new Uint8Array(byteLength);
        const dstOffset = 0;
        // Use GL.COPY_READ_BUFFER to avoid disturbing other targets and locking type
        this.gl.bindBuffer(36662, this.handle);
        this.gl.getBufferSubData(36662, byteOffset, data, dstOffset, byteLength);
        this.gl.bindBuffer(36662, null);
        // Update local `data` if offsets are 0
        this._setDebugData(data, byteOffset, byteLength);
        return data;
    }
}
/**
 * Returns a WebGL buffer target
 *
 * @param usage
 * static MAP_READ = 0x01;
 * static MAP_WRITE = 0x02;
 * static COPY_SRC = 0x0004;
 * static COPY_DST = 0x0008;
 * static INDEX = 0x0010;
 * static VERTEX = 0x0020;
 * static UNIFORM = 0x0040;
 * static STORAGE = 0x0080;
 * static INDIRECT = 0x0100;
 * static QUERY_RESOLVE = 0x0200;
 *
 * @returns WebGL buffer targe
 *
 * Buffer bind points in WebGL2
 * gl.COPY_READ_BUFFER: Buffer for copying from one buffer object to another.
 * gl.COPY_WRITE_BUFFER: Buffer for copying from one buffer object to another.
 * gl.TRANSFORM_FEEDBACK_BUFFER: Buffer for transform feedback operations.
 * gl.PIXEL_PACK_BUFFER: Buffer used for pixel transfer operations.
 * gl.PIXEL_UNPACK_BUFFER: Buffer used for pixel transfer operations.
 */
function getWebGLTarget(usage) {
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.INDEX) {
        return 34963;
    }
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.VERTEX) {
        return 34962;
    }
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.UNIFORM) {
        return 35345;
    }
    // Binding a buffer for the first time locks the type
    // In WebGL2, we can use GL.COPY_WRITE_BUFFER to avoid locking the type
    return 34962;
}
/** @todo usage is not passed correctly */
function getWebGLUsage(usage) {
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.INDEX) {
        return 35044;
    }
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.VERTEX) {
        return 35044;
    }
    if (usage & _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Buffer.UNIFORM) {
        return 35048;
    }
    return 35044;
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-buffer.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLCommandBuffer: function() { return WEBGLCommandBuffer; },
  glFormatToComponents: function() { return glFormatToComponents; },
  glTypeToBytes: function() { return glTypeToBytes; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/command-buffer.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */var _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js");
/* harmony import */var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




function cast(value) {
    return value;
}
class WEBGLCommandBuffer extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.CommandBuffer {
    device;
    commands = [];
    constructor(device) {
        super(device, {});
        this.device = device;
    }
    submitCommands(commands = this.commands) {
        for (const command of commands) {
            switch (command.name) {
                case 'copy-buffer-to-buffer':
                    _copyBufferToBuffer(this.device, command.options);
                    break;
                case 'copy-buffer-to-texture':
                    _copyBufferToTexture(this.device, command.options);
                    break;
                case 'copy-texture-to-buffer':
                    _copyTextureToBuffer(this.device, command.options);
                    break;
                case 'copy-texture-to-texture':
                    _copyTextureToTexture(this.device, command.options);
                    break;
            }
        }
    }
}
function _copyBufferToBuffer(device, options) {
    const source = cast(options.source);
    const destination = cast(options.destination);
    // {In WebGL2 we can p}erform the copy on the GPU
    // Use GL.COPY_READ_BUFFER+GL.COPY_WRITE_BUFFER avoid disturbing other targets and locking type
    device.gl.bindBuffer(36662, source.handle);
    device.gl.bindBuffer(36663, destination.handle);
    device.gl.copyBufferSubData(36662, 36663, options.sourceOffset ?? 0, options.destinationOffset ?? 0, options.size);
    device.gl.bindBuffer(36662, null);
    device.gl.bindBuffer(36663, null);
}
/**
 * Copies data from a Buffer object into a Texture object
 * NOTE: doesn't wait for copy to be complete
 */
function _copyBufferToTexture(device, options) {
    throw new Error('Not implemented');
}
/**
 * Copies data from a Texture object into a Buffer object.
 * NOTE: doesn't wait for copy to be complete
 */
function _copyTextureToBuffer(device, options) {
    const { 
    /** Texture to copy to/from. */
    source, 
    /**  Mip-map level of the texture to copy to/from. (Default 0) */
    mipLevel = 0, 
    /** Defines which aspects of the texture to copy to/from. */
    aspect = 'all', 
    /** Width to copy */
    width = options.source.width, 
    /** Height to copy */
    height = options.source.height, depthOrArrayLayers = 0, 
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */
    origin = [0, 0], 
    /** Destination buffer */
    destination, 
    /** Offset, in bytes, from the beginning of the buffer to the start of the image data (default 0) */
    byteOffset = 0, 
    /**
     * The stride, in bytes, between the beginning of each block row and the subsequent block row.
     * Required if there are multiple block rows (i.e. the copy height or depth is more than one block).
     */
    bytesPerRow, 
    /**
     * Number of block rows per single image of the texture.
     * rowsPerImage &times; bytesPerRow is the stride, in bytes, between the beginning of each image of data and the subsequent image.
     * Required if there are multiple images (i.e. the copy depth is more than one).
     */
    rowsPerImage } = options;
    // TODO - Not possible to read just stencil or depth part in WebGL?
    if (aspect !== 'all') {
        throw new Error('not supported');
    }
    // TODO - mipLevels are set when attaching texture to framebuffer
    if (mipLevel !== 0 || depthOrArrayLayers !== 0 || bytesPerRow || rowsPerImage) {
        throw new Error('not implemented');
    }
    // Asynchronous read (PIXEL_PACK_BUFFER) is WebGL2 only feature
    const { framebuffer, destroyFramebuffer } = getFramebuffer(source);
    let prevHandle;
    try {
        const webglBuffer = destination;
        const sourceWidth = width || framebuffer.width;
        const sourceHeight = height || framebuffer.height;
        const sourceParams = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_1__.getWebGLTextureParameters)(framebuffer.texture.props.format);
        const sourceFormat = sourceParams.dataFormat;
        const sourceType = sourceParams.type;
        // if (!target) {
        //   // Create new buffer with enough size
        //   const components = glFormatToComponents(sourceFormat);
        //   const byteCount = glTypeToBytes(sourceType);
        //   const byteLength = byteOffset + sourceWidth * sourceHeight * components * byteCount;
        //   target = device.createBuffer({byteLength});
        // }
        device.gl.bindBuffer(35051, webglBuffer.handle);
        // @ts-expect-error native bindFramebuffer is overridden by our state tracker
        prevHandle = device.gl.bindFramebuffer(36160, framebuffer.handle);
        device.gl.readPixels(origin[0], origin[1], sourceWidth, sourceHeight, sourceFormat, sourceType, byteOffset);
    }
    finally {
        device.gl.bindBuffer(35051, null);
        // prevHandle may be unassigned if the try block failed before binding
        if (prevHandle !== undefined) {
            device.gl.bindFramebuffer(36160, prevHandle);
        }
        if (destroyFramebuffer) {
            framebuffer.destroy();
        }
    }
}
/**
 * Copies data from a Framebuffer or a Texture object into a Buffer object.
 * NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transfer.
export function readPixelsToBuffer(
  source: Framebuffer | Texture,
  options?: {
    sourceX?: number;
    sourceY?: number;
    sourceFormat?: number;
    target?: Buffer; // A new Buffer object is created when not provided.
    targetByteOffset?: number; // byte offset in buffer object
    // following parameters are auto deduced if not provided
    sourceWidth?: number;
    sourceHeight?: number;
    sourceType?: number;
  }
): Buffer
 */
/**
 * Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)
 */
// eslint-disable-next-line complexity, max-statements
function _copyTextureToTexture(device, options) {
    const { 
    /** Texture to copy to/from. */
    source, 
    /**  Mip-map level of the texture to copy to (Default 0) */
    destinationMipLevel = 0, 
    /** Defines which aspects of the texture to copy to/from. */
    // aspect = 'all',
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy from. */
    origin = [0, 0], 
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to. */
    destinationOrigin = [0, 0], 
    /** Texture to copy to/from. */
    destination
    /**  Mip-map level of the texture to copy to/from. (Default 0) */
    // destinationMipLevel = options.mipLevel,
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */
    // destinationOrigin = [0, 0],
    /** Defines which aspects of the texture to copy to/from. */
    // destinationAspect = options.aspect,
     } = options;
    let { width = options.destination.width, height = options.destination.height
    // depthOrArrayLayers = 0
     } = options;
    const { framebuffer, destroyFramebuffer } = getFramebuffer(source);
    const [sourceX, sourceY] = origin;
    const [destinationX, destinationY, destinationZ] = destinationOrigin;
    // @ts-expect-error native bindFramebuffer is overridden by our state tracker
    const prevHandle = device.gl.bindFramebuffer(36160, framebuffer.handle);
    // TODO - support gl.readBuffer (WebGL2 only)
    // const prevBuffer = gl.readBuffer(attachment);
    let texture = null;
    let textureTarget;
    if (destination instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__.WEBGLTexture) {
        texture = destination;
        width = Number.isFinite(width) ? width : texture.width;
        height = Number.isFinite(height) ? height : texture.height;
        texture.bind(0);
        textureTarget = texture.target;
    }
    else {
        throw new Error('invalid destination');
    }
    switch (textureTarget) {
        case 3553:
        case 34067:
            device.gl.copyTexSubImage2D(textureTarget, destinationMipLevel, destinationX, destinationY, sourceX, sourceY, width, height);
            break;
        case 35866:
        case 32879:
            device.gl.copyTexSubImage3D(textureTarget, destinationMipLevel, destinationX, destinationY, destinationZ, sourceX, sourceY, width, height);
            break;
        default:
    }
    if (texture) {
        texture.unbind();
    }
    device.gl.bindFramebuffer(36160, prevHandle);
    if (destroyFramebuffer) {
        framebuffer.destroy();
    }
}
// Returns number of components in a specific readPixels WebGL format
function glFormatToComponents(format) {
    switch (format) {
        case 6406:
        case 33326:
        case 6403:
            return 1;
        case 33328:
        case 33319:
            return 2;
        case 6407:
        case 34837:
            return 3;
        case 6408:
        case 34836:
            return 4;
        // TODO: Add support for additional WebGL2 formats
        default:
            throw new Error('GLFormat');
    }
}
// Return byte count for given readPixels WebGL type
function glTypeToBytes(type) {
    switch (type) {
        case 5121:
            return 1;
        case 33635:
        case 32819:
        case 32820:
            return 2;
        case 5126:
            return 4;
        // TODO: Add support for additional WebGL2 types
        default:
            throw new Error('GLType');
    }
}
// Helper methods
function getFramebuffer(source) {
    if (source instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.Texture) {
        const { width, height, id } = source;
        const framebuffer = source.device.createFramebuffer({
            id: `framebuffer-for-${id}`,
            width,
            height,
            colorAttachments: [source]
        });
        return { framebuffer, destroyFramebuffer: true };
    }
    return { framebuffer: source, destroyFramebuffer: false };
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-encoder.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLCommandEncoder: function() { return WEBGLCommandEncoder; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/command-encoder.js");
/* harmony import */var _webgl_command_buffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-buffer.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


class WEBGLCommandEncoder extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.CommandEncoder {
    device;
    commandBuffer;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.commandBuffer = new _webgl_command_buffer_js__WEBPACK_IMPORTED_MODULE_1__.WEBGLCommandBuffer(device);
    }
    destroy() { }
    finish() {
        this.commandBuffer.submitCommands();
    }
    // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;
    // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;
    // finish(options?: {id?: string}): GPUCommandBuffer;
    copyBufferToBuffer(options) {
        this.commandBuffer.commands.push({ name: 'copy-buffer-to-buffer', options });
    }
    copyBufferToTexture(options) {
        this.commandBuffer.commands.push({ name: 'copy-buffer-to-texture', options });
    }
    copyTextureToBuffer(options) {
        this.commandBuffer.commands.push({ name: 'copy-texture-to-buffer', options });
    }
    copyTextureToTexture(options) {
        this.commandBuffer.commands.push({ name: 'copy-texture-to-texture', options });
    }
    pushDebugGroup(groupLabel) { }
    popDebugGroup() { }
    insertDebugMarker(markerLabel) { }
    resolveQuerySet(querySet, destination, options) { }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLFramebuffer: function() { return WEBGLFramebuffer; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */var _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js");
/* harmony import */var _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js");
/* harmony import */var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors





/** luma.gl Framebuffer, WebGL implementation  */
class WEBGLFramebuffer extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Framebuffer {
    device;
    gl;
    handle;
    get texture() {
        return this.colorAttachments[0];
    }
    constructor(device, props) {
        super(device, props);
        // WebGL default framebuffer handle is null
        const isDefaultFramebuffer = props.handle === null;
        this.device = device;
        this.gl = device.gl;
        this.handle =
            this.props.handle || isDefaultFramebuffer ? this.props.handle : this.gl.createFramebuffer();
        if (!isDefaultFramebuffer) {
            // default framebuffer handle is null, so we can't set spector metadata...
            device.setSpectorMetadata(this.handle, { id: this.props.id, props: this.props });
            // Auto create textures for attachments if needed
            this.autoCreateAttachmentTextures();
            /** Attach from a map of attachments */
            // @ts-expect-error native bindFramebuffer is overridden by our state tracker
            const prevHandle = this.gl.bindFramebuffer(36160, this.handle);
            // Walk the attachments
            for (let i = 0; i < this.colorAttachments.length; ++i) {
                const attachment = this.colorAttachments[i];
                const attachmentPoint = 36064 + i;
                if (attachment) {
                    this._attachOne(attachmentPoint, attachment);
                }
            }
            if (this.depthStencilAttachment) {
                this._attachOne((0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_1__.getDepthStencilAttachmentWebGL)(this.depthStencilAttachment.props.format), this.depthStencilAttachment);
            }
            /** Check the status */
            // @ts-expect-error
            if (props.check !== false) {
                const status = this.gl.checkFramebufferStatus(36160);
                if (status !== 36053) {
                    throw new Error(`Framebuffer ${_getFrameBufferStatus(status)}`);
                }
            }
            this.gl.bindFramebuffer(36160, prevHandle);
        }
    }
    /** destroys any auto created resources etc. */
    destroy() {
        super.destroy(); // destroys owned resources etc.
        if (!this.destroyed && this.handle !== null) {
            this.gl.deleteFramebuffer(this.handle);
            // this.handle = null;
        }
    }
    // PRIVATE
    /** In WebGL we must use renderbuffers for depth/stencil attachments (unless we have extensions) */
    createDepthStencilTexture(format) {
        // return new WEBGLRenderbuffer(this.device, {
        return new _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__.WEBGLTexture(this.device, {
            id: `${this.id}-depth-stencil`,
            format,
            width: this.width,
            height: this.height,
            mipmaps: false
        });
    }
    /**
     * Attachment resize is expected to be a noop if size is same
     */
    resizeAttachments(width, height) {
        // for default framebuffer, just update the stored size
        if (this.handle === null) {
            // assert(width === undefined && height === undefined);
            this.width = this.gl.drawingBufferWidth;
            this.height = this.gl.drawingBufferHeight;
            return this;
        }
        if (width === undefined) {
            width = this.gl.drawingBufferWidth;
        }
        if (height === undefined) {
            height = this.gl.drawingBufferHeight;
        }
        // TODO Not clear that this is better than default destroy/create implementation
        for (const colorAttachment of this.colorAttachments) {
            colorAttachment.texture.resize({ width, height });
        }
        if (this.depthStencilAttachment) {
            this.depthStencilAttachment.texture.resize({ width, height });
        }
        return this;
    }
    /** Attach one attachment */
    _attachOne(attachmentPoint, attachment) {
        // if (attachment instanceof WEBGLRenderbuffer) {
        //   this._attachWEBGLRenderbuffer(attachmentPoint, attachment);
        //   return attachment;
        // }
        if (Array.isArray(attachment)) {
            const [texture, layer = 0, level = 0] = attachment;
            this._attachTexture(attachmentPoint, texture, layer, level);
            return texture;
        }
        if (attachment instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_2__.WEBGLTexture) {
            this._attachTexture(attachmentPoint, attachment, 0, 0);
            return attachment;
        }
        if (attachment instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_3__.WEBGLTextureView) {
            const textureView = attachment;
            this._attachTexture(attachmentPoint, textureView.texture, textureView.props.baseMipLevel, textureView.props.baseArrayLayer);
            return attachment.texture;
        }
        throw new Error('attach');
    }
    // TODO - we do not seem to need render buffers in WebGL 2
    // protected _attachWEBGLRenderbuffer(attachment: GL, renderbuffer: WEBGLRenderbuffer): void {
    //   this.gl.framebufferRenderbuffer(
    //     GL.FRAMEBUFFER,
    //     attachment,
    //     GL.RENDERBUFFER,
    //     renderbuffer.handle
    //   );
    // }
    /**
     * @param attachment
     * @param texture
     * @param layer = 0 - index into WEBGLTextureArray and Texture3D or face for `TextureCubeMap`
     * @param level = 0 - mipmapLevel
     */
    _attachTexture(attachment, texture, layer, level) {
        const { gl } = this.device;
        gl.bindTexture(texture.target, texture.handle);
        switch (texture.target) {
            case 35866:
            case 32879:
                gl.framebufferTextureLayer(36160, attachment, texture.target, level, layer);
                break;
            case 34067:
                // layer must be a cubemap face (or if index, converted to cube map face)
                const face = mapIndexToCubeMapFace(layer);
                gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);
                break;
            case 3553:
                gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);
                break;
            default:
                (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_4__.assert)(false, 'Illegal texture type');
        }
        gl.bindTexture(texture.target, null);
    }
}
// Helper functions
// Map an index to a cube map face constant
function mapIndexToCubeMapFace(layer) {
    // TEXTURE_CUBE_MAP_POSITIVE_X is a big value (0x8515)
    // if smaller assume layer is index, otherwise assume it is already a cube map face constant
    return layer < 34069
        ? layer + 34069
        : layer;
}
// Helper METHODS
// Get a string describing the framebuffer error if installed
function _getFrameBufferStatus(status) {
    switch (status) {
        case 36053:
            return 'success';
        case 36054:
            return 'Mismatched attachments';
        case 36055:
            return 'No attachments';
        case 36057:
            return 'Height/width mismatch';
        case 36061:
            return 'Unsupported or split attachments';
        // WebGL2
        case 36182:
            return 'Samples mismatch';
        // OVR_multiview2 extension
        // case GL.FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: return 'baseViewIndex mismatch';
        default:
            return `${status}`;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-query-set.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLQuerySet: function() { return WEBGLQuerySet; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/query-set.js");
// WebGL2 Query (also handles disjoint timer extensions)


/**
 * Asynchronous queries for different kinds of information
 */
class WEBGLQuerySet extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.QuerySet {
    device;
    handle;
    target = null;
    _queryPending = false;
    _pollingPromise = null;
    get [Symbol.toStringTag]() {
        return 'Query';
    }
    // Create a query class
    constructor(device, props) {
        super(device, props);
        this.device = device;
        if (props.count > 1) {
            throw new Error('WebGL QuerySet can only have one value');
        }
        this.handle = this.device.gl.createQuery();
        Object.seal(this);
    }
    destroy() {
        this.device.gl.deleteQuery(this.handle);
    }
    // FOR RENDER PASS AND COMMAND ENCODER
    /**
     * Shortcut for timer query (dependent on extension in both WebGL1 and 2)
     * Measures GPU time delta between this call and a matching `end` call in the
     * GPU instruction stream.
     */
    beginTimestampQuery() {
        return this._begin(35007);
    }
    endTimestampQuery() {
        this._end();
    }
    // Shortcut for occlusion queries
    beginOcclusionQuery(options) {
        return this._begin(options?.conservative ? 36202 : 35887);
    }
    endOcclusionQuery() {
        this._end();
    }
    // Shortcut for transformFeedbackQuery
    beginTransformFeedbackQuery() {
        return this._begin(35976);
    }
    endTransformFeedbackQuery() {
        this._end();
    }
    async resolveQuery() {
        const value = await this.pollQuery();
        return [value];
    }
    // PRIVATE METHODS
    /**
     * Due to OpenGL API limitations, after calling `begin()` on one Query
     * instance, `end()` must be called on that same instance before
     * calling `begin()` on another query. While there can be multiple
     * outstanding queries representing disjoint `begin()`/`end()` intervals.
     * It is not possible to interleave or overlap `begin` and `end` calls.
     */
    _begin(target) {
        // Don't start a new query if one is already active.
        if (this._queryPending) {
            return;
        }
        this.target = target;
        this.device.gl.beginQuery(this.target, this.handle);
        return;
    }
    // ends the current query
    _end() {
        // Can't end a new query if the last one hasn't been resolved.
        if (this._queryPending) {
            return;
        }
        if (this.target) {
            this.device.gl.endQuery(this.target);
            this.target = null;
            this._queryPending = true;
        }
        return;
    }
    // Returns true if the query result is available
    isResultAvailable() {
        if (!this._queryPending) {
            return false;
        }
        const resultAvailable = this.device.gl.getQueryParameter(this.handle, 34919);
        if (resultAvailable) {
            this._queryPending = false;
        }
        return resultAvailable;
    }
    // Timing query is disjoint, i.e. results are invalid
    isTimerDisjoint() {
        return this.device.gl.getParameter(36795);
    }
    // Returns query result.
    getResult() {
        return this.device.gl.getQueryParameter(this.handle, 34918);
    }
    // Returns the query result, converted to milliseconds to match JavaScript conventions.
    getTimerMilliseconds() {
        return this.getResult() / 1e6;
    }
    // Polls the query
    pollQuery(limit = Number.POSITIVE_INFINITY) {
        if (this._pollingPromise) {
            return this._pollingPromise;
        }
        let counter = 0;
        this._pollingPromise = new Promise((resolve, reject) => {
            const poll = () => {
                if (this.isResultAvailable()) {
                    resolve(this.getResult());
                    this._pollingPromise = null;
                }
                else if (counter++ > limit) {
                    reject('Timed out');
                    this._pollingPromise = null;
                }
                else {
                    requestAnimationFrame(poll);
                }
            };
            requestAnimationFrame(poll);
        });
        return this._pollingPromise;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pass.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLRenderPass: function() { return WEBGLRenderPass; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/render-pass.js");
/* harmony import */var _context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js");
/* harmony import */var _context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
/* harmony import */var _context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors





// Should collapse during minification
const GL_DEPTH_BUFFER_BIT = 0x00000100;
const GL_STENCIL_BUFFER_BIT = 0x00000400;
const GL_COLOR_BUFFER_BIT = 0x00004000;
const GL_COLOR = 0x1800;
const COLOR_CHANNELS = [0x1, 0x2, 0x4, 0x8]; // GPUColorWrite RED, GREEN, BLUE, ALPHA
class WEBGLRenderPass extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPass {
    device;
    /** Parameters that should be applied before each draw call */
    glParameters;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        // TODO - do parameters (scissorRect) affect the clear operation?
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.pushContextState)(this.device.gl);
        this.setParameters(this.props.parameters);
        // Hack - for now WebGL draws in "immediate mode" (instead of queueing the operations)...
        this.clear();
    }
    end() {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_1__.popContextState)(this.device.gl);
        // should add commands to CommandEncoder.
    }
    pushDebugGroup(groupLabel) { }
    popDebugGroup() { }
    insertDebugMarker(markerLabel) { }
    // beginOcclusionQuery(queryIndex: number): void;
    // endOcclusionQuery(): void;
    // executeBundles(bundles: Iterable<GPURenderBundle>): void;
    /**
     * Maps RenderPass parameters to GL parameters
     */
    setParameters(parameters = {}) {
        const glParameters = { ...this.glParameters };
        // Framebuffers are specified using parameters in WebGL
        if (this.props.framebuffer) {
            glParameters.framebuffer = this.props.framebuffer;
        }
        if (this.props.depthReadOnly) {
            glParameters.depthMask = !this.props.depthReadOnly;
        }
        glParameters.stencilMask = this.props.stencilReadOnly ? 0 : 1;
        glParameters[35977] = this.props.discard;
        // Map the four renderpass parameters to WebGL parameters
        if (parameters.viewport) {
            // WebGPU viewports are 6 coordinates (X, Y, Z)
            if (parameters.viewport.length >= 6) {
                glParameters.viewport = parameters.viewport.slice(0, 4);
                glParameters.depthRange = [parameters.viewport[4], parameters.viewport[5]];
            }
            else {
                // WebGL viewports are 4 coordinates (X, Y)
                glParameters.viewport = parameters.viewport;
            }
        }
        if (parameters.scissorRect) {
            glParameters.scissorTest = true;
            glParameters.scissor = parameters.scissorRect;
        }
        if (parameters.blendConstant) {
            glParameters.blendColor = parameters.blendConstant;
        }
        if (parameters.stencilReference) {
            // eslint-disable-next-line no-console
            console.warn('RenderPassParameters.stencilReference not yet implemented in WebGL');
            // parameters.stencilFunc = [func, ref, mask];
            // Does this work?
            parameters[2967] = parameters.stencilReference;
        }
        if (parameters.colorMask) {
            glParameters.colorMask = COLOR_CHANNELS.map(channel => Boolean(channel & parameters.colorMask));
        }
        this.glParameters = glParameters;
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_2__.setGLParameters)(this.device.gl, glParameters);
    }
    beginOcclusionQuery(queryIndex) {
        const webglQuerySet = this.props.occlusionQuerySet;
        webglQuerySet?.beginOcclusionQuery();
    }
    endOcclusionQuery() {
        const webglQuerySet = this.props.occlusionQuerySet;
        webglQuerySet?.endOcclusionQuery();
    }
    // PRIVATE
    /**
     * Optionally clears depth, color and stencil buffers based on parameters
     */
    clear() {
        const glParameters = { ...this.glParameters };
        let clearMask = 0;
        if (this.props.clearColor !== false) {
            clearMask |= GL_COLOR_BUFFER_BIT;
            glParameters.clearColor = this.props.clearColor;
        }
        if (this.props.clearDepth !== false) {
            clearMask |= GL_DEPTH_BUFFER_BIT;
            glParameters.clearDepth = this.props.clearDepth;
        }
        if (this.props.clearStencil !== false) {
            clearMask |= GL_STENCIL_BUFFER_BIT;
            glParameters.clearStencil = this.props.clearStencil;
        }
        if (clearMask !== 0) {
            // Temporarily set any clear "colors" and call clear
            (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_3__.withGLParameters)(this.device.gl, glParameters, () => {
                this.device.gl.clear(clearMask);
            });
            // TODO - clear multiple color attachments
            // for (attachment of this.framebuffer.colorAttachments) {
            //   this.clearColorBuffer
            // }
        }
    }
    /**
     * WebGL2 - clear a specific color buffer
     */
    clearColorBuffer(drawBuffer = 0, value = [0, 0, 0, 0]) {
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_3__.withGLParameters)(this.device.gl, { framebuffer: this.props.framebuffer }, () => {
            // Method selection per OpenGL ES 3 docs
            switch (value.constructor) {
                case Int32Array:
                    this.device.gl.clearBufferiv(GL_COLOR, drawBuffer, value);
                    break;
                case Uint32Array:
                    this.device.gl.clearBufferuiv(GL_COLOR, drawBuffer, value);
                    break;
                case Float32Array:
                default:
                    this.device.gl.clearBufferfv(GL_COLOR, drawBuffer, value);
                    break;
            }
        });
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pipeline.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLRenderPipeline: function() { return WEBGLRenderPipeline; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/cast.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/lib/uniforms/uniform.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/attribute-utils/get-attribute-from-layouts.js");
/* harmony import */var _helpers_get_shader_layout_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/get-shader-layout.js");
/* harmony import */var _converters_device_parameters_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js");
/* harmony import */var _helpers_set_uniform_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/set-uniform.js");
/* harmony import */var _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js");
/* harmony import */var _webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js");
/* harmony import */var _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js");
/* harmony import */var _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js");
/* harmony import */var _helpers_webgl_topology_utils_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// import {mergeShaderLayout, getAttributeInfosFromLayouts} from '@luma.gl/core';









const LOG_PROGRAM_PERF_PRIORITY = 4;
/** Creates a new render pipeline */
class WEBGLRenderPipeline extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.RenderPipeline {
    /** The WebGL device that created this render pipeline */
    device;
    /** Handle to underlying WebGL program */
    handle;
    /** vertex shader */
    vs;
    /** fragment shader */
    fs;
    /** The layout extracted from shader by WebGL introspection APIs */
    introspectedLayout;
    /** Uniforms set on this model */
    uniforms = {};
    /** Bindings set on this model */
    bindings = {};
    /** WebGL varyings */
    varyings = null;
    _uniformCount = 0;
    _uniformSetters = {}; // TODO are these used?
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.handle = this.props.handle || this.device.gl.createProgram();
        this.device.setSpectorMetadata(this.handle, { id: this.props.id });
        // Create shaders if needed
        this.vs = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.cast)(props.vs);
        this.fs = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.cast)(props.fs);
        // assert(this.vs.stage === 'vertex');
        // assert(this.fs.stage === 'fragment');
        // Setup varyings if supplied
        // @ts-expect-error WebGL only
        const { varyings, bufferMode = 35981 } = props;
        if (varyings && varyings.length > 0) {
            this.varyings = varyings;
            this.device.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);
        }
        this._linkShaders();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.time(1, `RenderPipeline ${this.id} - shaderLayout introspection`)();
        this.introspectedLayout = (0,_helpers_get_shader_layout_js__WEBPACK_IMPORTED_MODULE_3__.getShaderLayout)(this.device.gl, this.handle);
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.timeEnd(1, `RenderPipeline ${this.id} - shaderLayout introspection`)();
        // Merge provided layout with introspected layout
        this.shaderLayout = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_4__.mergeShaderLayout)(this.introspectedLayout, props.shaderLayout);
        // WebGPU has more restrictive topology support than WebGL
        switch (this.props.topology) {
            case 'triangle-fan-webgl':
            case 'line-loop-webgl':
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Primitive topology ${this.props.topology} is deprecated and will be removed in v9.1`);
                break;
            default:
        }
    }
    destroy() {
        if (this.handle) {
            this.device.gl.deleteProgram(this.handle);
            // this.handle = null;
            this.destroyed = true;
        }
    }
    /**
     * Bindings include: textures, samplers and uniform buffers
     * @todo needed for portable model
     */
    setBindings(bindings, options) {
        // if (log.priority >= 2) {
        //   checkUniformValues(uniforms, this.id, this._uniformSetters);
        // }
        for (const [name, value] of Object.entries(bindings)) {
            // Accept both `xyz` and `xyzUniforms` as valid names for `xyzUniforms` uniform block
            // This convention allows shaders to name uniform blocks as `uniform appUniforms {} app;`
            // and reference them as `app` from both GLSL and JS.
            // TODO - this is rather hacky - we could also remap the name directly in the shader layout.
            const binding = this.shaderLayout.bindings.find(binding => binding.name === name) ||
                this.shaderLayout.bindings.find(binding => binding.name === `${name}Uniforms`);
            if (!binding) {
                const validBindings = this.shaderLayout.bindings
                    .map(binding => `"${binding.name}"`)
                    .join(', ');
                if (!options?.disableWarnings) {
                    _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Unknown binding "${name}" in render pipeline "${this.id}", expected one of ${validBindings}`)();
                }
                continue; // eslint-disable-line no-continue
            }
            if (!value) {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Unsetting binding "${name}" in render pipeline "${this.id}"`)();
            }
            switch (binding.type) {
                case 'uniform':
                    // @ts-expect-error
                    if (!(value instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_5__.WEBGLBuffer) && !(value.buffer instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_5__.WEBGLBuffer)) {
                        throw new Error('buffer value');
                    }
                    break;
                case 'texture':
                    if (!(value instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__.WEBGLTextureView ||
                        value instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__.WEBGLTexture ||
                        value instanceof _webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLFramebuffer)) {
                        throw new Error('texture value');
                    }
                    break;
                case 'sampler':
                    _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Ignoring sampler ${name}`)();
                    break;
                default:
                    throw new Error(binding.type);
            }
            this.bindings[name] = value;
        }
    }
    /** @todo needed for portable model
     * @note The WebGL API is offers many ways to draw things
     * This function unifies those ways into a single call using common parameters with sane defaults
     */
    draw(options) {
        const { renderPass, parameters = this.props.parameters, topology = this.props.topology, vertexArray, vertexCount, 
        // indexCount,
        instanceCount, isInstanced = false, firstVertex = 0, 
        // firstIndex,
        // firstInstance,
        // baseVertex,
        transformFeedback } = options;
        const glDrawMode = (0,_helpers_webgl_topology_utils_js__WEBPACK_IMPORTED_MODULE_9__.getGLDrawMode)(topology);
        const isIndexed = Boolean(vertexArray.indexBuffer);
        const glIndexType = vertexArray.indexBuffer?.glIndexType;
        // Note that we sometimes get called with 0 instances
        // If we are using async linking, we need to wait until linking completes
        if (this.linkStatus !== 'success') {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `RenderPipeline:${this.id}.draw() aborted - waiting for shader linking`)();
            return false;
        }
        // Avoid WebGL draw call when not rendering any data or values are incomplete
        // Note: async textures set as uniforms might still be loading.
        // Now that all uniforms have been updated, check if any texture
        // in the uniforms is not yet initialized, then we don't draw
        if (!this._areTexturesRenderable() || vertexCount === 0) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `RenderPipeline:${this.id}.draw() aborted - textures not yet loaded`)();
            return false;
        }
        // (isInstanced && instanceCount === 0)
        if (vertexCount === 0) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `RenderPipeline:${this.id}.draw() aborted - no vertices to draw`)();
            return true;
        }
        this.device.gl.useProgram(this.handle);
        // Note: Rebinds constant attributes before each draw call
        vertexArray.bindBeforeRender(renderPass);
        if (transformFeedback) {
            transformFeedback.begin(this.props.topology);
        }
        // We have to apply bindings before every draw call since other draw calls will overwrite
        this._applyBindings();
        this._applyUniforms();
        const webglRenderPass = renderPass;
        (0,_converters_device_parameters_js__WEBPACK_IMPORTED_MODULE_10__.withDeviceAndGLParameters)(this.device, parameters, webglRenderPass.glParameters, () => {
            if (isIndexed && isInstanced) {
                this.device.gl.drawElementsInstanced(glDrawMode, vertexCount || 0, // indexCount?
                glIndexType, firstVertex, instanceCount || 0);
                // } else if (isIndexed && this.device.isWebGL2 && !isNaN(start) && !isNaN(end)) {
                //   this.device.gldrawRangeElements(glDrawMode, start, end, vertexCount, glIndexType, offset);
            }
            else if (isIndexed) {
                this.device.gl.drawElements(glDrawMode, vertexCount || 0, glIndexType, firstVertex); // indexCount?
            }
            else if (isInstanced) {
                this.device.gl.drawArraysInstanced(glDrawMode, firstVertex, vertexCount || 0, instanceCount || 0);
            }
            else {
                this.device.gl.drawArrays(glDrawMode, firstVertex, vertexCount || 0);
            }
            if (transformFeedback) {
                transformFeedback.end();
            }
        });
        vertexArray.unbindAfterRender(renderPass);
        return true;
    }
    // DEPRECATED METHODS
    setUniformsWebGL(uniforms) {
        const { bindings } = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_11__.splitUniformsAndBindings)(uniforms);
        Object.keys(bindings).forEach(name => {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`Unsupported value "${JSON.stringify(bindings[name])}" used in setUniforms() for key ${name}. Use setBindings() instead?`)();
        });
        // TODO - check against layout
        Object.assign(this.uniforms, uniforms);
    }
    // PRIVATE METHODS
    // setAttributes(attributes: Record<string, Buffer>): void {}
    // setBindings(bindings: Record<string, Binding>): void {}
    async _linkShaders() {
        const { gl } = this.device;
        gl.attachShader(this.handle, this.vs.handle);
        gl.attachShader(this.handle, this.fs.handle);
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();
        gl.linkProgram(this.handle);
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();
        // TODO Avoid checking program linking error in production
        if (_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.level === 0) {
            // return;
        }
        if (!this.device.features.has('compilation-status-async-webgl')) {
            const status = this._getLinkStatus();
            this._reportLinkStatus(status);
            return;
        }
        // async case
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.once(1, 'RenderPipeline linking is asynchronous')();
        await this._waitForLinkComplete();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `RenderPipeline ${this.id} - async linking complete: ${this.linkStatus}`)();
        const status = this._getLinkStatus();
        this._reportLinkStatus(status);
    }
    /** Report link status. First, check for shader compilation failures if linking fails */
    _reportLinkStatus(status) {
        switch (status) {
            case 'success':
                return;
            default:
                // First check for shader compilation failures if linking fails
                if (this.vs.compilationStatus === 'error') {
                    this.vs.debugShader();
                    throw new Error(`Error during compilation of shader ${this.vs.id}`);
                }
                if (this.fs?.compilationStatus === 'error') {
                    this.fs.debugShader();
                    throw new Error(`Error during compilation of shader ${this.fs.id}`);
                }
                throw new Error(`Error during ${status}: ${this.device.gl.getProgramInfoLog(this.handle)}`);
        }
    }
    /**
     * Get the shader compilation status
     * TODO - Load log even when no error reported, to catch warnings?
     * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
     */
    _getLinkStatus() {
        const { gl } = this.device;
        const linked = gl.getProgramParameter(this.handle, 35714);
        if (!linked) {
            this.linkStatus = 'error';
            return 'linking';
        }
        gl.validateProgram(this.handle);
        const validated = gl.getProgramParameter(this.handle, 35715);
        if (!validated) {
            this.linkStatus = 'error';
            return 'validation';
        }
        this.linkStatus = 'success';
        return 'success';
    }
    /** Use KHR_parallel_shader_compile extension if available */
    async _waitForLinkComplete() {
        const waitMs = async (ms) => await new Promise(resolve => setTimeout(resolve, ms));
        const DELAY_MS = 10; // Shader compilation is typically quite fast (with some exceptions)
        // If status polling is not available, we can't wait for completion. Just wait a little to minimize blocking
        if (!this.device.features.has('compilation-status-async-webgl')) {
            await waitMs(DELAY_MS);
            return;
        }
        const { gl } = this.device;
        for (;;) {
            const complete = gl.getProgramParameter(this.handle, 37297);
            if (complete) {
                return;
            }
            await waitMs(DELAY_MS);
        }
    }
    /**
     * Checks if all texture-values uniforms are renderable (i.e. loaded)
     * Update a texture if needed (e.g. from video)
     * Note: This is currently done before every draw call
     */
    _areTexturesRenderable() {
        let texturesRenderable = true;
        for (const [, texture] of Object.entries(this.bindings)) {
            if (texture instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__.WEBGLTexture) {
                texture.update();
                texturesRenderable = texturesRenderable && texture.loaded;
            }
        }
        return texturesRenderable;
    }
    /** Apply any bindings (before each draw call) */
    _applyBindings() {
        // If we are using async linking, we need to wait until linking completes
        if (this.linkStatus !== 'success') {
            return;
        }
        const { gl } = this.device;
        gl.useProgram(this.handle);
        let textureUnit = 0;
        let uniformBufferIndex = 0;
        for (const binding of this.shaderLayout.bindings) {
            // Accept both `xyz` and `xyzUniforms` as valid names for `xyzUniforms` uniform block
            const value = this.bindings[binding.name] || this.bindings[binding.name.replace(/Uniforms$/, '')];
            if (!value) {
                throw new Error(`No value for binding ${binding.name} in ${this.id}`);
            }
            switch (binding.type) {
                case 'uniform':
                    // Set buffer
                    const { name } = binding;
                    const location = gl.getUniformBlockIndex(this.handle, name);
                    if (location === 4294967295) {
                        throw new Error(`Invalid uniform block name ${name}`);
                    }
                    gl.uniformBlockBinding(this.handle, uniformBufferIndex, location);
                    // console.debug(binding, location);
                    if (value instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_5__.WEBGLBuffer) {
                        gl.bindBufferBase(35345, uniformBufferIndex, value.handle);
                    }
                    else {
                        gl.bindBufferRange(35345, uniformBufferIndex, 
                        // @ts-expect-error
                        value.buffer.handle, 
                        // @ts-expect-error
                        value.offset || 0, 
                        // @ts-expect-error
                        value.size || value.buffer.byteLength - value.offset);
                    }
                    uniformBufferIndex += 1;
                    break;
                case 'texture':
                    if (!(value instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__.WEBGLTextureView ||
                        value instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__.WEBGLTexture ||
                        value instanceof _webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLFramebuffer)) {
                        throw new Error('texture');
                    }
                    let texture;
                    if (value instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__.WEBGLTextureView) {
                        texture = value.texture;
                    }
                    else if (value instanceof _webgl_texture_js__WEBPACK_IMPORTED_MODULE_7__.WEBGLTexture) {
                        texture = value;
                    }
                    else if (value instanceof _webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLFramebuffer &&
                        value.colorAttachments[0] instanceof _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_6__.WEBGLTextureView) {
                        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn('Passing framebuffer in texture binding may be deprecated. Use fbo.colorAttachments[0] instead')();
                        texture = value.colorAttachments[0].texture;
                    }
                    else {
                        throw new Error('No texture');
                    }
                    gl.activeTexture(33984 + textureUnit);
                    gl.bindTexture(texture.target, texture.handle);
                    // gl.bindSampler(textureUnit, sampler.handle);
                    textureUnit += 1;
                    break;
                case 'sampler':
                    // ignore
                    break;
                case 'storage':
                case 'read-only-storage':
                    throw new Error(`binding type '${binding.type}' not supported in WebGL`);
            }
        }
    }
    /**
     * Due to program sharing, uniforms need to be reset before every draw call
     * (though caching will avoid redundant WebGL calls)
     */
    _applyUniforms() {
        for (const uniformLayout of this.shaderLayout.uniforms || []) {
            const { name, location, type, textureUnit } = uniformLayout;
            const value = this.uniforms[name] ?? textureUnit;
            if (value !== undefined) {
                (0,_helpers_set_uniform_js__WEBPACK_IMPORTED_MODULE_12__.setUniform)(this.device.gl, location, type, value);
            }
        }
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLSampler: function() { return WEBGLSampler; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/sampler.js");
/* harmony import */var _converters_sampler_parameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * Sampler object -
 * so that they can be set directly on the texture
 * https://github.com/WebGLSamples/WebGL2Samples/blob/master/samples/sampler_object.html
 */
class WEBGLSampler extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Sampler {
    device;
    handle;
    parameters;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.parameters = (0,_converters_sampler_parameters_js__WEBPACK_IMPORTED_MODULE_1__.convertSamplerParametersToWebGL)(props);
        this.handle = this.handle || this.device.gl.createSampler();
        this._setSamplerParameters(this.parameters);
    }
    destroy() {
        if (this.handle) {
            this.device.gl.deleteSampler(this.handle);
            // @ts-expect-error read-only/undefined
            this.handle = undefined;
        }
    }
    toString() {
        return `Sampler(${this.id},${JSON.stringify(this.props)})`;
    }
    /** Set sampler parameters on the sampler */
    _setSamplerParameters(parameters) {
        for (const [pname, value] of Object.entries(parameters)) {
            // Apparently there are integer/float conversion issues requires two parameter setting functions in JavaScript.
            // For now, pick the float version for parameters specified as GLfloat.
            const param = Number(pname);
            switch (param) {
                case 33082:
                case 33083:
                    this.device.gl.samplerParameterf(this.handle, param, value);
                    break;
                default:
                    this.device.gl.samplerParameteri(this.handle, param, value);
                    break;
            }
        }
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-shader.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLShader: function() { return WEBGLShader; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/shader.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _helpers_parse_shader_compiler_log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/parse-shader-compiler-log.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



/**
 * An immutable compiled shader program that execute portions of the GPU Pipeline
 */
class WEBGLShader extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Shader {
    device;
    handle;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        switch (this.props.stage) {
            case 'vertex':
                this.handle = this.props.handle || this.device.gl.createShader(35633);
                break;
            case 'fragment':
                this.handle = this.props.handle || this.device.gl.createShader(35632);
                break;
            default:
                throw new Error(this.props.stage);
        }
        this._compile(this.source);
    }
    destroy() {
        if (this.handle) {
            this.removeStats();
            this.device.gl.deleteShader(this.handle);
            // this.handle = null;
            this.destroyed = true;
        }
    }
    async getCompilationInfo() {
        await this._waitForCompilationComplete();
        return this.getCompilationInfoSync();
    }
    getCompilationInfoSync() {
        const log = this.device.gl.getShaderInfoLog(this.handle);
        return (0,_helpers_parse_shader_compiler_log_js__WEBPACK_IMPORTED_MODULE_1__.parseShaderCompilerLog)(log);
    }
    getTranslatedSource() {
        const extensions = this.device.getExtension('WEBGL_debug_shaders');
        const ext = extensions.WEBGL_debug_shaders;
        return ext?.getTranslatedShaderSource(this.handle);
    }
    // PRIVATE METHODS
    /** Compile a shader and get compilation status */
    async _compile(source) {
        const addGLSLVersion = (source) => source.startsWith('#version ') ? source : `#version 100\n${source}`;
        source = addGLSLVersion(source);
        const { gl } = this.device;
        gl.shaderSource(this.handle, source);
        gl.compileShader(this.handle);
        // For performance reasons, avoid checking shader compilation errors on production
        if (_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.level === 0) {
            this.compilationStatus = 'pending';
            return;
        }
        // Sync case - slower, but advantage is that it throws in the constructor, making break on error more useful
        if (!this.device.features.has('compilation-status-async-webgl')) {
            this._getCompilationStatus();
            // The `Shader` base class will determine if debug window should be opened based on this.compilationStatus
            this.debugShader();
            if (this.compilationStatus === 'error') {
                throw new Error(`GLSL compilation errors in ${this.props.stage} shader ${this.props.id}`);
            }
            return;
        }
        // async case
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.once(1, 'Shader compilation is asynchronous')();
        await this._waitForCompilationComplete();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.info(2, `Shader ${this.id} - async compilation complete: ${this.compilationStatus}`)();
        this._getCompilationStatus();
        // The `Shader` base class will determine if debug window should be opened based on this.compilationStatus
        this.debugShader();
    }
    /** Use KHR_parallel_shader_compile extension if available */
    async _waitForCompilationComplete() {
        const waitMs = async (ms) => await new Promise(resolve => setTimeout(resolve, ms));
        const DELAY_MS = 10; // Shader compilation is typically quite fast (with some exceptions)
        // If status polling is not available, we can't wait for completion. Just wait a little to minimize blocking
        if (!this.device.features.has('compilation-status-async-webgl')) {
            await waitMs(DELAY_MS);
            return;
        }
        const { gl } = this.device;
        for (;;) {
            const complete = gl.getShaderParameter(this.handle, 37297);
            if (complete) {
                return;
            }
            await waitMs(DELAY_MS);
        }
    }
    /**
     * Get the shader compilation status
     * TODO - Load log even when no error reported, to catch warnings?
     * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
     */
    _getCompilationStatus() {
        this.compilationStatus = this.device.gl.getShaderParameter(this.handle, 35713)
            ? 'success'
            : 'error';
    }
}
// TODO - Original code from luma.gl v8 - keep until new debug functionality has matured
// if (!compilationSuccess) {
//   const parsedLog = shaderLog ? parseShaderCompilerLog(shaderLog) : [];
//   const messages = parsedLog.filter(message => message.type === 'error');
//   const formattedLog = formatCompilerLog(messages, source, {showSourceCode: 'all', html: true});
//   const shaderDescription = `${this.stage} shader ${shaderName}`;
//   log.error(`GLSL compilation errors in ${shaderDescription}\n${formattedLog}`)();
//   displayShaderLog(parsedLog, source, shaderName);
// }


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLTextureView: function() { return WEBGLTextureView; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// import {decodeTextureFormat} from '@luma.gl/core';

class WEBGLTextureView extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.TextureView {
    device;
    gl;
    handle;
    texture;
    constructor(device, props) {
        super(device, { ..._luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.Texture.defaultProps, ...props });
        this.device = device;
        this.gl = this.device.gl;
        this.handle = null;
        this.texture = props.texture;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DEFAULT_WEBGL_TEXTURE_PROPS: function() { return DEFAULT_WEBGL_TEXTURE_PROPS; },
  WEBGLTexture: function() { return WEBGLTexture; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/load-file.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */var _context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js");
/* harmony import */var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
/* harmony import */var _converters_sampler_parameters_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js");
/* harmony import */var _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js");
/* harmony import */var _webgl_sampler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js");
/* harmony import */var _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors








const DEFAULT_WEBGL_TEXTURE_PROPS = {
    // deprecated
    parameters: {},
    pixelStore: {},
    pixels: null,
    border: 0,
    dataFormat: undefined,
    textureUnit: undefined,
    target: undefined
};
// Polyfill
class WEBGLTexture extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Texture {
    // TODO - remove?
    static FACES = [
        34069,
        34070,
        34071,
        34072,
        34073,
        34074
    ];
    MAX_ATTRIBUTES;
    device;
    gl;
    handle;
    // (TODO - currently unused in WebGL, but WebGL 2 does support sampler objects) */
    sampler = undefined;
    view = undefined;
    // data;
    glFormat = undefined;
    type = undefined;
    dataFormat = undefined;
    mipmaps = undefined;
    /**
     * @note `target` cannot be modified by bind:
     * textures are special because when you first bind them to a target,
     * they get special information. When you first bind a texture as a
     * GL_TEXTURE_2D, you are saying that this texture is a 2D texture.
     * And it will always be a 2D texture; this state cannot be changed ever.
     * A texture that was first bound as a GL_TEXTURE_2D, must always be bound as a GL_TEXTURE_2D;
     * attempting to bind it as GL_TEXTURE_3D will give rise to a run-time error
     * */
    target;
    textureUnit = undefined;
    /**
     * Program.draw() checks the loaded flag of all textures to avoid
     * Textures that are still loading from promises
     * Set to true as soon as texture has been initialized with valid data
     */
    loaded = false;
    _video;
    constructor(device, props) {
        super(device, { ...DEFAULT_WEBGL_TEXTURE_PROPS, format: 'rgba8unorm', ...props });
        this.device = device;
        this.gl = this.device.gl;
        this.handle = this.props.handle || this.gl.createTexture();
        this.device.setSpectorMetadata(this.handle, { ...this.props, data: typeof this.props.data }); // {name: this.props.id};
        this.glFormat = 6408;
        this.target = getWebGLTextureTarget(this.props);
        // Program.draw() checks the loaded flag of all textures
        this.loaded = false;
        // Signature: new Texture2D(gl, {data: url})
        if (typeof this.props?.data === 'string') {
            Object.assign(this.props, { data: (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.loadImage)(this.props.data) });
        }
        this.initialize(this.props);
        Object.seal(this);
    }
    destroy() {
        if (this.handle) {
            this.gl.deleteTexture(this.handle);
            this.removeStats();
            this.trackDeallocatedMemory('Texture');
            // this.handle = null;
            this.destroyed = true;
        }
    }
    toString() {
        return `Texture(${this.id},${this.width}x${this.height})`;
    }
    createView(props) {
        return new _webgl_texture_view_js__WEBPACK_IMPORTED_MODULE_2__.WEBGLTextureView(this.device, { ...props, texture: this });
    }
    // eslint-disable-next-line max-statements
    initialize(props = {}) {
        // Cube textures
        if (this.props.dimension === 'cube') {
            return this.initializeCube(props);
        }
        let data = props.data;
        if (data instanceof Promise) {
            data.then(resolvedImageData => this.initialize(Object.assign({}, props, {
                pixels: resolvedImageData,
                data: resolvedImageData
            })));
            return this;
        }
        const isVideo = typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement;
        // @ts-expect-error
        if (isVideo && data.readyState < HTMLVideoElement.HAVE_METADATA) {
            this._video = null; // Declare member before the object is sealed
            // @ts-expect-error
            data.addEventListener('loadeddata', () => this.initialize(props));
            return this;
        }
        const { parameters = {} } = props;
        const { pixels = null, pixelStore = {}, textureUnit = undefined, mipmaps = true } = props;
        // pixels variable is for API compatibility purpose
        if (!data) {
            // TODO - This looks backwards? Commenting out for now until we decide
            // which prop to use
            // log.deprecated('data', 'pixels')();
            data = pixels;
        }
        let { width, height, dataFormat, type, compressed = false } = props;
        const { depth = 0 } = props;
        const glFormat = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.convertTextureFormatToGL)(props.format);
        // Deduce width and height
        ({ width, height, compressed, dataFormat, type } = this._deduceParameters({
            format: props.format,
            type,
            dataFormat,
            compressed,
            data,
            width,
            height
        }));
        // Store opts for accessors
        this.width = width;
        this.height = height;
        // this.depth = depth;
        this.glFormat = glFormat;
        this.type = type;
        this.dataFormat = dataFormat;
        this.textureUnit = textureUnit;
        if (Number.isFinite(this.textureUnit)) {
            this.gl.activeTexture(33984 + this.textureUnit);
            this.gl.bindTexture(this.target, this.handle);
        }
        this.mipmaps = mipmaps;
        this.setImageData({
            data,
            width,
            height,
            depth,
            format: glFormat,
            type,
            dataFormat,
            // @ts-expect-error
            parameters: pixelStore,
            compressed
        });
        // Set texture sampler parameters
        this.setSampler(props.sampler);
        this._setSamplerParameters(parameters);
        this.view = this.createView({ ...this.props, mipLevelCount: 1, arrayLayerCount: 1 });
        if (mipmaps && this.device.isTextureFormatFilterable(props.format)) {
            this.generateMipmap();
        }
        if (isVideo) {
            this._video = {
                video: data,
                parameters,
                // @ts-expect-error
                lastTime: data.readyState >= HTMLVideoElement.HAVE_CURRENT_DATA ? data.currentTime : -1
            };
        }
        return this;
    }
    initializeCube(props) {
        const { mipmaps = true, parameters = {} } = props;
        // Store props for accessors
        // this.props = props;
        // @ts-expect-error
        this.setCubeMapImageData(props).then(() => {
            this.loaded = true;
            // TODO - should genMipmap() be called on the cubemap or on the faces?
            // TODO - without generateMipmap() cube textures do not work at all!!! Why?
            if (mipmaps) {
                this.generateMipmap(props);
            }
            this.setSampler(props.sampler);
            this._setSamplerParameters(parameters);
        });
        return this;
    }
    setSampler(sampler = {}) {
        let samplerProps;
        if (sampler instanceof _webgl_sampler_js__WEBPACK_IMPORTED_MODULE_4__.WEBGLSampler) {
            this.sampler = sampler;
            samplerProps = sampler.props;
        }
        else {
            this.sampler = new _webgl_sampler_js__WEBPACK_IMPORTED_MODULE_4__.WEBGLSampler(this.device, sampler);
            samplerProps = sampler;
        }
        const parameters = (0,_converters_sampler_parameters_js__WEBPACK_IMPORTED_MODULE_5__.convertSamplerParametersToWebGL)(samplerProps);
        this._setSamplerParameters(parameters);
        return this;
    }
    /**
     * If size has changed, reinitializes with current format
     * @note note clears image and mipmaps
     */
    resize(options) {
        const { height, width, mipmaps = false } = options;
        if (width !== this.width || height !== this.height) {
            return this.initialize({
                width,
                height,
                format: this.format,
                type: this.type,
                dataFormat: this.dataFormat,
                mipmaps
            });
        }
        return this;
    }
    /** Update external texture (video frame) */
    update() {
        if (this._video) {
            const { video, parameters, lastTime } = this._video;
            // @ts-expect-error
            if (lastTime === video.currentTime || video.readyState < HTMLVideoElement.HAVE_CURRENT_DATA) {
                return;
            }
            this.setSubImageData({
                data: video,
                parameters
            });
            if (this.mipmaps) {
                this.generateMipmap();
            }
            this._video.lastTime = video.currentTime;
        }
    }
    // Call to regenerate mipmaps after modifying texture(s)
    generateMipmap(params = {}) {
        this.mipmaps = true;
        this.gl.bindTexture(this.target, this.handle);
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__.withGLParameters)(this.gl, params, () => {
            this.gl.generateMipmap(this.target);
        });
        this.gl.bindTexture(this.target, null);
        return this;
    }
    /*
     * Allocates storage
     * @param {*} pixels -
     *  null - create empty texture of specified format
     *  Typed array - init from image data in typed array
     *  Buffer|WebGLBuffer - (WEBGL2) init from image data in WebGLBuffer
     *  HTMLImageElement|Image - Inits with content of image. Auto width/height
     *  HTMLCanvasElement - Inits with contents of canvas. Auto width/height
     *  HTMLVideoElement - Creates video texture. Auto width/height
     *
     * @param  width -
     * @param  height -
     * @param  mipMapLevel -
     * @param {GLenum} format - format of image data.
     * @param {GLenum} type
     *  - format of array (autodetect from type) or
     *  - (WEBGL2) format of buffer
     * @param {Number} offset - (WEBGL2) offset from start of buffer
     * @parameters - temporary settings to be applied, can be used to supply pixel store settings.
     */
    // eslint-disable-next-line max-statements, complexity
    setImageData(options) {
        if (this.props.dimension === '3d' || this.props.dimension === '2d-array') {
            return this.setImageData3D(options);
        }
        this.trackDeallocatedMemory('Texture');
        const { target = this.target, pixels = null, level = 0, glFormat = this.glFormat, offset = 0, parameters = {} } = options;
        let { data = null, type = this.type, width = this.width, height = this.height, dataFormat = this.dataFormat, compressed = false } = options;
        // pixels variable is  for API compatibility purpose
        if (!data) {
            data = pixels;
        }
        ({ type, dataFormat, compressed, width, height } = this._deduceParameters({
            format: this.props.format,
            type,
            dataFormat,
            compressed,
            data,
            width,
            height
        }));
        const { gl } = this;
        gl.bindTexture(this.target, this.handle);
        let dataType = null;
        ({ data, dataType } = this._getDataType({ data, compressed }));
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__.withGLParameters)(this.gl, parameters, () => {
            switch (dataType) {
                case 'null':
                    gl.texImage2D(target, level, glFormat, width, height, 0 /* border*/, dataFormat, type, data);
                    break;
                case 'typed-array':
                    gl.texImage2D(target, level, glFormat, width, height, 0, // border (must be 0)
                    dataFormat, type, data, offset);
                    break;
                case 'buffer':
                    // WebGL2 enables creating textures directly from a WebGL buffer
                    this.device.gl.bindBuffer(35052, data.handle || data);
                    this.device.gl.texImage2D(target, level, glFormat, width, height, 0 /* border*/, dataFormat, type, offset);
                    this.device.gl.bindBuffer(35052, null);
                    break;
                case 'browser-object':
                    gl.texImage2D(target, level, glFormat, width, height, 0 /* border*/, dataFormat, type, data);
                    break;
                case 'compressed':
                    for (const [levelIndex, levelData] of data.entries()) {
                        gl.compressedTexImage2D(target, levelIndex, levelData.format, levelData.width, levelData.height, 0 /* border, must be 0 */, levelData.data);
                    }
                    break;
                default:
                    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(false, 'Unknown image data type');
            }
        });
        if (data && data.byteLength) {
            this.trackAllocatedMemory(data.byteLength, 'Texture');
        }
        else {
            const bytesPerPixel = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.getTextureFormatBytesPerPixel)(this.props.format);
            this.trackAllocatedMemory(this.width * this.height * bytesPerPixel, 'Texture');
        }
        this.loaded = true;
        return this;
    }
    /**
     * Redefines an area of an existing texture
     * Note: does not allocate storage
     * Redefines an area of an existing texture
     */
    setSubImageData({ target = this.target, pixels = null, data = null, x = 0, y = 0, width = this.width, height = this.height, level = 0, glFormat = this.glFormat, type = this.type, dataFormat = this.dataFormat, compressed = false, offset = 0, parameters = {} }) {
        ({ type, dataFormat, compressed, width, height } = this._deduceParameters({
            format: this.props.format,
            type,
            dataFormat,
            compressed,
            data,
            width,
            height
        }));
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(this.depth === 1, 'texSubImage not supported for 3D textures');
        // pixels variable is  for API compatibility purpose
        if (!data) {
            data = pixels;
        }
        // Support ndarrays
        if (data && data.data) {
            const ndarray = data;
            data = ndarray.data;
            width = ndarray.shape[0];
            height = ndarray.shape[1];
        }
        // Support buffers
        if (data instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLBuffer) {
            data = data.handle;
        }
        this.gl.bindTexture(this.target, this.handle);
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__.withGLParameters)(this.gl, parameters, () => {
            // TODO - x,y parameters
            if (compressed) {
                this.gl.compressedTexSubImage2D(target, level, x, y, width, height, glFormat, data);
            }
            else if (data === null) {
                this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, null);
            }
            else if (ArrayBuffer.isView(data)) {
                this.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data, offset);
            }
            else if (typeof WebGLBuffer !== 'undefined' && data instanceof WebGLBuffer) {
                // WebGL2 allows us to create texture directly from a WebGL buffer
                // This texImage2D signature uses currently bound GL.PIXEL_UNPACK_BUFFER
                this.device.gl.bindBuffer(35052, data);
                this.device.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, offset);
                this.device.gl.bindBuffer(35052, null);
            }
            else {
                // Assume data is a browser supported object (ImageData, Canvas, ...)
                this.device.gl.texSubImage2D(target, level, x, y, width, height, dataFormat, type, data);
            }
        });
        this.gl.bindTexture(this.target, null);
    }
    /**
     * Defines a two-dimensional texture image or cube-map texture image with
     * pixels from the current framebuffer (rather than from client memory).
     * (gl.copyTexImage2D wrapper)
     *
     * Note that binding a texture into a Framebuffer's color buffer and
     * rendering can be faster.
     */
    copyFramebuffer(opts = {}) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__.log.error('Texture.copyFramebuffer({...}) is no logner supported, use copyToTexture(source, target, opts})')();
        return null;
    }
    getActiveUnit() {
        return this.gl.getParameter(34016) - 33984;
    }
    bind(textureUnit = this.textureUnit) {
        const { gl } = this;
        if (textureUnit !== undefined) {
            this.textureUnit = textureUnit;
            gl.activeTexture(33984 + textureUnit);
        }
        gl.bindTexture(this.target, this.handle);
        return textureUnit;
    }
    unbind(textureUnit = this.textureUnit) {
        const { gl } = this;
        if (textureUnit !== undefined) {
            this.textureUnit = textureUnit;
            gl.activeTexture(33984 + textureUnit);
        }
        gl.bindTexture(this.target, null);
        return textureUnit;
    }
    // PRIVATE METHODS
    _getDataType({ data, compressed = false }) {
        if (compressed) {
            return { data, dataType: 'compressed' };
        }
        if (data === null) {
            return { data, dataType: 'null' };
        }
        if (ArrayBuffer.isView(data)) {
            return { data, dataType: 'typed-array' };
        }
        if (data instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLBuffer) {
            return { data: data.handle, dataType: 'buffer' };
        }
        // Raw WebGL handle (not a luma wrapper)
        if (typeof WebGLBuffer !== 'undefined' && data instanceof WebGLBuffer) {
            return { data, dataType: 'buffer' };
        }
        // Assume data is a browser supported object (ImageData, Canvas, ...)
        return { data, dataType: 'browser-object' };
    }
    // HELPER METHODS
    _deduceParameters(opts) {
        const { format, data } = opts;
        let { width, height, dataFormat, type, compressed } = opts;
        // Deduce format and type from format
        const parameters = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.getWebGLTextureParameters)(format);
        dataFormat = dataFormat || parameters.dataFormat;
        type = type || parameters.type;
        compressed = compressed || parameters.compressed;
        ({ width, height } = this._deduceImageSize(data, width, height));
        return { dataFormat, type, compressed, width, height, format, data };
    }
    // eslint-disable-next-line complexity
    _deduceImageSize(data, width, height) {
        let size;
        if (typeof ImageData !== 'undefined' && data instanceof ImageData) {
            size = { width: data.width, height: data.height };
        }
        else if (typeof HTMLImageElement !== 'undefined' && data instanceof HTMLImageElement) {
            size = { width: data.naturalWidth, height: data.naturalHeight };
        }
        else if (typeof HTMLCanvasElement !== 'undefined' && data instanceof HTMLCanvasElement) {
            size = { width: data.width, height: data.height };
        }
        else if (typeof ImageBitmap !== 'undefined' && data instanceof ImageBitmap) {
            size = { width: data.width, height: data.height };
        }
        else if (typeof HTMLVideoElement !== 'undefined' && data instanceof HTMLVideoElement) {
            size = { width: data.videoWidth, height: data.videoHeight };
        }
        else if (!data) {
            size = { width: width >= 0 ? width : 1, height: height >= 0 ? height : 1 };
        }
        else {
            size = { width, height };
        }
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(size, 'Could not deduced texture size');
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(width === undefined || size.width === width, 'Deduced texture width does not match supplied width');
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_7__.assert)(height === undefined || size.height === height, 'Deduced texture height does not match supplied height');
        return size;
    }
    // CUBE MAP METHODS
    /* eslint-disable max-statements, max-len */
    async setCubeMapImageData(options) {
        const { gl } = this;
        const { width, height, pixels, data, format = 6408, type = 5121 } = options;
        const imageDataMap = pixels || data;
        // pixel data (imageDataMap) is an Object from Face to Image or Promise.
        // For example:
        // {
        // GL.TEXTURE_CUBE_MAP_POSITIVE_X : Image-or-Promise,
        // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : Image-or-Promise,
        // ... }
        // To provide multiple level-of-details (LODs) this can be Face to Array
        // of Image or Promise, like this
        // {
        // GL.TEXTURE_CUBE_MAP_POSITIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],
        // GL.TEXTURE_CUBE_MAP_NEGATIVE_X : [Image-or-Promise-LOD-0, Image-or-Promise-LOD-1],
        // ... }
        const resolvedFaces = await Promise.all(WEBGLTexture.FACES.map(face => {
            const facePixels = imageDataMap[face];
            return Promise.all(Array.isArray(facePixels) ? facePixels : [facePixels]);
        }));
        this.bind();
        WEBGLTexture.FACES.forEach((face, index) => {
            if (resolvedFaces[index].length > 1 && this.props.mipmaps !== false) {
                // If the user provides multiple LODs, then automatic mipmap
                // generation generateMipmap() should be disabled to avoid overwritting them.
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__.log.warn(`${this.id} has mipmap and multiple LODs.`)();
            }
            resolvedFaces[index].forEach((image, lodLevel) => {
                // TODO: adjust width & height for LOD!
                if (width && height) {
                    gl.texImage2D(face, lodLevel, format, width, height, 0 /* border*/, format, type, image);
                }
                else {
                    gl.texImage2D(face, lodLevel, format, format, type, image);
                }
            });
        });
        this.unbind();
    }
    /** @todo update this method to accept LODs */
    setImageDataForFace(options) {
        const { face, width, height, pixels, data, format = 6408, type = 5121
        // generateMipmap = false // TODO
         } = options;
        const { gl } = this;
        const imageData = pixels || data;
        this.bind();
        if (imageData instanceof Promise) {
            imageData.then(resolvedImageData => this.setImageDataForFace(Object.assign({}, options, {
                face,
                data: resolvedImageData,
                pixels: resolvedImageData
            })));
        }
        else if (this.width || this.height) {
            gl.texImage2D(face, 0, format, width, height, 0 /* border*/, format, type, imageData);
        }
        else {
            gl.texImage2D(face, 0, format, format, type, imageData);
        }
        return this;
    }
    /** Image 3D copies from Typed Array or WebGLBuffer */
    setImageData3D(options) {
        const { level = 0, dataFormat, format, type, // = GL.UNSIGNED_BYTE,
        width, height, depth = 1, offset = 0, data, parameters = {} } = options;
        this.trackDeallocatedMemory('Texture');
        this.gl.bindTexture(this.target, this.handle);
        const webglTextureFormat = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.getWebGLTextureParameters)(format);
        (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_6__.withGLParameters)(this.gl, parameters, () => {
            if (ArrayBuffer.isView(data)) {
                this.gl.texImage3D(this.target, level, webglTextureFormat.format, width, height, depth, 0 /* border, must be 0 */, webglTextureFormat.dataFormat, webglTextureFormat.type, // dataType: getWebGL,
                data);
            }
            if (data instanceof _webgl_buffer_js__WEBPACK_IMPORTED_MODULE_8__.WEBGLBuffer) {
                this.gl.bindBuffer(35052, data.handle);
                this.gl.texImage3D(this.target, level, dataFormat, width, height, depth, 0 /* border, must be 0 */, format, type, offset);
            }
        });
        if (data && data.byteLength) {
            this.trackAllocatedMemory(data.byteLength, 'Texture');
        }
        else {
            const bytesPerPixel = (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_3__.getTextureFormatBytesPerPixel)(this.props.format);
            this.trackAllocatedMemory(this.width * this.height * this.depth * bytesPerPixel, 'Texture');
        }
        this.loaded = true;
        return this;
    }
    // RESOURCE METHODS
    /**
     * Sets sampler parameters on texture
     */
    _setSamplerParameters(parameters) {
        // NPOT parameters may populate an empty object
        if ((0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_10__.isObjectEmpty)(parameters)) {
            return;
        }
        logParameters(parameters);
        this.gl.bindTexture(this.target, this.handle);
        for (const [pname, pvalue] of Object.entries(parameters)) {
            const param = Number(pname);
            const value = pvalue;
            // Apparently there are integer/float conversion issues requires two parameter setting functions in JavaScript.
            // For now, pick the float version for parameters specified as GLfloat.
            switch (param) {
                case 33082:
                case 33083:
                    this.gl.texParameterf(this.target, param, value);
                    break;
                default:
                    this.gl.texParameteri(this.target, param, value);
                    break;
            }
        }
        this.gl.bindTexture(this.target, null);
        return;
    }
}
// HELPERS
function getWebGLTextureTarget(props) {
    switch (props.dimension) {
        // supported in WebGL
        case '2d':
            return 3553;
        case 'cube':
            return 34067;
        // supported in WebGL2
        case '2d-array':
            return 35866;
        case '3d':
            return 32879;
        // not supported in any WebGL version
        case '1d':
        case 'cube-array':
        default:
            throw new Error(props.dimension);
    }
}
function logParameters(parameters) {
    _luma_gl_core__WEBPACK_IMPORTED_MODULE_9__.log.log(1, 'texture sampler parameters', parameters)();
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-transform-feedback.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLTransformFeedback: function() { return WEBGLTransformFeedback; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/transform-feedback.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js");
/* harmony import */var _helpers_webgl_topology_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js");




class WEBGLTransformFeedback extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.TransformFeedback {
    device;
    gl;
    handle;
    /**
     * NOTE: The Model already has this information while drawing, but
     * TransformFeedback currently needs it internally, to look up
     * varying information outside of a draw() call.
     */
    layout;
    buffers = {};
    unusedBuffers = {};
    /**
     * Allows us to avoid a Chrome bug where a buffer that is already bound to a
     * different target cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
     * This a major workaround, see: https://github.com/KhronosGroup/WebGL/issues/2346
     */
    bindOnUse = true;
    _bound = false;
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.gl = device.gl;
        this.handle = this.props.handle || this.gl.createTransformFeedback();
        this.layout = this.props.layout;
        if (props.buffers) {
            this.setBuffers(props.buffers);
        }
        Object.seal(this);
    }
    destroy() {
        this.gl.deleteTransformFeedback(this.handle);
        super.destroy();
    }
    begin(topology = 'point-list') {
        this.gl.bindTransformFeedback(36386, this.handle);
        if (this.bindOnUse) {
            this._bindBuffers();
        }
        this.gl.beginTransformFeedback((0,_helpers_webgl_topology_utils_js__WEBPACK_IMPORTED_MODULE_1__.getGLPrimitive)(topology));
    }
    end() {
        this.gl.endTransformFeedback();
        if (this.bindOnUse) {
            this._unbindBuffers();
        }
        this.gl.bindTransformFeedback(36386, null);
    }
    // SUBCLASS
    setBuffers(buffers) {
        this.buffers = {};
        this.unusedBuffers = {};
        this.bind(() => {
            for (const bufferName in buffers) {
                this.setBuffer(bufferName, buffers[bufferName]);
            }
        });
    }
    setBuffer(locationOrName, bufferOrRange) {
        const location = this._getVaryingIndex(locationOrName);
        const { buffer, byteLength, byteOffset } = this._getBufferRange(bufferOrRange);
        if (location < 0) {
            this.unusedBuffers[locationOrName] = buffer;
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(`${this.id} unusedBuffers varying buffer ${locationOrName}`)();
            return;
        }
        this.buffers[location] = { buffer, byteLength, byteOffset };
        // Need to avoid chrome bug where buffer that is already bound to a different target
        // cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
        if (!this.bindOnUse) {
            this._bindBuffer(location, buffer, byteOffset, byteLength);
        }
    }
    getBuffer(locationOrName) {
        if (isIndex(locationOrName)) {
            return this.buffers[locationOrName] || null;
        }
        const location = this._getVaryingIndex(locationOrName);
        return location >= 0 ? this.buffers[location] : null;
    }
    bind(funcOrHandle = this.handle) {
        if (typeof funcOrHandle !== 'function') {
            this.gl.bindTransformFeedback(36386, funcOrHandle);
            return this;
        }
        let value;
        if (!this._bound) {
            this.gl.bindTransformFeedback(36386, this.handle);
            this._bound = true;
            value = funcOrHandle();
            this._bound = false;
            this.gl.bindTransformFeedback(36386, null);
        }
        else {
            value = funcOrHandle();
        }
        return value;
    }
    unbind() {
        this.bind(null);
    }
    // PRIVATE METHODS
    /** Extract offsets for bindBufferRange */
    _getBufferRange(bufferOrRange) {
        if (bufferOrRange instanceof _index_js__WEBPACK_IMPORTED_MODULE_3__.WEBGLBuffer) {
            return { buffer: bufferOrRange, byteOffset: 0, byteLength: bufferOrRange.byteLength };
        }
        // To use bindBufferRange either offset or size must be specified.
        // @ts-expect-error Must be a BufferRange.
        const { buffer, byteOffset = 0, byteLength = bufferOrRange.buffer.byteLength } = bufferOrRange;
        return { buffer, byteOffset, byteLength };
    }
    _getVaryingIndex(locationOrName) {
        if (isIndex(locationOrName)) {
            return Number(locationOrName);
        }
        for (const varying of this.layout.varyings) {
            if (locationOrName === varying.name) {
                return varying.location;
            }
        }
        return -1;
    }
    /**
     * Need to avoid chrome bug where buffer that is already bound to a different target
     * cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
     */
    _bindBuffers() {
        for (const bufferIndex in this.buffers) {
            const { buffer, byteLength, byteOffset } = this._getBufferRange(this.buffers[bufferIndex]);
            this._bindBuffer(Number(bufferIndex), buffer, byteOffset, byteLength);
        }
    }
    _unbindBuffers() {
        for (const bufferIndex in this.buffers) {
            this.gl.bindBufferBase(35982, Number(bufferIndex), null);
        }
    }
    _bindBuffer(index, buffer, byteOffset = 0, byteLength) {
        const handle = buffer && buffer.handle;
        if (!handle || byteLength === undefined) {
            this.gl.bindBufferBase(35982, index, handle);
        }
        else {
            this.gl.bindBufferRange(35982, index, handle, byteOffset, byteLength);
        }
    }
}
/**
 * Returns true if the given value is an integer, or a string that
 * trivially converts to an integer (only numeric characters).
 */
function isIndex(value) {
    if (typeof value === 'number') {
        return Number.isInteger(value);
    }
    return /^\d+$/.test(value);
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-vertex-array.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WEBGLVertexArray: function() { return WEBGLVertexArray; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/vertex-array.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/array-utils-flat.js");
/* harmony import */var _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/get-browser.js");
/* harmony import */var _converters_vertex_formats_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/vertex-formats.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




// import {getGLFromVertexType} from '../converters/vertex-formats';
/** VertexArrayObject wrapper */
class WEBGLVertexArray extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.VertexArray {
    get [Symbol.toStringTag]() {
        return 'VertexArray';
    }
    device;
    handle;
    /** Attribute 0 buffer constant */
    buffer = null;
    bufferValue = null;
    /** * Attribute 0 can not be disable on most desktop OpenGL based browsers */
    static isConstantAttributeZeroSupported(device) {
        return (0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.getBrowser)() === 'Chrome';
    }
    // Create a VertexArray
    constructor(device, props) {
        super(device, props);
        this.device = device;
        this.handle = this.device.gl.createVertexArray();
    }
    destroy() {
        super.destroy();
        if (this.buffer) {
            this.buffer?.destroy();
        }
        if (this.handle) {
            this.device.gl.deleteVertexArray(this.handle);
            // @ts-expect-error read-only/undefined
            this.handle = undefined;
        }
        // Auto-delete elements?
        // return [this.elements];
    }
    /**
    // Set (bind/unbind) an elements buffer, for indexed rendering.
    // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER or null. Constants not supported
     *
     * @param elementBuffer
     */
    setIndexBuffer(indexBuffer) {
        const buffer = indexBuffer;
        // Explicitly allow `null` to support clearing the index buffer
        if (buffer && buffer.glTarget !== 34963) {
            throw new Error('Use .setBuffer()');
        }
        // In WebGL The GL.ELEMENT_ARRAY_BUFFER_BINDING is stored on the VertexArrayObject
        this.device.gl.bindVertexArray(this.handle);
        this.device.gl.bindBuffer(34963, buffer ? buffer.handle : null);
        this.indexBuffer = buffer;
        // Unbind to prevent unintended changes to the VAO.
        this.device.gl.bindVertexArray(null);
    }
    /** Set a location in vertex attributes array to a buffer, enables the location, sets divisor */
    setBuffer(location, attributeBuffer) {
        const buffer = attributeBuffer;
        // Sanity check target
        if (buffer.glTarget === 34963) {
            throw new Error('Use .setIndexBuffer()');
        }
        const { size, type, stride, offset, normalized, integer, divisor } = this._getAccessor(location);
        this.device.gl.bindVertexArray(this.handle);
        // A non-zero buffer object must be bound to the GL_ARRAY_BUFFER target
        this.device.gl.bindBuffer(34962, buffer.handle);
        // WebGL2 supports *integer* data formats, i.e. GPU will see integer values
        if (integer) {
            this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);
        }
        else {
            // Attaches ARRAY_BUFFER with specified buffer format to location
            this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
        }
        // Clear binding - keeping it may cause [.WebGL-0x12804417100]
        // GL_INVALID_OPERATION: A transform feedback buffer that would be written to is also bound to a non-transform-feedback target
        this.device.gl.bindBuffer(34962, null);
        // Mark as non-constant
        this.device.gl.enableVertexAttribArray(location);
        // Set the step mode 0=vertex, 1=instance
        this.device.gl.vertexAttribDivisor(location, divisor || 0);
        this.attributes[location] = buffer;
        // Unbind to prevent unintended changes to the VAO.
        this.device.gl.bindVertexArray(null);
    }
    /** Set a location in vertex attributes array to a constant value, disables the location */
    setConstantWebGL(location, value) {
        this._enable(location, false);
        this.attributes[location] = value;
    }
    bindBeforeRender() {
        this.device.gl.bindVertexArray(this.handle);
        this._applyConstantAttributes();
    }
    unbindAfterRender() {
        // Unbind to prevent unintended changes to the VAO.
        this.device.gl.bindVertexArray(null);
    }
    // Internal methods
    /**
     * Constant attributes need to be reset before every draw call
     * Any attribute that is disabled in the current vertex array object
     * is read from the context's global constant value for that attribute location.
     * @note Constant attributes are only supported in WebGL, not in WebGPU
     */
    _applyConstantAttributes() {
        for (let location = 0; location < this.maxVertexAttributes; ++location) {
            const constant = this.attributes[location];
            // A typed array means this is a constant
            if (ArrayBuffer.isView(constant)) {
                this.device.setConstantAttributeWebGL(location, constant);
            }
        }
    }
    /**
     * Set a location in vertex attributes array to a buffer, enables the location, sets divisor
     * @note requires vertex array to be bound
     */
    // protected _setAttributeLayout(location: number): void {
    //   const {size, type, stride, offset, normalized, integer, divisor} = this._getAccessor(location);
    //   // WebGL2 supports *integer* data formats, i.e. GPU will see integer values
    //   if (integer) {
    //     this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);
    //   } else {
    //     // Attaches ARRAY_BUFFER with specified buffer format to location
    //     this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
    //   }
    //   this.device.gl.vertexAttribDivisor(location, divisor || 0);
    // }
    /** Get an accessor from the  */
    _getAccessor(location) {
        const attributeInfo = this.attributeInfos[location];
        if (!attributeInfo) {
            throw new Error(`Unknown attribute location ${location}`);
        }
        const glType = (0,_converters_vertex_formats_js__WEBPACK_IMPORTED_MODULE_2__.getGLFromVertexType)(attributeInfo.bufferDataType);
        return {
            size: attributeInfo.bufferComponents,
            type: glType,
            stride: attributeInfo.byteStride,
            offset: attributeInfo.byteOffset,
            normalized: attributeInfo.normalized,
            // it is the shader attribute declaration, not the vertex memory format,
            // that determines if the data in the buffer will be treated as integers.
            //
            // Also note that WebGL supports assigning non-normalized integer data to floating point attributes,
            // but as far as we can tell, WebGPU does not.
            integer: attributeInfo.integer,
            divisor: attributeInfo.stepMode === 'instance' ? 1 : 0
        };
    }
    /**
     * Enabling an attribute location makes it reference the currently bound buffer
     * Disabling an attribute location makes it reference the global constant value
     * TODO - handle single values for size 1 attributes?
     * TODO - convert classic arrays based on known type?
     */
    _enable(location, enable = true) {
        // Attribute 0 cannot be disabled in most desktop OpenGL based browsers...
        const canDisableAttributeZero = WEBGLVertexArray.isConstantAttributeZeroSupported(this.device);
        const canDisableAttribute = canDisableAttributeZero || location !== 0;
        if (enable || canDisableAttribute) {
            location = Number(location);
            this.device.gl.bindVertexArray(this.handle);
            if (enable) {
                this.device.gl.enableVertexAttribArray(location);
            }
            else {
                this.device.gl.disableVertexAttribArray(location);
            }
            this.device.gl.bindVertexArray(null);
        }
    }
    /**
     * Provide a means to create a buffer that is equivalent to a constant.
     * NOTE: Desktop OpenGL cannot disable attribute 0.
     * https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-
     * this-has-significant-performance-penalty
     */
    getConstantBuffer(elementCount, value) {
        // Create buffer only when needed, and reuse it (avoids inflating buffer creation statistics)
        const constantValue = normalizeConstantArrayValue(value);
        const byteLength = constantValue.byteLength * elementCount;
        const length = constantValue.length * elementCount;
        if (this.buffer && byteLength !== this.buffer.byteLength) {
            throw new Error(`Buffer size is immutable, byte length ${byteLength} !== ${this.buffer.byteLength}.`);
        }
        let updateNeeded = !this.buffer;
        this.buffer = this.buffer || this.device.createBuffer({ byteLength });
        // Reallocate and update contents if needed
        updateNeeded = updateNeeded || !compareConstantArrayValues(constantValue, this.bufferValue);
        if (updateNeeded) {
            // Create a typed array that is big enough, and fill it with the required data
            const typedArray = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.getScratchArray)(value.constructor, length);
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.fillArray)({ target: typedArray, source: constantValue, start: 0, count: length });
            this.buffer.write(typedArray);
            this.bufferValue = value;
        }
        return this.buffer;
    }
}
// HELPER FUNCTIONS
/**
 * TODO - convert Arrays based on known type? (read type from accessor, don't assume Float32Array)
 * TODO - handle single values for size 1 attributes?
 */
function normalizeConstantArrayValue(arrayValue) {
    if (Array.isArray(arrayValue)) {
        return new Float32Array(arrayValue);
    }
    return arrayValue;
}
/**
 *
 */
function compareConstantArrayValues(v1, v2) {
    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {
        return false;
    }
    for (let i = 0; i < v1.length; ++i) {
        if (v1[i] !== v2[i]) {
            return false;
        }
    }
    return true;
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/webgl-canvas-context.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WebGLCanvasContext: function() { return WebGLCanvasContext; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/canvas-context.js");
/* harmony import */var _resources_webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * A WebGL Canvas Context which manages the canvas and handles drawing buffer resizing etc
 */
class WebGLCanvasContext extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.CanvasContext {
    device;
    presentationSize;
    _framebuffer = null;
    constructor(device, props) {
        // Note: Base class creates / looks up the canvas (unless under Node.js)
        super(props);
        this.device = device;
        this.presentationSize = [-1, -1];
        this._setAutoCreatedCanvasId(`${this.device.id}-canvas`);
        this.update();
    }
    getCurrentFramebuffer() {
        this.update();
        // Setting handle to null returns a reference to the default framebuffer
        this._framebuffer = this._framebuffer || new _resources_webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_1__.WEBGLFramebuffer(this.device, { handle: null });
        return this._framebuffer;
    }
    /** Resizes and updates render targets if necessary */
    update() {
        const size = this.getPixelSize();
        const sizeChanged = size[0] !== this.presentationSize[0] || size[1] !== this.presentationSize[1];
        if (sizeChanged) {
            this.presentationSize = size;
            this.resize();
        }
    }
    /**
     * Resize the canvas' drawing buffer.
     *
     * Can match the canvas CSS size, and optionally also consider devicePixelRatio
     * Can be called every frame
     *
     * Regardless of size, the drawing buffer will always be scaled to the viewport, but
     * for best visual results, usually set to either:
     *  canvas CSS width x canvas CSS height
     *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio
     * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
     */
    resize(options) {
        if (!this.device.gl)
            return;
        // Resize browser context .
        if (this.canvas) {
            const devicePixelRatio = this.getDevicePixelRatio(options?.useDevicePixels);
            this.setDevicePixelRatio(devicePixelRatio, options);
            return;
        }
    }
    commit() {
        // gl.commit was ultimately removed from the WebGL standard??
        // if (this.offScreen && this.gl.commit) {
        //   // @ts-expect-error gl.commit is not officially part of WebGL2RenderingContext
        //   this.gl.commit();
        // }
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/webgl-device.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WebGLDevice: function() { return WebGLDevice; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/device.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/canvas-context.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/utils.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */var _context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js");
/* harmony import */var _context_helpers_create_browser_context_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/helpers/create-browser-context.js");
/* harmony import */var _device_helpers_webgl_device_info_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-info.js");
/* harmony import */var _device_helpers_webgl_device_features_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-features.js");
/* harmony import */var _device_helpers_webgl_device_limits_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-limits.js");
/* harmony import */var _webgl_canvas_context_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/webgl-canvas-context.js");
/* harmony import */var _context_debug_spector_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/debug/spector.js");
/* harmony import */var _context_debug_webgl_developer_tools_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/debug/webgl-developer-tools.js");
/* harmony import */var _converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/converters/texture-formats.js");
/* harmony import */var _resources_webgl_buffer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js");
/* harmony import */var _resources_webgl_shader_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-shader.js");
/* harmony import */var _resources_webgl_sampler_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js");
/* harmony import */var _resources_webgl_texture_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js");
/* harmony import */var _resources_webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js");
/* harmony import */var _resources_webgl_render_pass_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pass.js");
/* harmony import */var _resources_webgl_render_pipeline_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pipeline.js");
/* harmony import */var _resources_webgl_command_encoder_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-encoder.js");
/* harmony import */var _resources_webgl_vertex_array_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-vertex-array.js");
/* harmony import */var _resources_webgl_transform_feedback_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-transform-feedback.js");
/* harmony import */var _resources_webgl_query_set_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-query-set.js");
/* harmony import */var _classic_copy_and_blit_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/copy-and-blit.js");
/* harmony import */var _context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
/* harmony import */var _context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js");
/* harmony import */var _classic_clear_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/clear.js");
/* harmony import */var _context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


























const LOG_LEVEL = 1;
/** WebGPU style Device API for a WebGL context */
class WebGLDevice extends _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Device {
    //
    // Public `Device` API
    //
    /** type of this device */
    static type = 'webgl';
    /** type of this device */
    type = 'webgl';
    /** The underlying WebGL context */
    handle;
    features;
    limits;
    info;
    canvasContext;
    lost;
    _resolveContextLost;
    //
    // Static methods, expected to be present by `luma.createDevice()`
    //
    /** Check if WebGL 2 is available */
    static isSupported() {
        return typeof WebGL2RenderingContext !== 'undefined';
    }
    /**
     * Get a device instance from a GL context
     * Creates and instruments the device if not already created
     * @param gl
     * @returns
     */
    static attach(gl) {
        if (gl instanceof WebGLDevice) {
            return gl;
        }
        // @ts-expect-error
        if (gl?.device instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.Device) {
            // @ts-expect-error
            return gl.device;
        }
        if (!isWebGL(gl)) {
            throw new Error('Invalid WebGL2RenderingContext');
        }
        return new WebGLDevice({ gl: gl });
    }
    static async create(props = {}) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.groupCollapsed(LOG_LEVEL, 'WebGLDevice created')();
        const promises = [];
        // Load webgl and spector debug scripts from CDN if requested
        if (props.debug) {
            promises.push((0,_context_debug_webgl_developer_tools_js__WEBPACK_IMPORTED_MODULE_2__.loadWebGLDeveloperTools)());
        }
        if (props.spector) {
            promises.push((0,_context_debug_spector_js__WEBPACK_IMPORTED_MODULE_3__.loadSpectorJS)());
        }
        // Wait for page to load: if canvas is a string we need to query the DOM for the canvas element.
        // We only wait when props.canvas is string to avoids setting the global page onload callback unless necessary.
        if (typeof props.canvas === 'string') {
            promises.push(_luma_gl_core__WEBPACK_IMPORTED_MODULE_4__.CanvasContext.pageLoaded);
        }
        // Wait for all the loads to settle before creating the context.
        // The Device.create() functions are async, so in contrast to the constructor, we can `await` here.
        const results = await Promise.allSettled(promises);
        for (const result of results) {
            if (result.status === 'rejected') {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.error(`Failed to initialize debug libraries ${result.reason}`)();
            }
        }
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.probe(LOG_LEVEL + 1, 'DOM is loaded')();
        // @ts-expect-error
        if (props.gl?.device) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.warn('reattaching existing device')();
            return WebGLDevice.attach(props.gl);
        }
        const device = new WebGLDevice(props);
        // Log some debug info about the newly created context
        const message = `\
Created ${device.type}${device.debug ? ' debug' : ''} context: \
${device.info.vendor}, ${device.info.renderer} for canvas: ${device.canvasContext.id}`;
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.probe(LOG_LEVEL, message)();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.table(LOG_LEVEL, device.info)();
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.groupEnd(LOG_LEVEL)();
        return device;
    }
    //
    // Public API
    //
    constructor(props) {
        super({ ...props, id: props.id || (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_5__.uid)('webgl-device') });
        // If attaching to an already attached context, return the attached device
        // @ts-expect-error device is attached to context
        const device = props.gl?.device;
        if (device) {
            throw new Error(`WebGL context already attached to device ${device.id}`);
        }
        // Create and instrument context
        const canvas = props.gl?.canvas || props.canvas;
        this.canvasContext = new _webgl_canvas_context_js__WEBPACK_IMPORTED_MODULE_6__.WebGLCanvasContext(this, { ...props, canvas });
        this.lost = new Promise(resolve => {
            this._resolveContextLost = resolve;
        });
        let gl = props.gl || null;
        gl ||= (0,_context_helpers_create_browser_context_js__WEBPACK_IMPORTED_MODULE_7__.createBrowserContext)(this.canvasContext.canvas, {
            ...props,
            onContextLost: (event) => this._resolveContextLost?.({
                reason: 'destroyed',
                message: 'Entered sleep mode, or too many apps or browser tabs are using the GPU.'
            })
        });
        if (!gl) {
            throw new Error('WebGL context creation failed');
        }
        this.handle = gl;
        this.gl = gl;
        this.gl.device = this; // Update GL context: Link webgl context back to device
        this.gl._version = 2; // Update GL context: Store WebGL version field on gl context (HACK to identify debug contexts)
        if (props.spector) {
            this.spectorJS = (0,_context_debug_spector_js__WEBPACK_IMPORTED_MODULE_3__.initializeSpectorJS)({ ...this.props, canvas: this.handle.canvas });
        }
        // luma Device fields
        this.info = (0,_device_helpers_webgl_device_info_js__WEBPACK_IMPORTED_MODULE_8__.getDeviceInfo)(this.gl, this._extensions);
        this.limits = new _device_helpers_webgl_device_limits_js__WEBPACK_IMPORTED_MODULE_9__.WebGLDeviceLimits(this.gl);
        this.features = new _device_helpers_webgl_device_features_js__WEBPACK_IMPORTED_MODULE_10__.WebGLDeviceFeatures(this.gl, this._extensions, this.props.disabledFeatures);
        if (this.props.initalizeFeatures) {
            this.features.initializeFeatures();
        }
        this.canvasContext.resize();
        // Install context state tracking
        // @ts-expect-error - hidden parameters
        const { enable = true, copyState = false } = props;
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_11__.trackContextState)(this.gl, {
            enable,
            copyState,
            log: (...args) => _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.log(1, ...args)()
        });
        // DEBUG contexts: Add debug instrumentation to the context, force log level to at least 1
        if (props.debug) {
            this.gl = (0,_context_debug_webgl_developer_tools_js__WEBPACK_IMPORTED_MODULE_2__.makeDebugContext)(this.gl, { ...props, throwOnError: true });
            this.debug = true;
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.level = Math.max(_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.level, 1);
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.warn('WebGL debug mode activated. Performance reduced.')();
        }
    }
    /**
     * Destroys the context
     * @note Has no effect for WebGL browser contexts, there is no browser API for destroying contexts
     */
    destroy() { }
    get isLost() {
        return this.gl.isContextLost();
    }
    getSize() {
        return [this.gl.drawingBufferWidth, this.gl.drawingBufferHeight];
    }
    isTextureFormatSupported(format) {
        return (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_12__.isTextureFormatSupported)(this.gl, format, this._extensions);
    }
    isTextureFormatFilterable(format) {
        return (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_12__.isTextureFormatFilterable)(this.gl, format, this._extensions);
    }
    isTextureFormatRenderable(format) {
        return (0,_converters_texture_formats_js__WEBPACK_IMPORTED_MODULE_12__.isTextureFormatRenderable)(this.gl, format, this._extensions);
    }
    // IMPLEMENTATION OF ABSTRACT DEVICE
    createCanvasContext(props) {
        throw new Error('WebGL only supports a single canvas');
    }
    createBuffer(props) {
        const newProps = this._getBufferProps(props);
        return new _resources_webgl_buffer_js__WEBPACK_IMPORTED_MODULE_13__.WEBGLBuffer(this, newProps);
    }
    _createTexture(props) {
        return new _resources_webgl_texture_js__WEBPACK_IMPORTED_MODULE_14__.WEBGLTexture(this, props);
    }
    createExternalTexture(props) {
        throw new Error('createExternalTexture() not implemented'); // return new Program(props);
    }
    createSampler(props) {
        return new _resources_webgl_sampler_js__WEBPACK_IMPORTED_MODULE_15__.WEBGLSampler(this, props);
    }
    createShader(props) {
        return new _resources_webgl_shader_js__WEBPACK_IMPORTED_MODULE_16__.WEBGLShader(this, props);
    }
    createFramebuffer(props) {
        return new _resources_webgl_framebuffer_js__WEBPACK_IMPORTED_MODULE_17__.WEBGLFramebuffer(this, props);
    }
    createVertexArray(props) {
        return new _resources_webgl_vertex_array_js__WEBPACK_IMPORTED_MODULE_18__.WEBGLVertexArray(this, props);
    }
    createTransformFeedback(props) {
        return new _resources_webgl_transform_feedback_js__WEBPACK_IMPORTED_MODULE_19__.WEBGLTransformFeedback(this, props);
    }
    createQuerySet(props) {
        return new _resources_webgl_query_set_js__WEBPACK_IMPORTED_MODULE_20__.WEBGLQuerySet(this, props);
    }
    createRenderPipeline(props) {
        return new _resources_webgl_render_pipeline_js__WEBPACK_IMPORTED_MODULE_21__.WEBGLRenderPipeline(this, props);
    }
    beginRenderPass(props) {
        return new _resources_webgl_render_pass_js__WEBPACK_IMPORTED_MODULE_22__.WEBGLRenderPass(this, props);
    }
    createComputePipeline(props) {
        throw new Error('ComputePipeline not supported in WebGL');
    }
    beginComputePass(props) {
        throw new Error('ComputePass not supported in WebGL');
    }
    renderPass = null;
    createCommandEncoder(props) {
        return new _resources_webgl_command_encoder_js__WEBPACK_IMPORTED_MODULE_23__.WEBGLCommandEncoder(this, props);
    }
    /**
     * Offscreen Canvas Support: Commit the frame
     * https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/commit
     * Chrome's offscreen canvas does not require gl.commit
     */
    submit() {
        this.renderPass?.end();
        this.renderPass = null;
        // this.canvasContext.commit();
    }
    //
    // TEMPORARY HACKS - will be removed in v9.1
    //
    /** @deprecated - should use command encoder */
    readPixelsToArrayWebGL(source, options) {
        return (0,_classic_copy_and_blit_js__WEBPACK_IMPORTED_MODULE_24__.readPixelsToArray)(source, options);
    }
    /** @deprecated - should use command encoder */
    readPixelsToBufferWebGL(source, options) {
        return (0,_classic_copy_and_blit_js__WEBPACK_IMPORTED_MODULE_24__.readPixelsToBuffer)(source, options);
    }
    setParametersWebGL(parameters) {
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_25__.setGLParameters)(this.gl, parameters);
    }
    getParametersWebGL(parameters) {
        return (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_25__.getGLParameters)(this.gl, parameters);
    }
    withParametersWebGL(parameters, func) {
        return (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_26__.withGLParameters)(this.gl, parameters, func);
    }
    clearWebGL(options) {
        (0,_classic_clear_js__WEBPACK_IMPORTED_MODULE_27__.clear)(this, options);
    }
    resetWebGL() {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.warn('WebGLDevice.resetWebGL is deprecated, use only for debugging')();
        (0,_context_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_25__.resetGLParameters)(this.gl);
    }
    //
    // WebGL-only API (not part of `Device` API)
    //
    /** WebGL2 context. */
    gl;
    debug = false;
    /** State used by luma.gl classes: TODO - move to canvasContext*/
    _canvasSizeInfo = { clientWidth: 0, clientHeight: 0, devicePixelRatio: 1 };
    /** State used by luma.gl classes - TODO - not used? */
    _extensions = {};
    _polyfilled = false;
    /** Instance of Spector.js (if initialized) */
    spectorJS;
    /**
     * Triggers device (or WebGL context) loss.
     * @note primarily intended for testing how application reacts to device loss
     */
    loseDevice() {
        let deviceLossTriggered = false;
        const extensions = this.getExtension('WEBGL_lose_context');
        const ext = extensions.WEBGL_lose_context;
        if (ext) {
            deviceLossTriggered = true;
            ext.loseContext();
            // ext.loseContext should trigger context loss callback but the platform may not do this, so do it explicitly
        }
        this._resolveContextLost?.({
            reason: 'destroyed',
            message: 'Application triggered context loss'
        });
        return deviceLossTriggered;
    }
    /** Save current WebGL context state onto an internal stack */
    pushState() {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_11__.pushContextState)(this.gl);
    }
    /** Restores previously saved context state */
    popState() {
        (0,_context_state_tracker_track_context_state_js__WEBPACK_IMPORTED_MODULE_11__.popContextState)(this.gl);
    }
    /**
     * Storing data on a special field on WebGLObjects makes that data visible in SPECTOR chrome debug extension
     * luma.gl ids and props can be inspected
     */
    setSpectorMetadata(handle, props) {
        // @ts-expect-error
        // eslint-disable-next-line camelcase
        handle.__SPECTOR_Metadata = props;
    }
    /**
     * Returns the GL.<KEY> constant that corresponds to a numeric value of a GL constant
     * Be aware that there are some duplicates especially for constants that are 0,
     * so this isn't guaranteed to return the right key in all cases.
     */
    getGLKey(value, gl) {
        // @ts-ignore expect-error depends on settings
        gl = gl || this.gl2 || this.gl;
        const number = Number(value);
        for (const key in gl) {
            // @ts-ignore expect-error depends on settings
            if (gl[key] === number) {
                return `GL.${key}`;
            }
        }
        // No constant found. Stringify the value and return it.
        return String(value);
    }
    /** Store constants */
    _constants;
    /**
     * Set a constant value for a location. Disabled attributes at that location will read from this value
     * @note WebGL constants are stored globally on the WebGL context, not the VertexArray
     * so they need to be updated before every render
     * @todo - remember/cache values to avoid setting them unnecessarily?
     */
    setConstantAttributeWebGL(location, constant) {
        const maxVertexAttributes = this.limits.maxVertexAttributes;
        this._constants = this._constants || new Array(maxVertexAttributes).fill(null);
        const currentConstant = this._constants[location];
        if (currentConstant && compareConstantArrayValues(currentConstant, constant)) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.log.info(1, `setConstantAttributeWebGL(${location}) could have been skipped, value unchanged`)();
        }
        this._constants[location] = constant;
        switch (constant.constructor) {
            case Float32Array:
                setConstantFloatArray(this, location, constant);
                break;
            case Int32Array:
                setConstantIntArray(this, location, constant);
                break;
            case Uint32Array:
                setConstantUintArray(this, location, constant);
                break;
            default:
                (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_28__.assert)(false);
        }
    }
    /** Ensure extensions are only requested once */
    getExtension(name) {
        (0,_context_helpers_webgl_extensions_js__WEBPACK_IMPORTED_MODULE_29__.getWebGLExtension)(this.gl, name, this._extensions);
        return this._extensions;
    }
}
/** Check if supplied parameter is a WebGL2RenderingContext */
function isWebGL(gl) {
    if (typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext) {
        return true;
    }
    // Look for debug contexts, headless gl etc
    return Boolean(gl && Number.isFinite(gl._version));
}
/** Set constant float array attribute */
function setConstantFloatArray(device, location, array) {
    switch (array.length) {
        case 1:
            device.gl.vertexAttrib1fv(location, array);
            break;
        case 2:
            device.gl.vertexAttrib2fv(location, array);
            break;
        case 3:
            device.gl.vertexAttrib3fv(location, array);
            break;
        case 4:
            device.gl.vertexAttrib4fv(location, array);
            break;
        default:
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_28__.assert)(false);
    }
}
/** Set constant signed int array attribute */
function setConstantIntArray(device, location, array) {
    device.gl.vertexAttribI4iv(location, array);
    // TODO - not clear if we need to use the special forms, more testing needed
    // switch (array.length) {
    //   case 1:
    //     gl.vertexAttribI1iv(location, array);
    //     break;
    //   case 2:
    //     gl.vertexAttribI2iv(location, array);
    //     break;
    //   case 3:
    //     gl.vertexAttribI3iv(location, array);
    //     break;
    //   case 4:
    //     break;
    //   default:
    //     assert(false);
    // }
}
/** Set constant unsigned int array attribute */
function setConstantUintArray(device, location, array) {
    device.gl.vertexAttribI4uiv(location, array);
    // TODO - not clear if we need to use the special forms, more testing needed
    // switch (array.length) {
    //   case 1:
    //     gl.vertexAttribI1uiv(location, array);
    //     break;
    //   case 2:
    //     gl.vertexAttribI2uiv(location, array);
    //     break;
    //   case 3:
    //     gl.vertexAttribI3uiv(location, array);
    //     break;
    //   case 4:
    //     gl.vertexAttribI4uiv(location, array);
    //     break;
    //   default:
    //     assert(false);
    // }
}
/**
 * Compares contents of two typed arrays
 * @todo max length?
 */
function compareConstantArrayValues(v1, v2) {
    if (!v1 || !v2 || v1.length !== v2.length || v1.constructor !== v2.constructor) {
        return false;
    }
    for (let i = 0; i < v1.length; ++i) {
        if (v1[i] !== v2[i]) {
            return false;
        }
    }
    return true;
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/accessor.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Accessor: function() { return Accessor; },
  DEFAULT_ACCESSOR_VALUES: function() { return DEFAULT_ACCESSOR_VALUES; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/check-props.js");
/* harmony import */var _typed_array_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/typed-array-utils.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors



const DEFAULT_ACCESSOR_VALUES = {
    offset: 0,
    stride: 0,
    type: 5126,
    size: 1,
    divisor: 0,
    normalized: false,
    integer: false
};
const PROP_CHECKS = {
    deprecatedProps: {
        instanced: 'divisor',
        isInstanced: 'divisor'
    }
};
class Accessor {
    offset;
    stride;
    type;
    size;
    divisor;
    normalized;
    integer;
    buffer;
    index;
    static getBytesPerElement(accessor) {
        // TODO: using `FLOAT` when type is not specified,
        // ensure this assumption is valid or force API to specify type.
        const ArrayType = (0,_typed_array_utils_js__WEBPACK_IMPORTED_MODULE_0__.getTypedArrayFromGLType)(accessor.type || 5126);
        return ArrayType.BYTES_PER_ELEMENT;
    }
    static getBytesPerVertex(accessor) {
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.assert)(accessor.size);
        // TODO: using `FLOAT` when type is not specified,
        // ensure this assumption is valid or force API to specify type.
        const ArrayType = (0,_typed_array_utils_js__WEBPACK_IMPORTED_MODULE_0__.getTypedArrayFromGLType)(accessor.type || 5126);
        return ArrayType.BYTES_PER_ELEMENT * accessor.size;
    }
    // Combines (merges) a list of accessors. On top of default values
    // Usually [programAccessor, bufferAccessor, appAccessor]
    // All props will be set in the returned object.
    // TODO check for conflicts between values in the supplied accessors
    static resolve(...accessors) {
        return new Accessor(...[DEFAULT_ACCESSOR_VALUES, ...accessors]); // Default values
    }
    constructor(...accessors) {
        accessors.forEach(accessor => this._assign(accessor)); // Merge in sequence
        Object.freeze(this);
    }
    toString() {
        return JSON.stringify(this);
    }
    // ACCESSORS
    // TODO - remove>
    get BYTES_PER_ELEMENT() {
        return Accessor.getBytesPerElement(this);
    }
    get BYTES_PER_VERTEX() {
        return Accessor.getBytesPerVertex(this);
    }
    // PRIVATE
    // eslint-disable-next-line complexity, max-statements
    _assign(props = {}) {
        props = (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.checkProps)('Accessor', props, PROP_CHECKS);
        if (props.type !== undefined) {
            this.type = props.type;
            // Auto-deduce integer type?
            if (props.type === 5124 || props.type === 5125) {
                this.integer = true;
            }
        }
        if (props.size !== undefined) {
            this.size = props.size;
        }
        if (props.offset !== undefined) {
            this.offset = props.offset;
        }
        if (props.stride !== undefined) {
            this.stride = props.stride;
        }
        // @ts-expect-error
        if (props.normalize !== undefined) {
            // @ts-expect-error
            this.normalized = props.normalize;
        }
        if (props.normalized !== undefined) {
            this.normalized = props.normalized;
        }
        if (props.integer !== undefined) {
            this.integer = props.integer;
        }
        // INSTANCE DIVISOR
        if (props.divisor !== undefined) {
            this.divisor = props.divisor;
        }
        // Buffer is optional
        if (props.buffer !== undefined) {
            this.buffer = props.buffer;
        }
        // The binding index (for binding e.g. Transform feedbacks and Uniform buffers)
        // TODO - should this be part of accessor?
        if (props.index !== undefined) {
            if (typeof props.index === 'boolean') {
                this.index = props.index ? 1 : 0;
            }
            else {
                this.index = props.index;
            }
        }
        // DEPRECATED
        // @ts-expect-error
        if (props.instanced !== undefined) {
            // @ts-expect-error
            this.divisor = props.instanced ? 1 : 0;
        }
        // @ts-expect-error
        if (props.isInstanced !== undefined) {
            // @ts-expect-error
            this.divisor = props.isInstanced ? 1 : 0;
        }
        if (this.offset === undefined)
            delete this.offset;
        if (this.stride === undefined)
            delete this.stride;
        if (this.type === undefined)
            delete this.type;
        if (this.size === undefined)
            delete this.size;
        if (this.divisor === undefined)
            delete this.divisor;
        if (this.normalized === undefined)
            delete this.normalized;
        if (this.integer === undefined)
            delete this.integer;
        if (this.buffer === undefined)
            delete this.buffer;
        if (this.index === undefined)
            delete this.index;
        return this;
    }
}
// TEST EXPORTS



}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/clear.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  clear: function() { return clear; },
  clearBuffer: function() { return clearBuffer; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */var _context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// Should collapse during minification
const GL_DEPTH_BUFFER_BIT = 0x00000100;
const GL_STENCIL_BUFFER_BIT = 0x00000400;
const GL_COLOR_BUFFER_BIT = 0x00004000;
const GL_COLOR = 0x1800;
const GL_DEPTH = 0x1801;
const GL_STENCIL = 0x1802;
const GL_DEPTH_STENCIL = 0x84f9;
// Should disappear if asserts are removed
const ERR_ARGUMENTS = 'clear: bad arguments';
/**
 * Optionally clears depth, color and stencil buffers
 * @deprecated Set clear color when creating a RenderPass.
 */
function clear(device, options) {
    const { framebuffer = null, color = null, depth = null, stencil = null } = options || {};
    const parameters = {};
    if (framebuffer) {
        parameters.framebuffer = framebuffer;
    }
    let clearFlags = 0;
    if (color) {
        clearFlags |= GL_COLOR_BUFFER_BIT;
        if (color !== true) {
            parameters.clearColor = color;
        }
    }
    if (depth) {
        clearFlags |= GL_DEPTH_BUFFER_BIT;
        if (depth !== true) {
            parameters.clearDepth = depth;
        }
    }
    if (stencil) {
        clearFlags |= GL_STENCIL_BUFFER_BIT;
        if (depth !== true) {
            parameters.clearStencil = depth;
        }
    }
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(clearFlags !== 0, ERR_ARGUMENTS);
    // Temporarily set any clear "colors" and call clear
    const gl = device.gl;
    (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_1__.withGLParameters)(gl, parameters, () => {
        gl.clear(clearFlags);
    });
}
/**
 * WebGL2 - clear a specific drawing buffer
 * @deprecated Set clear color when creating a RenderPass
 */
function clearBuffer(device, options) {
    const { framebuffer = null, buffer = GL_COLOR, drawBuffer = 0, value = [0, 0, 0, 0] } = options || {};
    const gl = device.gl;
    (0,_context_state_tracker_with_parameters_js__WEBPACK_IMPORTED_MODULE_1__.withGLParameters)(gl, { framebuffer }, () => {
        // Method selection per OpenGL ES 3 docs
        switch (buffer) {
            case GL_COLOR:
                switch (value.constructor) {
                    case Int32Array:
                        gl.clearBufferiv(buffer, drawBuffer, value);
                        break;
                    case Uint32Array:
                        gl.clearBufferuiv(buffer, drawBuffer, value);
                        break;
                    case Float32Array:
                    default:
                        gl.clearBufferfv(buffer, drawBuffer, value);
                }
                break;
            case GL_DEPTH:
                gl.clearBufferfv(GL_DEPTH, 0, [value]);
                break;
            case GL_STENCIL:
                gl.clearBufferiv(GL_STENCIL, 0, [value]);
                break;
            case GL_DEPTH_STENCIL:
                const [depth, stencil] = value;
                gl.clearBufferfi(GL_DEPTH_STENCIL, 0, depth, stencil);
                break;
            default:
                (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(false, ERR_ARGUMENTS);
        }
    });
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/copy-and-blit.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  copyToTexture: function() { return copyToTexture; },
  readPixelsToArray: function() { return readPixelsToArray; },
  readPixelsToBuffer: function() { return readPixelsToBuffer; },
  toFramebuffer: function() { return toFramebuffer; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/texture.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js");
/* harmony import */var _typed_array_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/typed-array-utils.js");
/* harmony import */var _format_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/format-utils.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors




/**
 * Copies data from a type  or a Texture object into ArrayBuffer object.
 * App can provide targetPixelArray or have it auto allocated by this method
 *  newly allocated by this method unless provided by app.
 * @deprecated Use CommandEncoder.copyTextureToBuffer and Buffer.read
 * @note Slow requires roundtrip to GPU
 *
 * @param source
 * @param options
 * @returns pixel array,
 */
function readPixelsToArray(source, options) {
    const { sourceX = 0, sourceY = 0, sourceFormat = 6408, sourceAttachment = 36064 // TODO - support gl.readBuffer
     } = options || {};
    let { target = null, 
    // following parameters are auto deduced if not provided
    sourceWidth, sourceHeight, sourceType } = options || {};
    const { framebuffer, deleteFramebuffer } = getFramebuffer(source);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(framebuffer);
    const { gl, handle } = framebuffer;
    sourceWidth = sourceWidth || framebuffer.width;
    sourceHeight = sourceHeight || framebuffer.height;
    // TODO - Set and unset gl.readBuffer
    // if (sourceAttachment === GL.COLOR_ATTACHMENT0 && handle === null) {
    //   sourceAttachment = GL.FRONT;
    // }
    const attachment = sourceAttachment - 36064;
    // assert(attachments[sourceAttachment]);
    // Deduce the type from color attachment if not provided.
    sourceType =
        sourceType ||
            framebuffer.colorAttachments[attachment]?.texture?.type || 5121;
    // Deduce type and allocated pixelArray if needed
    target = getPixelArray(target, sourceType, sourceFormat, sourceWidth, sourceHeight);
    // Pixel array available, if necessary, deduce type from it.
    sourceType = sourceType || (0,_typed_array_utils_js__WEBPACK_IMPORTED_MODULE_1__.getGLTypeFromTypedArray)(target);
    const prevHandle = gl.bindFramebuffer(36160, handle);
    gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target);
    // @ts-expect-error
    gl.bindFramebuffer(36160, prevHandle || null);
    if (deleteFramebuffer) {
        framebuffer.destroy();
    }
    return target;
}
/**
 * Copies data from a Framebuffer or a Texture object into a Buffer object.
 * NOTE: doesn't wait for copy to be complete, it programs GPU to perform a DMA transffer.
 * @deprecated Use CommandEncoder
 * @param source
 * @param options
 */
function readPixelsToBuffer(source, options) {
    const { target, sourceX = 0, sourceY = 0, sourceFormat = 6408, targetByteOffset = 0 } = options || {};
    // following parameters are auto deduced if not provided
    let { sourceWidth, sourceHeight, sourceType } = options || {};
    const { framebuffer, deleteFramebuffer } = getFramebuffer(source);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(framebuffer);
    sourceWidth = sourceWidth || framebuffer.width;
    sourceHeight = sourceHeight || framebuffer.height;
    // Asynchronous read (PIXEL_PACK_BUFFER) is WebGL2 only feature
    const webglFramebuffer = framebuffer;
    // deduce type if not available.
    sourceType = sourceType || 5121;
    let webglBufferTarget = target;
    if (!webglBufferTarget) {
        // Create new buffer with enough size
        const components = (0,_format_utils_js__WEBPACK_IMPORTED_MODULE_2__.glFormatToComponents)(sourceFormat);
        const byteCount = (0,_format_utils_js__WEBPACK_IMPORTED_MODULE_2__.glTypeToBytes)(sourceType);
        const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;
        webglBufferTarget = webglFramebuffer.device.createBuffer({ byteLength });
    }
    // TODO(donmccurdy): Do we have tests to confirm this is working?
    const commandEncoder = source.device.createCommandEncoder();
    commandEncoder.copyTextureToBuffer({
        source: source,
        width: sourceWidth,
        height: sourceHeight,
        origin: [sourceX, sourceY],
        destination: webglBufferTarget,
        byteOffset: targetByteOffset
    });
    commandEncoder.destroy();
    if (deleteFramebuffer) {
        framebuffer.destroy();
    }
    return webglBufferTarget;
}
/**
 * Copy a rectangle from a Framebuffer or Texture object into a texture (at an offset)
 * @deprecated Use CommandEncoder
 */
// eslint-disable-next-line complexity, max-statements
function copyToTexture(source, target, options) {
    const { sourceX = 0, sourceY = 0, 
    // attachment = GL.COLOR_ATTACHMENT0, // TODO - support gl.readBuffer
    targetMipmaplevel = 0, targetInternalFormat = 6408 } = options || {};
    let { targetX, targetY, targetZ, width, // defaults to target width
    height // defaults to target height
     } = options || {};
    const { framebuffer, deleteFramebuffer } = getFramebuffer(source);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(framebuffer);
    const webglFramebuffer = framebuffer;
    const { device, handle } = webglFramebuffer;
    const isSubCopy = typeof targetX !== 'undefined' ||
        typeof targetY !== 'undefined' ||
        typeof targetZ !== 'undefined';
    targetX = targetX || 0;
    targetY = targetY || 0;
    targetZ = targetZ || 0;
    const prevHandle = device.gl.bindFramebuffer(36160, handle);
    // TODO - support gl.readBuffer (WebGL2 only)
    // const prevBuffer = gl.readBuffer(attachment);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(target);
    let texture = null;
    let textureTarget;
    if (target instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_3__.Texture) {
        texture = target;
        width = Number.isFinite(width) ? width : texture.width;
        height = Number.isFinite(height) ? height : texture.height;
        texture.bind(0);
        textureTarget = texture.target;
    }
    else {
        textureTarget = target;
    }
    if (!isSubCopy) {
        device.gl.copyTexImage2D(textureTarget, targetMipmaplevel, targetInternalFormat, sourceX, sourceY, width, height, 0 /* border must be 0 */);
    }
    else {
        switch (textureTarget) {
            case 3553:
            case 34067:
                device.gl.copyTexSubImage2D(textureTarget, targetMipmaplevel, targetX, targetY, sourceX, sourceY, width, height);
                break;
            case 35866:
            case 32879:
                device.gl.copyTexSubImage3D(textureTarget, targetMipmaplevel, targetX, targetY, targetZ, sourceX, sourceY, width, height);
                break;
            default:
        }
    }
    if (texture) {
        texture.unbind();
    }
    // @ts-expect-error
    device.gl.bindFramebuffer(36160, prevHandle || null);
    if (deleteFramebuffer) {
        framebuffer.destroy();
    }
    return texture;
}
function getFramebuffer(source) {
    if (!(source instanceof _luma_gl_core__WEBPACK_IMPORTED_MODULE_4__.Framebuffer)) {
        return { framebuffer: toFramebuffer(source), deleteFramebuffer: true };
    }
    return { framebuffer: source, deleteFramebuffer: false };
}
/**
 * Wraps a given texture into a framebuffer object, that can be further used
 * to read data from the texture object.
 */
function toFramebuffer(texture, props) {
    const { device, width, height, id } = texture;
    const framebuffer = device.createFramebuffer({
        ...props,
        id: `framebuffer-for-${id}`,
        width,
        height,
        colorAttachments: [texture]
    });
    return framebuffer;
}
function getPixelArray(pixelArray, type, format, width, height) {
    if (pixelArray) {
        return pixelArray;
    }
    // Allocate pixel array if not already available, using supplied type
    type = type || 5121;
    const ArrayType = (0,_typed_array_utils_js__WEBPACK_IMPORTED_MODULE_1__.getTypedArrayFromGLType)(type, { clamped: false });
    const components = (0,_format_utils_js__WEBPACK_IMPORTED_MODULE_2__.glFormatToComponents)(format);
    // TODO - check for composite type (components = 1).
    return new ArrayType(width * height * components);
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/format-utils.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  glFormatToComponents: function() { return glFormatToComponents; },
  glTypeToBytes: function() { return glTypeToBytes; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


// Returns number of components in a specific readPixels WebGL format
function glFormatToComponents(format) {
    switch (format) {
        case 6406:
        case 33326:
        case 6403:
            return 1;
        case 33328:
        case 33319:
            return 2;
        case 6407:
        case 34837:
            return 3;
        case 6408:
        case 34836:
            return 4;
        // TODO: Add support for additional WebGL2 formats
        default:
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
            return 0;
    }
}
// Return byte count for given readPixels WebGL type
function glTypeToBytes(type) {
    switch (type) {
        case 5121:
            return 1;
        case 33635:
        case 32819:
        case 32820:
            return 2;
        case 5126:
            return 4;
        // TODO: Add support for additional WebGL2 types
        default:
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.assert)(false);
            return 0;
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/classic/typed-array-utils.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  flipRows: function() { return flipRows; },
  getGLTypeFromTypedArray: function() { return getGLTypeFromTypedArray; },
  getTypedArrayFromGLType: function() { return getTypedArrayFromGLType; },
  scalePixels: function() { return scalePixels; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const ERR_TYPE_DEDUCTION = 'Failed to deduce GL constant from typed array';
/**
 * Converts TYPED ARRAYS to corresponding GL constant
 * Used to auto deduce gl parameter types
 * @deprecated Use getDataTypeFromTypedArray
 * @param arrayOrType
 * @returns
 */
function getGLTypeFromTypedArray(arrayOrType) {
    // If typed array, look up constructor
    const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
    switch (type) {
        case Float32Array:
            return 5126;
        case Uint16Array:
            return 5123;
        case Uint32Array:
            return 5125;
        case Uint8Array:
            return 5121;
        case Uint8ClampedArray:
            return 5121;
        case Int8Array:
            return 5120;
        case Int16Array:
            return 5122;
        case Int32Array:
            return 5124;
        default:
            throw new Error(ERR_TYPE_DEDUCTION);
    }
}
/**
 * Converts GL constant to corresponding TYPED ARRAY
 * Used to auto deduce gl parameter types
 * @deprecated Use getTypedArrayFromDataType
 * @param glType
 * @param param1
 * @returns
 */
// eslint-disable-next-line complexity
function getTypedArrayFromGLType(glType, options) {
    const { clamped = true } = options || {};
    // Sorted in some order of likelihood to reduce amount of comparisons
    switch (glType) {
        case 5126:
            return Float32Array;
        case 5123:
        case 33635:
        case 32819:
        case 32820:
            return Uint16Array;
        case 5125:
            return Uint32Array;
        case 5121:
            return clamped ? Uint8ClampedArray : Uint8Array;
        case 5120:
            return Int8Array;
        case 5122:
            return Int16Array;
        case 5124:
            return Int32Array;
        default:
            throw new Error('Failed to deduce typed array type from GL constant');
    }
}
/**
 * Flip rows (can be used on arrays returned from `Framebuffer.readPixels`)
 * https: *stackoverflow.com/questions/41969562/
 * how-can-i-flip-the-result-of-webglrenderingcontext-readpixels
 * @param param0
 */
function flipRows(options) {
    const { data, width, height, bytesPerPixel = 4, temp } = options;
    const bytesPerRow = width * bytesPerPixel;
    // make a temp buffer to hold one row
    const tempBuffer = temp || new Uint8Array(bytesPerRow);
    for (let y = 0; y < height / 2; ++y) {
        const topOffset = y * bytesPerRow;
        const bottomOffset = (height - y - 1) * bytesPerRow;
        // make copy of a row on the top half
        tempBuffer.set(data.subarray(topOffset, topOffset + bytesPerRow));
        // copy a row from the bottom half to the top
        data.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
        // copy the copy of the top half row to the bottom half
        data.set(tempBuffer, bottomOffset);
    }
}
function scalePixels(options) {
    const { data, width, height } = options;
    const newWidth = Math.round(width / 2);
    const newHeight = Math.round(height / 2);
    const newData = new Uint8Array(newWidth * newHeight * 4);
    for (let y = 0; y < newHeight; y++) {
        for (let x = 0; x < newWidth; x++) {
            for (let c = 0; c < 4; c++) {
                newData[(y * newWidth + x) * 4 + c] = data[(y * 2 * width + x * 2) * 4 + c];
            }
        }
    }
    return { data: newData, width: newWidth, height: newHeight };
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/debug/spector.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  initializeSpectorJS: function() { return initializeSpectorJS; },
  loadSpectorJS: function() { return loadSpectorJS; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/load-file.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

const DEFAULT_SPECTOR_PROPS = {
    spector: _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.get('spector') || _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.get('spectorjs')
};
// https://github.com/BabylonJS/Spector.js#basic-usage
const SPECTOR_CDN_URL = 'https://cdn.jsdelivr.net/npm/spectorjs@0.9.30/dist/spector.bundle.js';
const LOG_LEVEL = 1;
let spector = null;
let initialized = false;
/** Loads spector from CDN if not already installed */
async function loadSpectorJS(props) {
    if (!globalThis.SPECTOR) {
        try {
            await (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.loadScript)(SPECTOR_CDN_URL);
        }
        catch (error) {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.warn(String(error));
        }
    }
}
function initializeSpectorJS(props) {
    props = { ...DEFAULT_SPECTOR_PROPS, ...props };
    if (!props?.spector) {
        return null;
    }
    if (!spector && globalThis.SPECTOR) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.probe(LOG_LEVEL, 'SPECTOR found and initialized')();
        spector = new globalThis.SPECTOR.Spector();
        if (globalThis.luma) {
            globalThis.luma.spector = spector;
        }
    }
    if (!spector) {
        return null;
    }
    if (!initialized) {
        initialized = true;
        // enables recording some extra information merged in the capture like texture memory sizes and formats
        spector.spyCanvases();
        // A callback when results are ready
        spector?.onCaptureStarted.add((capture) => _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.info('Spector capture started:', capture)());
        spector?.onCapture.add((capture) => {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.info('Spector capture complete:', capture)();
            // Use undocumented Spector API to open the UI with our capture
            // See https://github.com/BabylonJS/Spector.js/blob/767ad1195a25b85a85c381f400eb50a979239eca/src/spector.ts#L124
            spector?.getResultUI();
            spector?.resultView.display();
            spector?.resultView.addCapture(capture);
        });
    }
    if (props?.canvas) {
        // @ts-expect-error If spector is specified as a canvas id, only monitor that canvas
        if (typeof props.spector === 'string' && props.spector !== props.canvas.id) {
            return spector;
        }
        // capture startup
        // spector?.captureCanvas(props?.canvas);
        spector?.startCapture(props?.canvas, 500); // 500 commands
        new Promise(resolve => setTimeout(resolve, 2000)).then(_ => {
            _luma_gl_core__WEBPACK_IMPORTED_MODULE_0__.log.info('Spector capture stopped after 2 seconds')();
            spector?.stopCapture();
            // spector?.displayUI();
        });
    }
    return spector;
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/debug/webgl-developer-tools.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  loadWebGLDeveloperTools: function() { return loadWebGLDeveloperTools; },
  makeDebugContext: function() { return makeDebugContext; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/load-file.js");
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/log.js");
/* harmony import */var _luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+constants@9.0.17/node_modules/@luma.gl/constants/dist/webgl-constants.js");
/* harmony import */var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-browser.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

// Rename constant to prevent inlining. We need the full set of constants for generating debug strings.


const WEBGL_DEBUG_CDN_URL = 'https://unpkg.com/webgl-debug@2.0.1/index.js';
// Helper to get shared context data
function getWebGLContextData(gl) {
    gl.luma = gl.luma || {};
    return gl.luma;
}
/**
 * Loads Khronos WebGLDeveloperTools from CDN if not already installed
 * const WebGLDebugUtils = require('webgl-debug');
 * @see https://github.com/KhronosGroup/WebGLDeveloperTools
 * @see https://github.com/vorg/webgl-debug
 */
async function loadWebGLDeveloperTools() {
    if ((0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)() && !globalThis.WebGLDebugUtils) {
        globalThis.global = globalThis.global || globalThis;
        // @ts-expect-error Developer tools expects global to be set
        globalThis.global.module = {};
        await (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_1__.loadScript)(WEBGL_DEBUG_CDN_URL);
    }
}
// Returns (a potentially new) context with debug instrumentation turned off or on.
// Note that this actually returns a new context
function makeDebugContext(gl, props = {}) {
    // Return null to ensure we don't try to create a context in this case (TODO what case is that?)
    if (!gl) {
        return null;
    }
    return props.debug ? getDebugContext(gl, props) : getRealContext(gl);
}
// Returns the real context from either of the real/debug contexts
function getRealContext(gl) {
    const data = getWebGLContextData(gl);
    // If the context has a realContext member, it is a debug context so return the realContext
    return data.realContext ? data.realContext : gl;
}
// Returns the debug context from either of the real/debug contexts
function getDebugContext(gl, props) {
    if (!globalThis.WebGLDebugUtils) {
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.warn('webgl-debug not loaded')();
        return gl;
    }
    const data = getWebGLContextData(gl);
    // If this already has a debug context, return it.
    if (data.debugContext) {
        return data.debugContext;
    }
    // Create a new debug context
    globalThis.WebGLDebugUtils.init({ ..._luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__.GL, ...gl });
    const glDebug = globalThis.WebGLDebugUtils.makeDebugContext(gl, onGLError.bind(null, props), onValidateGLFunc.bind(null, props));
    // Make sure we have all WebGL2 and extension constants (todo dynamic import to circumvent minification?)
    for (const key in _luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__.GL) {
        if (!(key in glDebug) && typeof _luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__.GL[key] === 'number') {
            glDebug[key] = _luma_gl_constants__WEBPACK_IMPORTED_MODULE_3__.GL[key];
        }
    }
    // Ensure we have a clean prototype on the instrumented object
    // Note: setPrototypeOf does come with perf warnings, but we already take a bigger perf reduction
    // by synchronizing the WebGL errors after each WebGL call.
    class WebGLDebugContext {
    }
    Object.setPrototypeOf(glDebug, Object.getPrototypeOf(gl));
    Object.setPrototypeOf(WebGLDebugContext, glDebug);
    const debugContext = Object.create(WebGLDebugContext);
    // Store the debug context
    data.realContext = gl;
    data.debugContext = debugContext;
    debugContext.debug = true;
    // Return it
    return debugContext;
}
// DEBUG TRACING
function getFunctionString(functionName, functionArgs) {
    // Cover bug in webgl-debug-tools
    functionArgs = Array.from(functionArgs).map(arg => (arg === undefined ? 'undefined' : arg));
    let args = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, functionArgs);
    args = `${args.slice(0, 100)}${args.length > 100 ? '...' : ''}`;
    return `gl.${functionName}(${args})`;
}
function onGLError(props, err, functionName, args) {
    // Cover bug in webgl-debug-tools
    args = Array.from(args).map(arg => (arg === undefined ? 'undefined' : arg));
    const errorMessage = globalThis.WebGLDebugUtils.glEnumToString(err);
    const functionArgs = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, args);
    const message = `${errorMessage} in gl.${functionName}(${functionArgs})`;
    _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.error(message)();
    debugger; // eslint-disable-line
    if (props.throwOnError) {
        throw new Error(message);
    }
}
// Don't generate function string until it is needed
function onValidateGLFunc(props, functionName, functionArgs) {
    let functionString = '';
    if (_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.level >= 1) {
        functionString = getFunctionString(functionName, functionArgs);
        _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.log(1, functionString)();
    }
    // If array of breakpoint strings supplied, check if any of them is contained in current GLEnum function
    if (props.break && props.break.length > 0) {
        functionString = functionString || getFunctionString(functionName, functionArgs);
        const isBreakpoint = props.break.every((breakOn) => functionString.indexOf(breakOn) !== -1);
        if (isBreakpoint) {
            debugger; // eslint-disable-line
        }
    }
    for (const arg of functionArgs) {
        if (arg === undefined) {
            functionString = functionString || getFunctionString(functionName, functionArgs);
            if (props.throwOnError) {
                throw new Error(`Undefined argument: ${functionString}`);
            }
            else {
                _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.log.error(`Undefined argument: ${functionString}`)();
                debugger; // eslint-disable-line
            }
        }
    }
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/helpers/create-browser-context.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createBrowserContext: function() { return createBrowserContext; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
const DEFAULT_CONTEXT_PROPS = {
    powerPreference: 'high-performance', // After all, most apps are using WebGL for performance reasons
    // eslint-disable-next-line no-console
    onContextLost: () => console.error('WebGL context lost'),
    // eslint-disable-next-line no-console
    onContextRestored: () => console.info('WebGL context restored')
};
/**
 * Create a WebGL context for a canvas
 * Note calling this multiple time on the same canvas does return the same context
 * @param canvas A canvas element or offscreen canvas
 */
function createBrowserContext(canvas, props) {
    props = { ...DEFAULT_CONTEXT_PROPS, ...props };
    // Try to extract any extra information about why context creation failed
    let errorMessage = null;
    const onCreateError = error => (errorMessage = error.statusMessage || errorMessage);
    canvas.addEventListener('webglcontextcreationerror', onCreateError, false);
    // Create the desired context
    let gl = null;
    // props.failIfMajorPerformanceCaveat = true;
    // We require webgl2 context
    gl ||= canvas.getContext('webgl2', props);
    // Software GPU
    // props.failIfMajorPerformanceCaveat = false;
    // if (!gl && props.webgl1) {
    //   gl = canvas.getContext('webgl', props);
    // }
    // TODO are we removing this listener before giving it a chance to fire?
    canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);
    if (!gl) {
        throw new Error(`Failed to create WebGL context: ${errorMessage || 'Unknown error'}`);
    }
    if (props.onContextLost) {
        // Carefully extract and wrap callbacks to prevent addEventListener from rebinding them.
        const { onContextLost } = props;
        canvas.addEventListener('webglcontextlost', (event) => onContextLost(event), false);
    }
    if (props.onContextRestored) {
        // Carefully extract and wrap callbacks to prevent addEventListener from rebinding them.
        const { onContextRestored } = props;
        canvas.addEventListener('webglcontextrestored', (event) => onContextRestored(event), false);
    }
    return gl;
}
/* TODO - can we call this asynchronously to catch the error events?
export async function createBrowserContextAsync(canvas: HTMLCanvasElement | OffscreenCanvas, props: ContextProps): Promise<WebGL2RenderingContext> {
  props = {...DEFAULT_CONTEXT_PROPS, ...props};

 // Try to extract any extra information about why context creation failed
 let errorMessage = null;
 const onCreateError = (error) => (errorMessage = error.statusMessage || errorMessage);
 canvas.addEventListener('webglcontextcreationerror', onCreateError, false);

 const gl = createBrowserContext(canvas, props);

 // Give the listener a chance to fire
 await new Promise(resolve => setTimeout(resolve, 0));

 canvas.removeEventListener('webglcontextcreationerror', onCreateError, false);

 return gl;
}
*/


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getWebGLExtension: function() { return getWebGLExtension; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** Ensure extensions are only requested once */
function getWebGLExtension(gl, name, extensions) {
    if (extensions[name] === undefined) {
        extensions[name] = gl.getExtension(name) || null;
    }
    return extensions[name];
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getGLParameters: function() { return getGLParameters; },
  resetGLParameters: function() { return resetGLParameters; },
  setGLParameters: function() { return setGLParameters; }
});
/* harmony import */var _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors

/**
 * Sets any GL parameter regardless of function (gl.blendMode, ...)
 *
 * @note requires a `cache` object to be set on the context (gl.state.cache)
 * This object is used to fill in any missing values for composite setter functions
 */
function setGLParameters(gl, parameters) {
    if (isObjectEmpty(parameters)) {
        return;
    }
    const compositeSetters = {};
    // HANDLE PRIMITIVE SETTERS (and make note of any composite setters)
    for (const key in parameters) {
        const glConstant = Number(key);
        const setter = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_SETTERS[key];
        if (setter) {
            // Composite setters should only be called once, so save them
            if (typeof setter === 'string') {
                compositeSetters[setter] = true;
            }
            else {
                // if (gl[glConstant] !== undefined) {
                // TODO - added above check since this is being called on WebGL2 parameters in WebGL1...
                // TODO - deep equal on values? only call setter if value has changed?
                // NOTE - the setter will automatically update this.state
                setter(gl, parameters[key], glConstant);
            }
        }
    }
    // HANDLE COMPOSITE SETTERS
    // NOTE: any non-provided values needed by composite setters are filled in from state cache
    // The cache parameter is automatically retrieved from the context
    // This depends on `trackContextState`, which is technically a "circular" dependency.
    // But it is too inconvenient to always require a cache parameter here.
    // This is the ONLY external dependency in this module/
    // @ts-expect-error
    const cache = gl.state && gl.state.cache;
    if (cache) {
        for (const key in compositeSetters) {
            // TODO - avoid calling composite setters if values have not changed.
            const compositeSetter = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_COMPOSITE_PARAMETER_SETTERS[key];
            // Note - if `trackContextState` has been called,
            // the setter will automatically update this.state.cache
            compositeSetter(gl, parameters, cache);
        }
    }
    // Add a log for the else case?
}
/**
 * Reads the entire WebGL state from a context

  // default to querying all parameters

  * @returns - a newly created map, with values keyed by GL parameters
 *
 * @note Copies the state from a context (gl.getParameter should not be overriden)
 * Reads the entire WebGL state from a context
 *
 * @note This can generates a huge amount of synchronous driver roundtrips and should be
 * considered a very slow operation, to be used only if/when a context already manipulated
 * by external code needs to be synchronized for the first time
 */
function getGLParameters(gl, parameters = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_DEFAULTS) {
    // support both arrays of parameters and objects (keys represent parameters)
    if (typeof parameters === 'number') {
        // single GL enum
        const key = parameters;
        const getter = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_GETTERS[key];
        return getter ? getter(gl, key) : gl.getParameter(key);
    }
    const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);
    const state = {};
    for (const key of parameterKeys) {
        const getter = _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_GETTERS[key];
        state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
    }
    return state;
}
/**
 * Reset all parameters to a (almost) pure context state
 * @note viewport and scissor will be set to the values in GL_PARAMETER_DEFAULTS,
 * NOT the canvas size dimensions, so they will have to be properly set after
 * calling this function.
 */
function resetGLParameters(gl) {
    setGLParameters(gl, _webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_0__.GL_PARAMETER_DEFAULTS);
}
// Helpers
// Returns true if given object is empty, false otherwise.
function isObjectEmpty(object) {
    // @ts-ignore dummy key variable
    for (const key in object) {
        return false;
    }
    return true;
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  GL_COMPOSITE_PARAMETER_SETTERS: function() { return GL_COMPOSITE_PARAMETER_SETTERS; },
  GL_HOOKED_SETTERS: function() { return GL_HOOKED_SETTERS; },
  GL_PARAMETER_DEFAULTS: function() { return GL_PARAMETER_DEFAULTS; },
  GL_PARAMETER_GETTERS: function() { return GL_PARAMETER_GETTERS; },
  GL_PARAMETER_SETTERS: function() { return GL_PARAMETER_SETTERS; },
  NON_CACHE_PARAMETERS: function() { return NON_CACHE_PARAMETERS; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Tables describing WebGL parameters

// DEFAULT SETTINGS - FOR FAST CACHE INITIALIZATION AND CONTEXT RESETS
/* eslint-disable no-shadow */
const GL_PARAMETER_DEFAULTS = {
    [3042]: false,
    [32773]: new Float32Array([0, 0, 0, 0]),
    [32777]: 32774,
    [34877]: 32774,
    [32969]: 1,
    [32968]: 0,
    [32971]: 1,
    [32970]: 0,
    [3106]: new Float32Array([0, 0, 0, 0]), // TBD
    [3107]: [true, true, true, true],
    [2884]: false,
    [2885]: 1029,
    [2929]: false,
    [2931]: 1,
    [2932]: 513,
    [2928]: new Float32Array([0, 1]), // TBD
    [2930]: true,
    [3024]: true,
    [35725]: null,
    // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.
    [36006]: null,
    [36007]: null,
    [34229]: null,
    [34964]: null,
    [2886]: 2305,
    [33170]: 4352,
    [2849]: 1,
    [32823]: false,
    [32824]: 0,
    [10752]: 0,
    [32926]: false,
    [32928]: false,
    [32938]: 1.0,
    [32939]: false,
    [3089]: false,
    // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box
    [3088]: new Int32Array([0, 0, 1024, 1024]),
    [2960]: false,
    [2961]: 0,
    [2968]: 0xffffffff,
    [36005]: 0xffffffff,
    [2962]: 519,
    [2967]: 0,
    [2963]: 0xffffffff,
    [34816]: 519,
    [36003]: 0,
    [36004]: 0xffffffff,
    [2964]: 7680,
    [2965]: 7680,
    [2966]: 7680,
    [34817]: 7680,
    [34818]: 7680,
    [34819]: 7680,
    // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.
    [2978]: [0, 0, 1024, 1024],
    [36389]: null,
    [36662]: null,
    [36663]: null,
    [35053]: null,
    [35055]: null,
    [35723]: 4352,
    [36010]: null,
    [35977]: false,
    [3333]: 4,
    [3317]: 4,
    [37440]: false,
    [37441]: false,
    [37443]: 37444,
    [3330]: 0,
    [3332]: 0,
    [3331]: 0,
    [3314]: 0,
    [32878]: 0,
    [3316]: 0,
    [3315]: 0,
    [32877]: 0
};
// SETTER TABLES - ENABLES SETTING ANY PARAMETER WITH A COMMON API
const enable = (gl, value, key) => value ? gl.enable(key) : gl.disable(key);
const hint = (gl, value, key) => gl.hint(key, value);
const pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);
const bindFramebuffer = (gl, value, key) => {
    const target = key === 36006 ? 36009 : 36008;
    return gl.bindFramebuffer(target, value);
};
const bindBuffer = (gl, value, key) => {
    const bindingMap = {
        [34964]: 34962,
        [36662]: 36662,
        [36663]: 36663,
        [35053]: 35051,
        [35055]: 35052
    };
    const glTarget = bindingMap[key];
    gl.bindBuffer(glTarget, value);
};
// Utility
function isArray(array) {
    return Array.isArray(array) || (ArrayBuffer.isView(array) && !(array instanceof DataView));
}
// Map from WebGL parameter names to corresponding WebGL setter functions
// WegGL constants are read by parameter names, but set by function names
// NOTE: When value type is a string, it will be handled by 'GL_COMPOSITE_PARAMETER_SETTERS'
const GL_PARAMETER_SETTERS = {
    [3042]: enable,
    [32773]: (gl, value) => gl.blendColor(...value),
    [32777]: 'blendEquation',
    [34877]: 'blendEquation',
    [32969]: 'blendFunc',
    [32968]: 'blendFunc',
    [32971]: 'blendFunc',
    [32970]: 'blendFunc',
    [3106]: (gl, value) => gl.clearColor(...value),
    [3107]: (gl, value) => gl.colorMask(...value),
    [2884]: enable,
    [2885]: (gl, value) => gl.cullFace(value),
    [2929]: enable,
    [2931]: (gl, value) => gl.clearDepth(value),
    [2932]: (gl, value) => gl.depthFunc(value),
    [2928]: (gl, value) => gl.depthRange(...value),
    [2930]: (gl, value) => gl.depthMask(value),
    [3024]: enable,
    [35723]: hint,
    [35725]: (gl, value) => gl.useProgram(value),
    [36007]: (gl, value) => gl.bindRenderbuffer(36161, value),
    [36389]: (gl, value) => gl.bindTransformFeedback?.(36386, value),
    [34229]: (gl, value) => gl.bindVertexArray(value),
    // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.
    [36006]: bindFramebuffer,
    [36010]: bindFramebuffer,
    // Buffers
    [34964]: bindBuffer,
    [36662]: bindBuffer,
    [36663]: bindBuffer,
    [35053]: bindBuffer,
    [35055]: bindBuffer,
    [2886]: (gl, value) => gl.frontFace(value),
    [33170]: hint,
    [2849]: (gl, value) => gl.lineWidth(value),
    [32823]: enable,
    [32824]: 'polygonOffset',
    [10752]: 'polygonOffset',
    [35977]: enable,
    [32926]: enable,
    [32928]: enable,
    [32938]: 'sampleCoverage',
    [32939]: 'sampleCoverage',
    [3089]: enable,
    [3088]: (gl, value) => gl.scissor(...value),
    [2960]: enable,
    [2961]: (gl, value) => gl.clearStencil(value),
    [2968]: (gl, value) => gl.stencilMaskSeparate(1028, value),
    [36005]: (gl, value) => gl.stencilMaskSeparate(1029, value),
    [2962]: 'stencilFuncFront',
    [2967]: 'stencilFuncFront',
    [2963]: 'stencilFuncFront',
    [34816]: 'stencilFuncBack',
    [36003]: 'stencilFuncBack',
    [36004]: 'stencilFuncBack',
    [2964]: 'stencilOpFront',
    [2965]: 'stencilOpFront',
    [2966]: 'stencilOpFront',
    [34817]: 'stencilOpBack',
    [34818]: 'stencilOpBack',
    [34819]: 'stencilOpBack',
    [2978]: (gl, value) => gl.viewport(...value),
    // WEBGL2 EXTENSIONS
    // EXT_depth_clamp https://registry.khronos.org/webgl/extensions/EXT_depth_clamp/
    [34383]: enable,
    // WEBGL_provoking_vertex https://registry.khronos.org/webgl/extensions/WEBGL_provoking_vertex/
    // [GL.PROVOKING_VERTEX_WEBL]: TODO - extension function needed
    // WEBGL_polygon_mode https://registry.khronos.org/webgl/extensions/WEBGL_polygon_mode/
    // POLYGON_MODE_WEBGL  TODO - extension function needed
    [10754]: enable,
    // WEBGL_clip_cull_distance https://registry.khronos.org/webgl/extensions/WEBGL_clip_cull_distance/
    [12288]: enable,
    [12289]: enable,
    [12290]: enable,
    [12291]: enable,
    [12292]: enable,
    [12293]: enable,
    [12294]: enable,
    [12295]: enable,
    // PIXEL PACK/UNPACK MODES
    [3333]: pixelStorei,
    [3317]: pixelStorei,
    [37440]: pixelStorei,
    [37441]: pixelStorei,
    [37443]: pixelStorei,
    [3330]: pixelStorei,
    [3332]: pixelStorei,
    [3331]: pixelStorei,
    [3314]: pixelStorei,
    [32878]: pixelStorei,
    [3316]: pixelStorei,
    [3315]: pixelStorei,
    [32877]: pixelStorei,
    // Function-style setters
    framebuffer: (gl, framebuffer) => {
        // accepts 1) a WebGLFramebuffer 2) null (default framebuffer), or 3) luma.gl Framebuffer class
        // framebuffer is null when restoring to default framebuffer, otherwise use the WebGL handle.
        const handle = framebuffer && 'handle' in framebuffer ? framebuffer.handle : framebuffer;
        return gl.bindFramebuffer(36160, handle);
    },
    blend: (gl, value) => value ? gl.enable(3042) : gl.disable(3042),
    blendColor: (gl, value) => gl.blendColor(...value),
    blendEquation: (gl, args) => {
        const separateModes = typeof args === 'number' ? [args, args] : args;
        gl.blendEquationSeparate(...separateModes);
    },
    blendFunc: (gl, args) => {
        const separateFuncs = args?.length === 2 ? [...args, ...args] : args;
        gl.blendFuncSeparate(...separateFuncs);
    },
    clearColor: (gl, value) => gl.clearColor(...value),
    clearDepth: (gl, value) => gl.clearDepth(value),
    clearStencil: (gl, value) => gl.clearStencil(value),
    colorMask: (gl, value) => gl.colorMask(...value),
    cull: (gl, value) => value ? gl.enable(2884) : gl.disable(2884),
    cullFace: (gl, value) => gl.cullFace(value),
    depthTest: (gl, value) => value ? gl.enable(2929) : gl.disable(2929),
    depthFunc: (gl, value) => gl.depthFunc(value),
    depthMask: (gl, value) => gl.depthMask(value),
    depthRange: (gl, value) => gl.depthRange(...value),
    dither: (gl, value) => value ? gl.enable(3024) : gl.disable(3024),
    derivativeHint: (gl, value) => {
        // gl1: 'OES_standard_derivatives'
        gl.hint(35723, value);
    },
    frontFace: (gl, value) => gl.frontFace(value),
    mipmapHint: (gl, value) => gl.hint(33170, value),
    lineWidth: (gl, value) => gl.lineWidth(value),
    polygonOffsetFill: (gl, value) => value ? gl.enable(32823) : gl.disable(32823),
    polygonOffset: (gl, value) => gl.polygonOffset(...value),
    sampleCoverage: (gl, value) => gl.sampleCoverage(...value),
    scissorTest: (gl, value) => value ? gl.enable(3089) : gl.disable(3089),
    scissor: (gl, value) => gl.scissor(...value),
    stencilTest: (gl, value) => value ? gl.enable(2960) : gl.disable(2960),
    stencilMask: (gl, value) => {
        value = isArray(value) ? value : [value, value];
        const [mask, backMask] = value;
        gl.stencilMaskSeparate(1028, mask);
        gl.stencilMaskSeparate(1029, backMask);
    },
    stencilFunc: (gl, args) => {
        args = isArray(args) && args.length === 3 ? [...args, ...args] : args;
        const [func, ref, mask, backFunc, backRef, backMask] = args;
        gl.stencilFuncSeparate(1028, func, ref, mask);
        gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);
    },
    stencilOp: (gl, args) => {
        args = isArray(args) && args.length === 3 ? [...args, ...args] : args;
        const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;
        gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
        gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);
    },
    viewport: (gl, value) => gl.viewport(...value)
};
function getValue(glEnum, values, cache) {
    return values[glEnum] !== undefined ? values[glEnum] : cache[glEnum];
}
// COMPOSITE_WEBGL_PARAMETER_
const GL_COMPOSITE_PARAMETER_SETTERS = {
    blendEquation: (gl, values, cache) => gl.blendEquationSeparate(getValue(32777, values, cache), getValue(34877, values, cache)),
    blendFunc: (gl, values, cache) => gl.blendFuncSeparate(getValue(32969, values, cache), getValue(32968, values, cache), getValue(32971, values, cache), getValue(32970, values, cache)),
    polygonOffset: (gl, values, cache) => gl.polygonOffset(getValue(32824, values, cache), getValue(10752, values, cache)),
    sampleCoverage: (gl, values, cache) => gl.sampleCoverage(getValue(32938, values, cache), getValue(32939, values, cache)),
    stencilFuncFront: (gl, values, cache) => gl.stencilFuncSeparate(1028, getValue(2962, values, cache), getValue(2967, values, cache), getValue(2963, values, cache)),
    stencilFuncBack: (gl, values, cache) => gl.stencilFuncSeparate(1029, getValue(34816, values, cache), getValue(36003, values, cache), getValue(36004, values, cache)),
    stencilOpFront: (gl, values, cache) => gl.stencilOpSeparate(1028, getValue(2964, values, cache), getValue(2965, values, cache), getValue(2966, values, cache)),
    stencilOpBack: (gl, values, cache) => gl.stencilOpSeparate(1029, getValue(34817, values, cache), getValue(34818, values, cache), getValue(34819, values, cache))
};
// Setter functions intercepted for cache updates
const GL_HOOKED_SETTERS = {
    // GENERIC SETTERS
    enable: (update, capability) => update({
        [capability]: true
    }),
    disable: (update, capability) => update({
        [capability]: false
    }),
    pixelStorei: (update, pname, value) => update({
        [pname]: value
    }),
    hint: (update, pname, hint) => update({
        [pname]: hint
    }),
    // SPECIFIC SETTERS
    useProgram: (update, value) => update({
        [35725]: value
    }),
    bindRenderbuffer: (update, target, value) => update({
        [36007]: value
    }),
    bindTransformFeedback: (update, target, value) => update({
        [36389]: value
    }),
    bindVertexArray: (update, value) => update({
        [34229]: value
    }),
    bindFramebuffer: (update, target, framebuffer) => {
        switch (target) {
            case 36160:
                return update({
                    [36006]: framebuffer,
                    [36010]: framebuffer
                });
            case 36009:
                return update({ [36006]: framebuffer });
            case 36008:
                return update({ [36010]: framebuffer });
            default:
                return null;
        }
    },
    bindBuffer: (update, target, buffer) => {
        const pname = {
            [34962]: [34964],
            [36662]: [36662],
            [36663]: [36663],
            [35051]: [35053],
            [35052]: [35055]
        }[target];
        if (pname) {
            return update({ [pname]: buffer });
        }
        // targets that should not be cached
        return { valueChanged: true };
    },
    blendColor: (update, r, g, b, a) => update({
        [32773]: new Float32Array([r, g, b, a])
    }),
    blendEquation: (update, mode) => update({
        [32777]: mode,
        [34877]: mode
    }),
    blendEquationSeparate: (update, modeRGB, modeAlpha) => update({
        [32777]: modeRGB,
        [34877]: modeAlpha
    }),
    blendFunc: (update, src, dst) => update({
        [32969]: src,
        [32968]: dst,
        [32971]: src,
        [32970]: dst
    }),
    blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) => update({
        [32969]: srcRGB,
        [32968]: dstRGB,
        [32971]: srcAlpha,
        [32970]: dstAlpha
    }),
    clearColor: (update, r, g, b, a) => update({
        [3106]: new Float32Array([r, g, b, a])
    }),
    clearDepth: (update, depth) => update({
        [2931]: depth
    }),
    clearStencil: (update, s) => update({
        [2961]: s
    }),
    colorMask: (update, r, g, b, a) => update({
        [3107]: [r, g, b, a]
    }),
    cullFace: (update, mode) => update({
        [2885]: mode
    }),
    depthFunc: (update, func) => update({
        [2932]: func
    }),
    depthRange: (update, zNear, zFar) => update({
        [2928]: new Float32Array([zNear, zFar])
    }),
    depthMask: (update, mask) => update({
        [2930]: mask
    }),
    frontFace: (update, face) => update({
        [2886]: face
    }),
    lineWidth: (update, width) => update({
        [2849]: width
    }),
    polygonOffset: (update, factor, units) => update({
        [32824]: factor,
        [10752]: units
    }),
    sampleCoverage: (update, value, invert) => update({
        [32938]: value,
        [32939]: invert
    }),
    scissor: (update, x, y, width, height) => update({
        [3088]: new Int32Array([x, y, width, height])
    }),
    stencilMask: (update, mask) => update({
        [2968]: mask,
        [36005]: mask
    }),
    stencilMaskSeparate: (update, face, mask) => update({
        [face === 1028 ? 2968 : 36005]: mask
    }),
    stencilFunc: (update, func, ref, mask) => update({
        [2962]: func,
        [2967]: ref,
        [2963]: mask,
        [34816]: func,
        [36003]: ref,
        [36004]: mask
    }),
    stencilFuncSeparate: (update, face, func, ref, mask) => update({
        [face === 1028 ? 2962 : 34816]: func,
        [face === 1028 ? 2967 : 36003]: ref,
        [face === 1028 ? 2963 : 36004]: mask
    }),
    stencilOp: (update, fail, zfail, zpass) => update({
        [2964]: fail,
        [2965]: zfail,
        [2966]: zpass,
        [34817]: fail,
        [34818]: zfail,
        [34819]: zpass
    }),
    stencilOpSeparate: (update, face, fail, zfail, zpass) => update({
        [face === 1028 ? 2964 : 34817]: fail,
        [face === 1028 ? 2965 : 34818]: zfail,
        [face === 1028 ? 2966 : 34819]: zpass
    }),
    viewport: (update, x, y, width, height) => update({
        [2978]: [x, y, width, height]
    })
};
// GETTER TABLE - FOR READING OUT AN ENTIRE CONTEXT
const isEnabled = (gl, key) => gl.isEnabled(key);
// Exceptions for any keys that cannot be queried by gl.getParameters
const GL_PARAMETER_GETTERS = {
    [3042]: isEnabled,
    [2884]: isEnabled,
    [2929]: isEnabled,
    [3024]: isEnabled,
    [32823]: isEnabled,
    [32926]: isEnabled,
    [32928]: isEnabled,
    [3089]: isEnabled,
    [2960]: isEnabled,
    [35977]: isEnabled
};
const NON_CACHE_PARAMETERS = new Set([
    34016,
    36388,
    36387,
    35983,
    35368,
    34965,
    35739,
    35738,
    3074,
    34853,
    34854,
    34855,
    34856,
    34857,
    34858,
    34859,
    34860,
    34861,
    34862,
    34863,
    34864,
    34865,
    34866,
    34867,
    34868,
    35097,
    32873,
    35869,
    32874,
    34068
]);


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/deep-array-equal.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  deepArrayEqual: function() { return deepArrayEqual; }
});
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
/** deeply compare two arrays */
function deepArrayEqual(x, y) {
    if (x === y) {
        return true;
    }
    const isArrayX = Array.isArray(x) || ArrayBuffer.isView(x);
    const isArrayY = Array.isArray(y) || ArrayBuffer.isView(y);
    // @ts-expect-error TODO fix
    if (isArrayX && isArrayY && x.length === y.length) {
        // @ts-expect-error TODO fix
        for (let i = 0; i < x.length; ++i) {
            if (x[i] !== y[i]) {
                return false;
            }
        }
        return true;
    }
    return false;
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  popContextState: function() { return popContextState; },
  pushContextState: function() { return pushContextState; },
  trackContextState: function() { return trackContextState; }
});
/* harmony import */var _luma_gl_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+core@9.0.17/node_modules/@luma.gl/core/dist/utils/assert.js");
/* harmony import */var _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js");
/* harmony import */var _parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
/* harmony import */var _deep_array_equal_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/deep-array-equal.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors
// Support for listening to context state changes and intercepting state queries
// NOTE: this system does not handle buffer bindings




// HELPER CLASS - GLState
/* eslint-disable no-shadow */
class GLState {
    gl;
    program = null;
    stateStack = [];
    enable = true;
    cache;
    log;
    constructor(gl, { copyState = false, // Copy cache from params (slow) or initialize from WebGL defaults (fast)
    log = () => { } // Logging function, called when gl parameter change calls are actually issued
     } = {}) {
        this.gl = gl;
        this.cache = copyState ? (0,_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_0__.getGLParameters)(gl) : Object.assign({}, _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__.GL_PARAMETER_DEFAULTS);
        this.log = log;
        this._updateCache = this._updateCache.bind(this);
        Object.seal(this);
    }
    push(values = {}) {
        this.stateStack.push({});
    }
    pop() {
        (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(this.stateStack.length > 0);
        // Use the saved values in the state stack to restore parameters
        const oldValues = this.stateStack[this.stateStack.length - 1];
        (0,_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_0__.setGLParameters)(this.gl, oldValues);
        // Don't pop until we have reset parameters (to make sure other "stack frames" are not affected)
        this.stateStack.pop();
    }
    /**
    // interceptor for context set functions - update our cache and our stack
    // values (Object) - the key values for this setter
     * @param values
     * @returns
     */
    _updateCache(values) {
        let valueChanged = false;
        let oldValue; // = undefined
        const oldValues = this.stateStack.length > 0 ? this.stateStack[this.stateStack.length - 1] : null;
        for (const key in values) {
            (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(key !== undefined);
            const value = values[key];
            const cached = this.cache[key];
            // Check that value hasn't already been shadowed
            if (!(0,_deep_array_equal_js__WEBPACK_IMPORTED_MODULE_3__.deepArrayEqual)(value, cached)) {
                valueChanged = true;
                oldValue = cached;
                // First, save current value being shadowed
                // If a state stack frame is active, save the current parameter values for pop
                // but first check that value hasn't already been shadowed and saved
                if (oldValues && !(key in oldValues)) {
                    oldValues[key] = cached;
                }
                // Save current value being shadowed
                this.cache[key] = value;
            }
        }
        return { valueChanged, oldValue };
    }
}
function getContextState(gl) {
    // @ts-expect-error
    return gl.state;
}
// PUBLIC API
/**
 * Initialize WebGL state caching on a context
 * can be called multiple times to enable/disable
 *
 * @note After calling this function, context state will be cached
 * gl.state.push() and gl.state.pop() will be available for saving,
 * temporarily modifying, and then restoring state.
 */
function trackContextState(gl, options) {
    const { enable = true, copyState } = options;
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(copyState !== undefined);
    // @ts-expect-error
    if (!gl.state) {
        // @ts-ignore
        // const {polyfillContext} = global_;
        // if (polyfillContext) {
        //   polyfillContext(gl);
        // }
        // Create a state cache
        // @ts-expect-error
        gl.state = new GLState(gl, { copyState });
        installProgramSpy(gl);
        // intercept all setter functions in the table
        for (const key in _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__.GL_HOOKED_SETTERS) {
            const setter = _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__.GL_HOOKED_SETTERS[key];
            installSetterSpy(gl, key, setter);
        }
        // intercept all getter functions in the table
        installGetterOverride(gl, 'getParameter');
        installGetterOverride(gl, 'isEnabled');
    }
    const glState = getContextState(gl);
    glState.enable = enable;
    return gl;
}
/**
 * Saves current WebGL context state onto an internal per-context stack
 */
function pushContextState(gl) {
    let glState = getContextState(gl);
    if (!glState) {
        trackContextState(gl, { copyState: false });
        glState = getContextState(gl);
    }
    glState.push();
}
/**
 * Restores previously saved WebGL context state
 */
function popContextState(gl) {
    const glState = getContextState(gl);
    (0,_luma_gl_core__WEBPACK_IMPORTED_MODULE_2__.assert)(glState);
    glState.pop();
}
// HELPER FUNCTIONS - INSTALL GET/SET INTERCEPTORS (SPYS) ON THE CONTEXT
/**
// Overrides a WebGL2RenderingContext state "getter" function
// to return values directly from cache
 * @param gl
 * @param functionName
 */
function installGetterOverride(gl, functionName) {
    // Get the original function from the WebGL2RenderingContext
    const originalGetterFunc = gl[functionName].bind(gl);
    // Wrap it with a spy so that we can update our state cache when it gets called
    gl[functionName] = function get(pname) {
        if (pname === undefined || _parameters_webgl_parameter_tables_js__WEBPACK_IMPORTED_MODULE_1__.NON_CACHE_PARAMETERS.has(pname)) {
            // Invalid or blacklisted parameter, do not cache
            return originalGetterFunc(pname);
        }
        const glState = getContextState(gl);
        if (!(pname in glState.cache)) {
            // WebGL limits are not prepopulated in the cache, call the original getter when first queried.
            glState.cache[pname] = originalGetterFunc(pname);
        }
        // Optionally call the original function to do a "hard" query from the WebGL2RenderingContext
        return glState.enable
            ? // Call the getter the params so that it can e.g. serve from a cache
                glState.cache[pname]
            : // Optionally call the original function to do a "hard" query from the WebGL2RenderingContext
                originalGetterFunc(pname);
    };
    // Set the name of this anonymous function to help in debugging and profiling
    Object.defineProperty(gl[functionName], 'name', {
        value: `${functionName}-from-cache`,
        configurable: false
    });
}
/**
// Overrides a WebGL2RenderingContext state "setter" function
// to call a setter spy before the actual setter. Allows us to keep a cache
// updated with a copy of the WebGL context state.
 * @param gl
 * @param functionName
 * @param setter
 * @returns
 */
function installSetterSpy(gl, functionName, setter) {
    // Get the original function from the WebGL2RenderingContext
    if (!gl[functionName]) {
        // TODO - remove?
        // This could happen if we try to intercept WebGL2 method on a WebGL1 context
        return;
    }
    const originalSetterFunc = gl[functionName].bind(gl);
    // Wrap it with a spy so that we can update our state cache when it gets called
    gl[functionName] = function set(...params) {
        // Update the value
        // Call the setter with the state cache and the params so that it can store the parameters
        const glState = getContextState(gl);
        // eslint-disable-next-line @typescript-eslint/unbound-method
        const { valueChanged, oldValue } = setter(glState._updateCache, ...params);
        // Call the original WebGL2RenderingContext func to make sure the context actually gets updated
        if (valueChanged) {
            originalSetterFunc(...params);
        }
        // Note: if the original function fails to set the value, our state cache will be bad
        // No solution for this at the moment, but assuming that this is unlikely to be a real problem
        // We could call the setter after the originalSetterFunc. Concern is that this would
        // cause different behavior in debug mode, where originalSetterFunc can throw exceptions
        return oldValue;
    };
    // Set the name of this anonymous function to help in debugging and profiling
    Object.defineProperty(gl[functionName], 'name', {
        value: `${functionName}-to-cache`,
        configurable: false
    });
}
function installProgramSpy(gl) {
    const originalUseProgram = gl.useProgram.bind(gl);
    gl.useProgram = function useProgramLuma(handle) {
        const glState = getContextState(gl);
        if (glState.program !== handle) {
            originalUseProgram(handle);
            glState.program = handle;
        }
    };
}


}),
"../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  withGLParameters: function() { return withGLParameters; }
});
/* harmony import */var _parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js");
/* harmony import */var _track_context_state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@luma.gl+webgl@9.0.17_@luma.gl+core@9.0.17/node_modules/@luma.gl/webgl/dist/context/state-tracker/track-context-state.js");
// luma.gl
// SPDX-License-Identifier: MIT
// Copyright (c) vis.gl contributors


/**
 * Execute a function with a set of temporary WebGL parameter overrides
 * - Saves current "global" WebGL context settings
 * - Sets the supplies WebGL context parameters,
 * - Executes supplied function
 * - Restores parameters
 * - Returns the return value of the supplied function
 */
function withGLParameters(gl, parameters, func) {
    if (isObjectEmpty(parameters)) {
        // Avoid setting state if no parameters provided. Just call and return
        return func(gl);
    }
    const { nocatch = true } = parameters;
    (0,_track_context_state_js__WEBPACK_IMPORTED_MODULE_0__.pushContextState)(gl);
    (0,_parameters_unified_parameter_api_js__WEBPACK_IMPORTED_MODULE_1__.setGLParameters)(gl, parameters);
    // Setup is done, call the function
    let value;
    if (nocatch) {
        // Avoid try catch to minimize stack size impact for safe execution paths
        value = func(gl);
        (0,_track_context_state_js__WEBPACK_IMPORTED_MODULE_0__.popContextState)(gl);
    }
    else {
        // Wrap in a try-catch to ensure that parameters are restored on exceptions
        try {
            value = func(gl);
        }
        finally {
            (0,_track_context_state_js__WEBPACK_IMPORTED_MODULE_0__.popContextState)(gl);
        }
    }
    return value;
}
// Helpers
// Returns true if given object is empty, false otherwise.
function isObjectEmpty(object) {
    // @ts-ignore - dummy key variable
    for (const key in object) {
        return false;
    }
    return true;
}


}),
"../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/index.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  VERSION: function() { return VERSION; },
  assert: function() { return /* reexport safe */ _utils_assert_js__WEBPACK_IMPORTED_MODULE_4__.assert; },
  console: function() { return /* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.console; },
  document: function() { return /* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.document; },
  getBrowser: function() { return /* reexport safe */ _lib_get_browser_js__WEBPACK_IMPORTED_MODULE_2__.getBrowser; },
  global: function() { return /* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.global; },
  isBrowser: function() { return /* reexport safe */ _lib_is_browser_js__WEBPACK_IMPORTED_MODULE_1__.isBrowser; },
  isElectron: function() { return /* reexport safe */ _lib_is_electron_js__WEBPACK_IMPORTED_MODULE_3__.isElectron; },
  isMobile: function() { return /* reexport safe */ _lib_get_browser_js__WEBPACK_IMPORTED_MODULE_2__.isMobile; },
  process: function() { return /* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.process; },
  self: function() { return /* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.self; },
  window: function() { return /* reexport safe */ _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__.window; }
});
/* harmony import */var _lib_globals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/globals.js");
/* harmony import */var _lib_is_browser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */var _lib_get_browser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/get-browser.js");
/* harmony import */var _lib_is_electron_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-electron.js");
/* harmony import */var _utils_assert_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/utils/assert.js");
// Extract injected version from package.json (injected by babel plugin)
// @ts-expect-error
const VERSION =  true ? "4.0.7" : 0;
// ENVIRONMENT




// ENVIRONMENT'S ASSERT IS 5-15KB, SO WE PROVIDE OUR OWN

// TODO - wish we could just export a constant
// export const isBrowser = checkIfBrowser();


}),
"../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/get-browser.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getBrowser: function() { return getBrowser; },
  isMobile: function() { return isMobile; }
});
/* harmony import */var _is_browser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */var _is_electron_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-electron.js");
/* harmony import */var _globals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/globals.js");
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// This function is needed in initialization stages,
// make sure it can be imported in isolation



function isMobile() {
    return typeof globalThis.orientation !== 'undefined';
}
// Simple browser detection
// `mockUserAgent` parameter allows user agent to be overridden for testing
/* eslint-disable complexity */
function getBrowser(mockUserAgent) {
    if (!mockUserAgent && !(0,_is_browser_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser)()) {
        return 'Node';
    }
    if ((0,_is_electron_js__WEBPACK_IMPORTED_MODULE_1__.isElectron)(mockUserAgent)) {
        return 'Electron';
    }
    const userAgent = mockUserAgent || _globals_js__WEBPACK_IMPORTED_MODULE_2__.navigator.userAgent || '';
    // NOTE: Order of tests matter, as many agents list Chrome etc.
    if (userAgent.indexOf('Edge') > -1) {
        return 'Edge';
    }
    if (globalThis.chrome) {
        return 'Chrome';
    }
    if (globalThis.safari) {
        return 'Safari';
    }
    if (globalThis.mozInnerScreenX) {
        return 'Firefox';
    }
    return 'Unknown';
}


}),
"../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/globals.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  console: function() { return console_; },
  document: function() { return document_; },
  global: function() { return global_; },
  navigator: function() { return navigator_; },
  process: function() { return process_; },
  self: function() { return global_; },
  window: function() { return window_; }
});
// Do not name these variables the same as the global objects - will break bundling
const global_ = globalThis;
const window_ = globalThis;
const document_ = globalThis.document || {};
const process_ = globalThis.process || {};
const console_ = globalThis.console;
const navigator_ = globalThis.navigator || {};



}),
"../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-browser.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isBrowser: function() { return isBrowser; }
});
/* harmony import */var _is_electron_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-electron.js");
// This function is needed in initialization stages,
// make sure it can be imported in isolation

/** Check if in browser by duck-typing Node context */
function isBrowser() {
    const isNode = 
    // @ts-expect-error
    typeof process === 'object' && String(process) === '[object process]' && !process?.browser;
    return !isNode || (0,_is_electron_js__WEBPACK_IMPORTED_MODULE_0__.isElectron)();
}


}),
"../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-electron.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isElectron: function() { return isElectron; }
});
// based on https://github.com/cheton/is-electron
// https://github.com/electron/electron/issues/2288
/* eslint-disable complexity */
function isElectron(mockUserAgent) {
    // Renderer process
    // @ts-expect-error
    if (typeof window !== 'undefined' && window.process?.type === 'renderer') {
        return true;
    }
    // Main process
    // eslint-disable-next-line
    if (typeof process !== 'undefined' && Boolean(process.versions?.['electron'])) {
        return true;
    }
    // Detect the user agent when the `nodeIntegration` option is set to true
    const realUserAgent = typeof navigator !== 'undefined' && navigator.userAgent;
    const userAgent = mockUserAgent || realUserAgent;
    return Boolean(userAgent && userAgent.indexOf('Electron') >= 0);
}


}),
"../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/utils/assert.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  assert: function() { return assert; }
});
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'Assertion failed');
    }
}


}),
"../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/log.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Log: function() { return Log; },
  normalizeArguments: function() { return normalizeArguments; }
});
/* harmony import */var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */var _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/index.js");
/* harmony import */var _utils_local_storage_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/local-storage.js");
/* harmony import */var _utils_formatters_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/formatters.js");
/* harmony import */var _utils_color_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/color.js");
/* harmony import */var _utils_autobind_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/autobind.js");
/* harmony import */var _utils_assert_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/assert.js");
/* harmony import */var _utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/hi-res-timestamp.js");
// probe.gl, MIT license
/* eslint-disable no-console */







// Instrumentation in other packages may override console methods, so preserve them here
const originalConsole = {
    debug: (0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)() ? console.debug || console.log : console.log,
    log: console.log,
    info: console.info,
    warn: console.warn,
    error: console.error
};
const DEFAULT_LOG_CONFIGURATION = {
    enabled: true,
    level: 0
};
function noop() { } // eslint-disable-line @typescript-eslint/no-empty-function
const cache = {};
const ONCE = { once: true };
/** A console wrapper */
class Log {
    constructor({ id } = { id: '' }) {
        this.VERSION = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.VERSION;
        this._startTs = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)();
        this._deltaTs = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)();
        this.userData = {};
        // TODO - fix support from throttling groups
        this.LOG_THROTTLE_TIMEOUT = 0; // Time before throttled messages are logged again
        this.id = id;
        this.userData = {};
        this._storage = new _utils_local_storage_js__WEBPACK_IMPORTED_MODULE_3__.LocalStorage(`__probe-${this.id}__`, DEFAULT_LOG_CONFIGURATION);
        this.timeStamp(`${this.id} started`);
        (0,_utils_autobind_js__WEBPACK_IMPORTED_MODULE_4__.autobind)(this);
        Object.seal(this);
    }
    set level(newLevel) {
        this.setLevel(newLevel);
    }
    get level() {
        return this.getLevel();
    }
    isEnabled() {
        return this._storage.config.enabled;
    }
    getLevel() {
        return this._storage.config.level;
    }
    /** @return milliseconds, with fractions */
    getTotal() {
        return Number(((0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)() - this._startTs).toPrecision(10));
    }
    /** @return milliseconds, with fractions */
    getDelta() {
        return Number(((0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)() - this._deltaTs).toPrecision(10));
    }
    /** @deprecated use logLevel */
    set priority(newPriority) {
        this.level = newPriority;
    }
    /** @deprecated use logLevel */
    get priority() {
        return this.level;
    }
    /** @deprecated use logLevel */
    getPriority() {
        return this.level;
    }
    // Configure
    enable(enabled = true) {
        this._storage.setConfiguration({ enabled });
        return this;
    }
    setLevel(level) {
        this._storage.setConfiguration({ level });
        return this;
    }
    /** return the current status of the setting */
    get(setting) {
        return this._storage.config[setting];
    }
    // update the status of the setting
    set(setting, value) {
        this._storage.setConfiguration({ [setting]: value });
    }
    /** Logs the current settings as a table */
    settings() {
        if (console.table) {
            console.table(this._storage.config);
        }
        else {
            console.log(this._storage.config);
        }
    }
    // Unconditional logging
    assert(condition, message) {
        if (!condition) {
            throw new Error(message || 'Assertion failed');
        }
    }
    warn(message) {
        return this._getLogFunction(0, message, originalConsole.warn, arguments, ONCE);
    }
    error(message) {
        return this._getLogFunction(0, message, originalConsole.error, arguments);
    }
    /** Print a deprecation warning */
    deprecated(oldUsage, newUsage) {
        return this.warn(`\`${oldUsage}\` is deprecated and will be removed \
in a later version. Use \`${newUsage}\` instead`);
    }
    /** Print a removal warning */
    removed(oldUsage, newUsage) {
        return this.error(`\`${oldUsage}\` has been removed. Use \`${newUsage}\` instead`);
    }
    probe(logLevel, message) {
        return this._getLogFunction(logLevel, message, originalConsole.log, arguments, {
            time: true,
            once: true
        });
    }
    log(logLevel, message) {
        return this._getLogFunction(logLevel, message, originalConsole.debug, arguments);
    }
    info(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.info, arguments);
    }
    once(logLevel, message) {
        return this._getLogFunction(logLevel, message, originalConsole.debug || originalConsole.info, arguments, ONCE);
    }
    /** Logs an object as a table */
    table(logLevel, table, columns) {
        if (table) {
            return this._getLogFunction(logLevel, table, console.table || noop, (columns && [columns]), {
                tag: getTableHeader(table)
            });
        }
        return noop;
    }
    time(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.time ? console.time : console.info);
    }
    timeEnd(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.timeEnd ? console.timeEnd : console.info);
    }
    timeStamp(logLevel, message) {
        return this._getLogFunction(logLevel, message, console.timeStamp || noop);
    }
    group(logLevel, message, opts = { collapsed: false }) {
        const options = normalizeArguments({ logLevel, message, opts });
        const { collapsed } = opts;
        // @ts-expect-error
        options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;
        return this._getLogFunction(options);
    }
    groupCollapsed(logLevel, message, opts = {}) {
        return this.group(logLevel, message, Object.assign({}, opts, { collapsed: true }));
    }
    groupEnd(logLevel) {
        return this._getLogFunction(logLevel, '', console.groupEnd || noop);
    }
    // EXPERIMENTAL
    withGroup(logLevel, message, func) {
        this.group(logLevel, message)();
        try {
            func();
        }
        finally {
            this.groupEnd(logLevel)();
        }
    }
    trace() {
        if (console.trace) {
            console.trace();
        }
    }
    // PRIVATE METHODS
    /** Deduces log level from a variety of arguments */
    _shouldLog(logLevel) {
        return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);
    }
    _getLogFunction(logLevel, message, method, args, opts) {
        if (this._shouldLog(logLevel)) {
            // normalized opts + timings
            opts = normalizeArguments({ logLevel, message, args, opts });
            method = method || opts.method;
            (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_5__["default"])(method);
            opts.total = this.getTotal();
            opts.delta = this.getDelta();
            // reset delta timer
            this._deltaTs = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)();
            const tag = opts.tag || opts.message;
            if (opts.once && tag) {
                if (!cache[tag]) {
                    cache[tag] = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__.getHiResTimestamp)();
                }
                else {
                    return noop;
                }
            }
            // TODO - Make throttling work with groups
            // if (opts.nothrottle || !throttle(tag, this.LOG_THROTTLE_TIMEOUT)) {
            //   return noop;
            // }
            message = decorateMessage(this.id, opts.message, opts);
            // Bind console function so that it can be called after being returned
            return method.bind(console, message, ...opts.args);
        }
        return noop;
    }
}
Log.VERSION = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.VERSION;
/**
 * Get logLevel from first argument:
 * - log(logLevel, message, args) => logLevel
 * - log(message, args) => 0
 * - log({logLevel, ...}, message, args) => logLevel
 * - log({logLevel, message, args}) => logLevel
 */
function normalizeLogLevel(logLevel) {
    if (!logLevel) {
        return 0;
    }
    let resolvedLevel;
    switch (typeof logLevel) {
        case 'number':
            resolvedLevel = logLevel;
            break;
        case 'object':
            // Backward compatibility
            // TODO - deprecate `priority`
            // @ts-expect-error
            resolvedLevel = logLevel.logLevel || logLevel.priority || 0;
            break;
        default:
            return 0;
    }
    // 'log level must be a number'
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_5__["default"])(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);
    return resolvedLevel;
}
/**
 * "Normalizes" the various argument patterns into an object with known types
 * - log(logLevel, message, args) => {logLevel, message, args}
 * - log(message, args) => {logLevel: 0, message, args}
 * - log({logLevel, ...}, message, args) => {logLevel, message, args}
 * - log({logLevel, message, args}) => {logLevel, message, args}
 */
function normalizeArguments(opts) {
    const { logLevel, message } = opts;
    opts.logLevel = normalizeLogLevel(logLevel);
    // We use `arguments` instead of rest parameters (...args) because IE
    // does not support the syntax. Rest parameters is transpiled to code with
    // perf impact. Doing it here instead avoids constructing args when logging is
    // disabled.
    // TODO - remove when/if IE support is dropped
    const args = opts.args ? Array.from(opts.args) : [];
    // args should only contain arguments that appear after `message`
    // eslint-disable-next-line no-empty
    while (args.length && args.shift() !== message) { }
    switch (typeof logLevel) {
        case 'string':
        case 'function':
            if (message !== undefined) {
                args.unshift(message);
            }
            opts.message = logLevel;
            break;
        case 'object':
            Object.assign(opts, logLevel);
            break;
        default:
    }
    // Resolve functions into strings by calling them
    if (typeof opts.message === 'function') {
        opts.message = opts.message();
    }
    const messageType = typeof opts.message;
    // 'log message must be a string' or object
    (0,_utils_assert_js__WEBPACK_IMPORTED_MODULE_5__["default"])(messageType === 'string' || messageType === 'object');
    // original opts + normalized opts + opts arg + fixed up message
    return Object.assign(opts, { args }, opts.opts);
}
function decorateMessage(id, message, opts) {
    if (typeof message === 'string') {
        const time = opts.time ? (0,_utils_formatters_js__WEBPACK_IMPORTED_MODULE_6__.leftPad)((0,_utils_formatters_js__WEBPACK_IMPORTED_MODULE_6__.formatTime)(opts.total)) : '';
        message = opts.time ? `${id}: ${time}  ${message}` : `${id}: ${message}`;
        message = (0,_utils_color_js__WEBPACK_IMPORTED_MODULE_7__.addColor)(message, opts.color, opts.background);
    }
    return message;
}
function getTableHeader(table) {
    for (const key in table) {
        for (const title in table[key]) {
            return title || 'untitled';
        }
    }
    return 'empty';
}


}),
"../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/assert.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return assert; }
});
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || 'Assertion failed');
    }
}


}),
"../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/autobind.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  autobind: function() { return autobind; }
});
// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
/**
 * Binds the "this" argument of all functions on a class instance to the instance
 * @param obj - class instance (typically a react component)
 */
function autobind(obj, predefined = ['constructor']) {
    const proto = Object.getPrototypeOf(obj);
    const propNames = Object.getOwnPropertyNames(proto);
    const object = obj;
    for (const key of propNames) {
        const value = object[key];
        if (typeof value === 'function') {
            if (!predefined.find(name => key === name)) {
                object[key] = value.bind(obj);
            }
        }
    }
}


}),
"../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/color.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  COLOR: function() { return COLOR; },
  addColor: function() { return addColor; }
});
/* harmony import */var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-browser.js");

var COLOR;
(function (COLOR) {
    COLOR[COLOR["BLACK"] = 30] = "BLACK";
    COLOR[COLOR["RED"] = 31] = "RED";
    COLOR[COLOR["GREEN"] = 32] = "GREEN";
    COLOR[COLOR["YELLOW"] = 33] = "YELLOW";
    COLOR[COLOR["BLUE"] = 34] = "BLUE";
    COLOR[COLOR["MAGENTA"] = 35] = "MAGENTA";
    COLOR[COLOR["CYAN"] = 36] = "CYAN";
    COLOR[COLOR["WHITE"] = 37] = "WHITE";
    COLOR[COLOR["BRIGHT_BLACK"] = 90] = "BRIGHT_BLACK";
    COLOR[COLOR["BRIGHT_RED"] = 91] = "BRIGHT_RED";
    COLOR[COLOR["BRIGHT_GREEN"] = 92] = "BRIGHT_GREEN";
    COLOR[COLOR["BRIGHT_YELLOW"] = 93] = "BRIGHT_YELLOW";
    COLOR[COLOR["BRIGHT_BLUE"] = 94] = "BRIGHT_BLUE";
    COLOR[COLOR["BRIGHT_MAGENTA"] = 95] = "BRIGHT_MAGENTA";
    COLOR[COLOR["BRIGHT_CYAN"] = 96] = "BRIGHT_CYAN";
    COLOR[COLOR["BRIGHT_WHITE"] = 97] = "BRIGHT_WHITE";
})(COLOR || (COLOR = {}));
const BACKGROUND_INCREMENT = 10;
function getColor(color) {
    if (typeof color !== 'string') {
        return color;
    }
    color = color.toUpperCase();
    return COLOR[color] || COLOR.WHITE;
}
function addColor(string, color, background) {
    if (!_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser && typeof string === 'string') {
        if (color) {
            const colorCode = getColor(color);
            string = `\u001b[${colorCode}m${string}\u001b[39m`;
        }
        if (background) {
            // background colors values are +10
            const colorCode = getColor(background);
            string = `\u001b[${colorCode + BACKGROUND_INCREMENT}m${string}\u001b[49m`;
        }
    }
    return string;
}


}),
"../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/formatters.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  formatTime: function() { return formatTime; },
  formatValue: function() { return formatValue; },
  leftPad: function() { return leftPad; },
  rightPad: function() { return rightPad; }
});
// probe.gl, MIT license
/**
 * Format time
 */
function formatTime(ms) {
    let formatted;
    if (ms < 10) {
        formatted = `${ms.toFixed(2)}ms`;
    }
    else if (ms < 100) {
        formatted = `${ms.toFixed(1)}ms`;
    }
    else if (ms < 1000) {
        formatted = `${ms.toFixed(0)}ms`;
    }
    else {
        formatted = `${(ms / 1000).toFixed(2)}s`;
    }
    return formatted;
}
function leftPad(string, length = 8) {
    const padLength = Math.max(length - string.length, 0);
    return `${' '.repeat(padLength)}${string}`;
}
function rightPad(string, length = 8) {
    const padLength = Math.max(length - string.length, 0);
    return `${string}${' '.repeat(padLength)}`;
}
function formatValue(v, options = {}) {
    const EPSILON = 1e-16;
    const { isInteger = false } = options;
    if (Array.isArray(v) || ArrayBuffer.isView(v)) {
        return formatArrayValue(v, options);
    }
    if (!Number.isFinite(v)) {
        return String(v);
    }
    // @ts-expect-error
    if (Math.abs(v) < EPSILON) {
        return isInteger ? '0' : '0.';
    }
    if (isInteger) {
        // @ts-expect-error
        return v.toFixed(0);
    }
    // @ts-expect-error
    if (Math.abs(v) > 100 && Math.abs(v) < 10000) {
        // @ts-expect-error
        return v.toFixed(0);
    }
    // @ts-expect-error
    const string = v.toPrecision(2);
    const decimal = string.indexOf('.0');
    return decimal === string.length - 2 ? string.slice(0, -1) : string;
}
/** Helper to formatValue */
function formatArrayValue(v, options) {
    const { maxElts = 16, size = 1 } = options;
    let string = '[';
    for (let i = 0; i < v.length && i < maxElts; ++i) {
        if (i > 0) {
            string += `,${i % size === 0 ? ' ' : ''}`;
        }
        string += formatValue(v[i], options);
    }
    const terminator = v.length > maxElts ? '...' : ']';
    return `${string}${terminator}`;
}


}),
"../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/hi-res-timestamp.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getHiResTimestamp: function() { return getHiResTimestamp; }
});
/* harmony import */var _probe_gl_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/is-browser.js");
/* harmony import */var _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+env@4.0.9/node_modules/@probe.gl/env/dist/lib/globals.js");
// probe.gl, MIT license

/** Get best timer available. */
function getHiResTimestamp() {
    let timestamp;
    if ((0,_probe_gl_env__WEBPACK_IMPORTED_MODULE_0__.isBrowser)() && _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.window.performance) {
        timestamp = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.window?.performance?.now?.();
    }
    else if ('hrtime' in _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.process) {
        // @ts-ignore
        const timeParts = _probe_gl_env__WEBPACK_IMPORTED_MODULE_1__.process?.hrtime?.();
        timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;
    }
    else {
        timestamp = Date.now();
    }
    return timestamp;
}


}),
"../node_modules/.pnpm/@probe.gl+log@4.0.9/node_modules/@probe.gl/log/dist/utils/local-storage.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  LocalStorage: function() { return LocalStorage; }
});
// probe.gl, MIT license
function getStorage(type) {
    try {
        const storage = window[type];
        const x = '__storage_test__';
        storage.setItem(x, x);
        storage.removeItem(x);
        return storage;
    }
    catch (e) {
        return null;
    }
}
// Store keys in local storage via simple interface
class LocalStorage {
    constructor(id, defaultConfig, type = 'sessionStorage') {
        this.storage = getStorage(type);
        this.id = id;
        this.config = defaultConfig;
        this._loadConfiguration();
    }
    getConfiguration() {
        return this.config;
    }
    setConfiguration(configuration) {
        Object.assign(this.config, configuration);
        if (this.storage) {
            const serialized = JSON.stringify(this.config);
            this.storage.setItem(this.id, serialized);
        }
    }
    // Get config from persistent store, if available
    _loadConfiguration() {
        let configuration = {};
        if (this.storage) {
            const serializedConfiguration = this.storage.getItem(this.id);
            configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};
        }
        Object.assign(this.config, configuration);
        return this;
    }
}


}),
"../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/index.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Stat: function() { return /* reexport safe */ _lib_stat_js__WEBPACK_IMPORTED_MODULE_1__["default"]; },
  Stats: function() { return /* reexport safe */ _lib_stats_js__WEBPACK_IMPORTED_MODULE_0__["default"]; },
  _getHiResTimestamp: function() { return /* reexport safe */ _utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__["default"]; }
});
/* harmony import */var _lib_stats_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/lib/stats.js");
/* harmony import */var _lib_stat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/lib/stat.js");
/* harmony import */var _utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js");


// UTILITIES



}),
"../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/lib/stat.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return Stat; }
});
/* harmony import */var _utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js");

class Stat {
    constructor(name, type) {
        this.sampleSize = 1;
        this.time = 0;
        this.count = 0;
        this.samples = 0;
        this.lastTiming = 0;
        this.lastSampleTime = 0;
        this.lastSampleCount = 0;
        this._count = 0;
        this._time = 0;
        this._samples = 0;
        this._startTime = 0;
        this._timerPending = false;
        this.name = name;
        this.type = type;
        this.reset();
    }
    reset() {
        this.time = 0;
        this.count = 0;
        this.samples = 0;
        this.lastTiming = 0;
        this.lastSampleTime = 0;
        this.lastSampleCount = 0;
        this._count = 0;
        this._time = 0;
        this._samples = 0;
        this._startTime = 0;
        this._timerPending = false;
        return this;
    }
    setSampleSize(samples) {
        this.sampleSize = samples;
        return this;
    }
    /** Call to increment count (+1) */
    incrementCount() {
        this.addCount(1);
        return this;
    }
    /** Call to decrement count (-1) */
    decrementCount() {
        this.subtractCount(1);
        return this;
    }
    /** Increase count */
    addCount(value) {
        this._count += value;
        this._samples++;
        this._checkSampling();
        return this;
    }
    /** Decrease count */
    subtractCount(value) {
        this._count -= value;
        this._samples++;
        this._checkSampling();
        return this;
    }
    /** Add an arbitrary timing and bump the count */
    addTime(time) {
        this._time += time;
        this.lastTiming = time;
        this._samples++;
        this._checkSampling();
        return this;
    }
    /** Start a timer */
    timeStart() {
        this._startTime = (0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_0__["default"])();
        this._timerPending = true;
        return this;
    }
    /** End a timer. Adds to time and bumps the timing count. */
    timeEnd() {
        if (!this._timerPending) {
            return this;
        }
        this.addTime((0,_utils_hi_res_timestamp_js__WEBPACK_IMPORTED_MODULE_0__["default"])() - this._startTime);
        this._timerPending = false;
        this._checkSampling();
        return this;
    }
    getSampleAverageCount() {
        return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;
    }
    /** Calculate average time / count for the previous window */
    getSampleAverageTime() {
        return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;
    }
    /** Calculate counts per second for the previous window */
    getSampleHz() {
        return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1000) : 0;
    }
    getAverageCount() {
        return this.samples > 0 ? this.count / this.samples : 0;
    }
    /** Calculate average time / count */
    getAverageTime() {
        return this.samples > 0 ? this.time / this.samples : 0;
    }
    /** Calculate counts per second */
    getHz() {
        return this.time > 0 ? this.samples / (this.time / 1000) : 0;
    }
    _checkSampling() {
        if (this._samples === this.sampleSize) {
            this.lastSampleTime = this._time;
            this.lastSampleCount = this._count;
            this.count += this._count;
            this.time += this._time;
            this.samples += this._samples;
            this._time = 0;
            this._count = 0;
            this._samples = 0;
        }
    }
}


}),
"../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/lib/stats.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return Stats; }
});
/* harmony import */var _stat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/lib/stat.js");
// probe.gl, MIT license

/** A "bag" of `Stat` objects, can be visualized using `StatsWidget` */
class Stats {
    constructor(options) {
        this.stats = {};
        this.id = options.id;
        this.stats = {};
        this._initializeStats(options.stats);
        Object.seal(this);
    }
    /** Acquire a stat. Create if it doesn't exist. */
    get(name, type = 'count') {
        return this._getOrCreate({ name, type });
    }
    get size() {
        return Object.keys(this.stats).length;
    }
    /** Reset all stats */
    reset() {
        for (const stat of Object.values(this.stats)) {
            stat.reset();
        }
        return this;
    }
    forEach(fn) {
        for (const stat of Object.values(this.stats)) {
            fn(stat);
        }
    }
    getTable() {
        const table = {};
        this.forEach(stat => {
            table[stat.name] = {
                time: stat.time || 0,
                count: stat.count || 0,
                average: stat.getAverageTime() || 0,
                hz: stat.getHz() || 0
            };
        });
        return table;
    }
    _initializeStats(stats = []) {
        stats.forEach(stat => this._getOrCreate(stat));
    }
    _getOrCreate(stat) {
        const { name, type } = stat;
        let result = this.stats[name];
        if (!result) {
            if (stat instanceof _stat_js__WEBPACK_IMPORTED_MODULE_0__["default"]) {
                result = stat;
            }
            else {
                result = new _stat_js__WEBPACK_IMPORTED_MODULE_0__["default"](name, type);
            }
            this.stats[name] = result;
        }
        return result;
    }
}


}),
"../node_modules/.pnpm/@probe.gl+stats@4.0.9/node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return getHiResTimestamp; }
});
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
function getHiResTimestamp() {
    let timestamp;
    // Get best timer available.
    if (typeof window !== 'undefined' && window.performance) {
        timestamp = window.performance.now();
    }
    else if (typeof process !== 'undefined' && process.hrtime) {
        const timeParts = process.hrtime();
        timestamp = timeParts[0] * 1000 + timeParts[1] / 1e6;
    }
    else {
        timestamp = Date.now();
    }
    return timestamp;
}


}),

}]);
//# sourceMappingURL=vendors-node_modules_pnpm_react-use_17_5_0_react-dom_18_2_0_react_18_2_0__react_18_2_0_node_m-909bcc.js.map